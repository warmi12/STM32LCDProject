
ComplexProjectAudioLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00031fa0  0800a278  0800a278  0001a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c218  0803c218  00050100  2**0
                  CONTENTS
  4 .ARM          00000000  0803c218  0803c218  00050100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803c218  0803c218  00050100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803c218  0803c218  0004c218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803c21c  0803c21c  0004c21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0803c220  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050100  2**0
                  CONTENTS
 10 .bss          0000c7f4  20000100  20000100  00050100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c8f4  2000c8f4  00050100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004e8cc  00000000  00000000  00050130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000638f  00000000  00000000  0009e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000a4d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003578  00000000  00000000  000a5fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fb9  00000000  00000000  000a9548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d79f  00000000  00000000  000ce501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca2fc  00000000  00000000  000fbca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c5f9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b08  00000000  00000000  001c5ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00020e11  00000000  00000000  001caaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a260 	.word	0x0800a260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	0800a260 	.word	0x0800a260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_DMA_Init+0x30>)
{
 8000baa:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	f042 0201 	orr.w	r2, r2, #1
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	695b      	ldr	r3, [r3, #20]
{
 8000bb6:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bc6:	f002 fcdd 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bca:	200f      	movs	r0, #15

}
 8000bcc:	b003      	add	sp, #12
 8000bce:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bd2:	f002 bd0f 	b.w	80035f4 <HAL_NVIC_EnableIRQ>
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	2500      	movs	r5, #0
{
 8000be0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8000be6:	e9cd 5507 	strd	r5, r5, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_GPIO_Init+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000bf0:	4e39      	ldr	r6, [pc, #228]	; (8000cd8 <MX_GPIO_Init+0xfc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|XPT2046_CS_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8000bf2:	4f3a      	ldr	r7, [pc, #232]	; (8000cdc <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000c00:	9201      	str	r2, [sp, #4]
 8000c02:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c12:	9202      	str	r2, [sp, #8]
 8000c14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	695a      	ldr	r2, [r3, #20]
 8000c20:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000c24:	9203      	str	r2, [sp, #12]
 8000c26:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c36:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000c38:	4630      	mov	r0, r6
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000c40:	f002 ff06 	bl	8003a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f002 feff 	bl	8003a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|XPT2046_CS_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	4638      	mov	r0, r7
 8000c56:	2170      	movs	r1, #112	; 0x70
 8000c58:	f002 fefa 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	4630      	mov	r0, r6
 8000c60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c62:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c64:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f002 fded 	bl	800384c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000c72:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000c7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c82:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f002 fde2 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XPT2046_IRQ_Pin;
 8000c88:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(XPT2046_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	a905      	add	r1, sp, #20
 8000c8c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XPT2046_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f002 fdd8 	bl	800384c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	a905      	add	r1, sp, #20
 8000c9e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f002 fdcf 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = XPT2046_CS_Pin|LCD_CS_Pin;
 8000cae:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	a905      	add	r1, sp, #20
 8000cb2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = XPT2046_CS_Pin|LCD_CS_Pin;
 8000cb4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cba:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f002 fdc6 	bl	800384c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000cc0:	462a      	mov	r2, r5
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	2009      	movs	r0, #9
 8000cc6:	f002 fc5d 	bl	8003584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cca:	2009      	movs	r0, #9
 8000ccc:	f002 fc92 	bl	80035f4 <HAL_NVIC_EnableIRQ>

}
 8000cd0:	b00b      	add	sp, #44	; 0x2c
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_I2C1_Init+0x64>)
  hi2c1.Init.Timing = 0x10808DD3;
 8000ce2:	4919      	ldr	r1, [pc, #100]	; (8000d48 <MX_I2C1_Init+0x68>)
{
 8000ce4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_I2C1_Init+0x6c>)
 8000ce8:	6003      	str	r3, [r0, #0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	2201      	movs	r2, #1
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8000cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.Timing = 0x10808DD3;
 8000cfa:	6041      	str	r1, [r0, #4]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	f002 ff7f 	bl	8003c00 <HAL_I2C_Init>
 8000d02:	b950      	cbnz	r0, 8000d1a <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x64>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	f003 f89a 	bl	8003e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0c:	b968      	cbnz	r0, 8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_I2C1_Init+0x64>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	f003 f8c1 	bl	8003e98 <HAL_I2CEx_ConfigDigitalFilter>
 8000d16:	b980      	cbnz	r0, 8000d3a <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d18:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d1a:	f000 fcb5 	bl	8001688 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x64>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	f003 f88d 	bl	8003e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d0f1      	beq.n	8000d0e <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000d2a:	f000 fcad 	bl	8001688 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_I2C1_Init+0x64>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	f003 f8b1 	bl	8003e98 <HAL_I2CEx_ConfigDigitalFilter>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d0ee      	beq.n	8000d18 <MX_I2C1_Init+0x38>
}
 8000d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d3e:	f000 bca3 	b.w	8001688 <Error_Handler>
 8000d42:	bf00      	nop
 8000d44:	20000364 	.word	0x20000364
 8000d48:	10808dd3 	.word	0x10808dd3
 8000d4c:	40005400 	.word	0x40005400

08000d50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8000d54:	6802      	ldr	r2, [r0, #0]
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_I2C_MspInit+0x9c>)
{
 8000d58:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8000d5c:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000d62:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000d66:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000d68:	d002      	beq.n	8000d70 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d6a:	b008      	add	sp, #32
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4d1f      	ldr	r5, [pc, #124]	; (8000df0 <HAL_I2C_MspInit+0xa0>)
 8000d72:	696b      	ldr	r3, [r5, #20]
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	616b      	str	r3, [r5, #20]
 8000d7a:	696b      	ldr	r3, [r5, #20]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	696b      	ldr	r3, [r5, #20]
 8000d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8a:	616b      	str	r3, [r5, #20]
 8000d8c:	696b      	ldr	r3, [r5, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da0:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	a903      	add	r1, sp, #12
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000daa:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dae:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f002 fd4b 	bl	800384c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	a903      	add	r1, sp, #12
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbe:	e9cd 7606 	strd	r7, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f002 fd40 	bl	800384c <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8000dcc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dd0:	f003 f88c 	bl	8003eec <HAL_I2CEx_EnableFastModePlus>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	69eb      	ldr	r3, [r5, #28]
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	61eb      	str	r3, [r5, #28]
 8000ddc:	69eb      	ldr	r3, [r5, #28]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	9b02      	ldr	r3, [sp, #8]
}
 8000de6:	b008      	add	sp, #32
 8000de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000400 	.word	0x48000400

08000df8 <MX_I2S2_Init>:
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_I2S2_Init+0x34>)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_I2S2_Init+0x38>)
{
 8000dfc:	b510      	push	{r4, lr}
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000dfe:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  hi2s2.Instance = SPI2;
 8000e02:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e04:	f44f 7400 	mov.w	r4, #512	; 0x200
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e08:	2300      	movs	r3, #0
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
  hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
 8000e0a:	2202      	movs	r2, #2
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e0c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e10:	6044      	str	r4, [r0, #4]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000e12:	6141      	str	r1, [r0, #20]
  hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
 8000e14:	61c2      	str	r2, [r0, #28]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e16:	6103      	str	r3, [r0, #16]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000e18:	6183      	str	r3, [r0, #24]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e1a:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e1c:	f003 f8a4 	bl	8003f68 <HAL_I2S_Init>
 8000e20:	b900      	cbnz	r0, 8000e24 <MX_I2S2_Init+0x2c>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000e22:	bd10      	pop	{r4, pc}
 8000e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000e28:	f000 bc2e 	b.w	8001688 <Error_Handler>
 8000e2c:	200003f4 	.word	0x200003f4
 8000e30:	40003800 	.word	0x40003800

08000e34 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000e34:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2sHandle->Instance==SPI2)
 8000e36:	6802      	ldr	r2, [r0, #0]
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_I2S_MspInit+0x9c>)
{
 8000e3a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	2400      	movs	r4, #0
  if(i2sHandle->Instance==SPI2)
 8000e3e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000e44:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e48:	9407      	str	r4, [sp, #28]
  if(i2sHandle->Instance==SPI2)
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2S_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e4c:	b008      	add	sp, #32
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e50:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e54:	4e1f      	ldr	r6, [pc, #124]	; (8000ed4 <HAL_I2S_MspInit+0xa0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e56:	69da      	ldr	r2, [r3, #28]
 8000e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e5c:	61da      	str	r2, [r3, #28]
 8000e5e:	69da      	ldr	r2, [r3, #28]
 8000e60:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e78:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e7a:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e82:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e86:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	4605      	mov	r5, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <HAL_I2S_MspInit+0xa4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f002 fcda 	bl	800384c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_I2S_MspInit+0xa8>)
 8000e9a:	6032      	str	r2, [r6, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9c:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9e:	2080      	movs	r0, #128	; 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea8:	6073      	str	r3, [r6, #4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	60f0      	str	r0, [r6, #12]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000eb0:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb2:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	60b4      	str	r4, [r6, #8]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000eb8:	61b4      	str	r4, [r6, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eba:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ebc:	f002 fbd6 	bl	800366c <HAL_DMA_Init>
 8000ec0:	b918      	cbnz	r0, 8000eca <HAL_I2S_MspInit+0x96>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000ec2:	63ae      	str	r6, [r5, #56]	; 0x38
 8000ec4:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000ec6:	b008      	add	sp, #32
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000eca:	f000 fbdd 	bl	8001688 <Error_Handler>
 8000ece:	e7f8      	b.n	8000ec2 <HAL_I2S_MspInit+0x8e>
 8000ed0:	40003800 	.word	0x40003800
 8000ed4:	200003b0 	.word	0x200003b0
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	40020058 	.word	0x40020058

08000ee0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ee0:	b500      	push	{lr}
 8000ee2:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000ee8:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000eea:	2201      	movs	r2, #1
 8000eec:	a901      	add	r1, sp, #4
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x1c>)
 8000ef0:	f004 ffc4 	bl	8005e7c <HAL_UART_Transmit>

  return ch;
}
 8000ef4:	9801      	ldr	r0, [sp, #4]
 8000ef6:	b003      	add	sp, #12
 8000ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000efc:	20000974 	.word	0x20000974

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	2400      	movs	r4, #0
{
 8000f04:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f06:	4621      	mov	r1, r4
 8000f08:	2258      	movs	r2, #88	; 0x58
 8000f0a:	a810      	add	r0, sp, #64	; 0x40

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f12:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000f16:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1e:	2610      	movs	r6, #16
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f007 fefe 	bl	8008d20 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f30:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f34:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f38:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f003 fca7 	bl	8004890 <HAL_RCC_OscConfig>
 8000f42:	b108      	cbz	r0, 8000f48 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f58:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5e:	f003 ffb3 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b108      	cbz	r0, 8000f6a <SystemClock_Config+0x6a>
 8000f66:	b672      	cpsid	i
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_USART2
 8000f6a:	f240 2222 	movw	r2, #546	; 0x222
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f70:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8000f72:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000f74:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_USART2
 8000f76:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f004 f898 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	b108      	cbz	r0, 8000f82 <SystemClock_Config+0x82>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <SystemClock_Config+0x80>
}
 8000f82:	b026      	add	sp, #152	; 0x98
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
 8000f86:	bf00      	nop

08000f88 <main>:
{
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	b083      	sub	sp, #12
  HAL_Init();
 8000f8e:	f002 faaf 	bl	80034f0 <HAL_Init>
  SystemClock_Config();
 8000f92:	f7ff ffb5 	bl	8000f00 <SystemClock_Config>
  MX_GPIO_Init();
 8000f96:	f7ff fe21 	bl	8000bdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f9a:	f000 fc53 	bl	8001844 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f9e:	f7ff fe03 	bl	8000ba8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fa2:	f7ff fe9d 	bl	8000ce0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000fa6:	f7ff ff27 	bl	8000df8 <MX_I2S2_Init>
  MX_SPI1_Init();
 8000faa:	f000 fb6f 	bl	800168c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fae:	f006 f96b 	bl	8007288 <MX_FATFS_Init>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000fb2:	2009      	movs	r0, #9
 8000fb4:	f002 fb2c 	bl	8003610 <HAL_NVIC_DisableIRQ>
  lcd_init();
 8000fb8:	f001 ff7a 	bl	8002eb0 <lcd_init>
  tp_init();
 8000fbc:	f005 f834 	bl	8006028 <tp_init>
  tp_adjust();
 8000fc0:	f005 f98e 	bl	80062e0 <tp_adjust>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fc4:	2009      	movs	r0, #9
 8000fc6:	f002 fb15 	bl	80035f4 <HAL_NVIC_EnableIRQ>
  res = WM89060_Init();
 8000fca:	f001 f85f 	bl	800208c <WM89060_Init>
 8000fce:	4d5c      	ldr	r5, [pc, #368]	; (8001140 <main+0x1b8>)
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	7028      	strb	r0, [r5, #0]
  if(res == 0)  {
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f040 8095 	bne.w	8001104 <main+0x17c>
	printf("WM89060_Init complete !!\r\n");
 8000fda:	485a      	ldr	r0, [pc, #360]	; (8001144 <main+0x1bc>)
 8000fdc:	f007 ffd8 	bl	8008f90 <puts>
  if(f_mount(&microSDFatFs, (TCHAR const*)"/", 0) != FR_OK)  {
 8000fe0:	4959      	ldr	r1, [pc, #356]	; (8001148 <main+0x1c0>)
 8000fe2:	485a      	ldr	r0, [pc, #360]	; (800114c <main+0x1c4>)
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	f007 f933 	bl	8008250 <f_mount>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	f040 8093 	bne.w	8001116 <main+0x18e>
	printf("f_mount completed !!\r\n");
 8000ff0:	4857      	ldr	r0, [pc, #348]	; (8001150 <main+0x1c8>)
 8000ff2:	4c58      	ldr	r4, [pc, #352]	; (8001154 <main+0x1cc>)
 8000ff4:	f007 ffcc 	bl	8008f90 <puts>
	for (int counter = 0; counter < MAX_BMP_FILES; counter++){
 8000ff8:	f104 0664 	add.w	r6, r4, #100	; 0x64
	  pDirectoryFiles[counter] = malloc(13);
 8000ffc:	200d      	movs	r0, #13
 8000ffe:	f007 fe87 	bl	8008d10 <malloc>
 8001002:	f844 0f04 	str.w	r0, [r4, #4]!
	for (int counter = 0; counter < MAX_BMP_FILES; counter++){
 8001006:	42b4      	cmp	r4, r6
 8001008:	d1f8      	bne.n	8000ffc <main+0x74>
  ScanWavefiles("0:/music");//Place the WAV file in the music folder
 800100a:	4853      	ldr	r0, [pc, #332]	; (8001158 <main+0x1d0>)
 800100c:	f000 fc96 	bl	800193c <ScanWavefiles>
  setRotation(3);
 8001010:	2003      	movs	r0, #3
 8001012:	f001 ff0f 	bl	8002e34 <setRotation>
  lcd_draw_image(0);
 8001016:	2000      	movs	r0, #0
 8001018:	f001 fe36 	bl	8002c88 <lcd_draw_image>
    res= f_opendir(&directory, "/");
 800101c:	494a      	ldr	r1, [pc, #296]	; (8001148 <main+0x1c0>)
 800101e:	484f      	ldr	r0, [pc, #316]	; (800115c <main+0x1d4>)
 8001020:	f007 fd70 	bl	8008b04 <f_opendir>
 8001024:	7028      	strb	r0, [r5, #0]
    if((res != FR_OK))
 8001026:	2800      	cmp	r0, #0
 8001028:	d179      	bne.n	800111e <main+0x196>
    filesnumbers = Storage_GetDirectoryBitmapFiles ("/", pDirectoryFiles);
 800102a:	494d      	ldr	r1, [pc, #308]	; (8001160 <main+0x1d8>)
 800102c:	4846      	ldr	r0, [pc, #280]	; (8001148 <main+0x1c0>)
 800102e:	4e4d      	ldr	r6, [pc, #308]	; (8001164 <main+0x1dc>)
 8001030:	4f4d      	ldr	r7, [pc, #308]	; (8001168 <main+0x1e0>)
 8001032:	4d4e      	ldr	r5, [pc, #312]	; (800116c <main+0x1e4>)
 8001034:	f8df b160 	ldr.w	fp, [pc, #352]	; 8001198 <main+0x210>
	 	    lcd_display_string(5,1,(const uint8_t *)"Now Play:",FONT_1608,RED);
 8001038:	f8df a160 	ldr.w	sl, [pc, #352]	; 800119c <main+0x214>
		sprintf((char*)str, "%-11.11s", pDirectoryFiles[bmpcounter -1]);
 800103c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80011a0 <main+0x218>
    filesnumbers = Storage_GetDirectoryBitmapFiles ("/", pDirectoryFiles);
 8001040:	f001 f902 	bl	8002248 <Storage_GetDirectoryBitmapFiles>
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <main+0x1e8>)
 8001046:	4601      	mov	r1, r0
	printf("filesnumbers %d",filesnumbers);
 8001048:	484a      	ldr	r0, [pc, #296]	; (8001174 <main+0x1ec>)
    filesnumbers = Storage_GetDirectoryBitmapFiles ("/", pDirectoryFiles);
 800104a:	6019      	str	r1, [r3, #0]
	printf("filesnumbers %d",filesnumbers);
 800104c:	f007 ff1a 	bl	8008e84 <iprintf>
	f_closedir(&directory);
 8001050:	4842      	ldr	r0, [pc, #264]	; (800115c <main+0x1d4>)
 8001052:	f007 fdb3 	bl	8008bbc <f_closedir>
	  if (playFlag==1) {
 8001056:	7833      	ldrb	r3, [r6, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	b2dc      	uxtb	r4, r3
 800105c:	d01e      	beq.n	800109c <main+0x114>
	 	  if (displayImgFlag==1) {
 800105e:	782b      	ldrb	r3, [r5, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d1f8      	bne.n	8001056 <main+0xce>
		sprintf((char*)str, "%-11.11s", pDirectoryFiles[bmpcounter -1]);
 8001064:	f8db 3000 	ldr.w	r3, [fp]
 8001068:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <main+0x1d8>)
 800106a:	4943      	ldr	r1, [pc, #268]	; (8001178 <main+0x1f0>)
 800106c:	3b01      	subs	r3, #1
 800106e:	4648      	mov	r0, r9
 8001070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001074:	f007 ffa4 	bl	8008fc0 <siprintf>
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001078:	2009      	movs	r0, #9
 800107a:	f002 fac9 	bl	8003610 <HAL_NVIC_DisableIRQ>
		Storage_OpenReadFile(0, 0, (const char*)str);
 800107e:	2100      	movs	r1, #0
 8001080:	464a      	mov	r2, r9
 8001082:	4608      	mov	r0, r1
 8001084:	f001 f870 	bl	8002168 <Storage_OpenReadFile>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001088:	2009      	movs	r0, #9
 800108a:	f002 fab3 	bl	80035f4 <HAL_NVIC_EnableIRQ>
	 		displayImgFlag=0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	702b      	strb	r3, [r5, #0]
	  if (playFlag==1) {
 8001094:	7833      	ldrb	r3, [r6, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	b2dc      	uxtb	r4, r3
 800109a:	d1e0      	bne.n	800105e <main+0xd6>
	 		lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 800109c:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 80010a0:	2100      	movs	r1, #0
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <main+0x1f4>)
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	4608      	mov	r0, r1
 80010aa:	2314      	movs	r3, #20
 80010ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
	 	    lcd_display_string(5,1,(const uint8_t *)"Now Play:",FONT_1608,RED);
 80010b0:	f44f 4878 	mov.w	r8, #63488	; 0xf800
	 		lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 80010b4:	f001 fdbe 	bl	8002c34 <lcd_copy>
	 	    lcd_display_string(5,1,(const uint8_t *)"Now Play:",FONT_1608,RED);
 80010b8:	2310      	movs	r3, #16
 80010ba:	4652      	mov	r2, sl
 80010bc:	4621      	mov	r1, r4
 80010be:	2005      	movs	r0, #5
 80010c0:	f8cd 8000 	str.w	r8, [sp]
 80010c4:	f001 fcc2 	bl	8002a4c <lcd_display_string>
	 	    lcd_display_string(80,1,(const uint8_t *)Play_List[Music_Num]+9,FONT_1608,RED);
 80010c8:	f997 2000 	ldrsb.w	r2, [r7]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <main+0x1f8>)
 80010ce:	f8cd 8000 	str.w	r8, [sp]
 80010d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80010d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80010da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80010de:	3209      	adds	r2, #9
 80010e0:	2310      	movs	r3, #16
 80010e2:	4621      	mov	r1, r4
 80010e4:	2050      	movs	r0, #80	; 0x50
 80010e6:	f001 fcb1 	bl	8002a4c <lcd_display_string>
	 		PlayWaveFile();
 80010ea:	f000 fee9 	bl	8001ec0 <PlayWaveFile>
	 		Music_Num++;
 80010ee:	783b      	ldrb	r3, [r7, #0]
	 		if(Music_Num >= Music_Num_MAX)
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <main+0x1fc>)
	 		Music_Num++;
 80010f2:	3301      	adds	r3, #1
	 		if(Music_Num >= Music_Num_MAX)
 80010f4:	7812      	ldrb	r2, [r2, #0]
	 		Music_Num++;
 80010f6:	b25b      	sxtb	r3, r3
	 		if(Music_Num >= Music_Num_MAX)
 80010f8:	4293      	cmp	r3, r2
	 		Music_Num++;
 80010fa:	703b      	strb	r3, [r7, #0]
	 			Music_Num = 0;
 80010fc:	bfa4      	itt	ge
 80010fe:	2300      	movge	r3, #0
 8001100:	703b      	strbge	r3, [r7, #0]
 8001102:	e7ac      	b.n	800105e <main+0xd6>
	printf("WM89060_Init fail ! Error code: %d\r\n", res);
 8001104:	4601      	mov	r1, r0
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <main+0x200>)
 8001108:	f007 febc 	bl	8008e84 <iprintf>
	  HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f002 fa12 	bl	8003538 <HAL_Delay>
	while(1)  {
 8001114:	e7fa      	b.n	800110c <main+0x184>
	printf("f_mount fail ! Error code: %d\r\n");
 8001116:	481d      	ldr	r0, [pc, #116]	; (800118c <main+0x204>)
 8001118:	f007 feb4 	bl	8008e84 <iprintf>
	while(1);
 800111c:	e7fe      	b.n	800111c <main+0x194>
      if(res == FR_NO_FILESYSTEM)
 800111e:	280d      	cmp	r0, #13
        lcd_display_string(0, 32, (const uint8_t *)"SD_CARD_NOT_FORMATTED", 16, RED);
 8001120:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	bf0c      	ite	eq
 8001128:	4a19      	ldreq	r2, [pc, #100]	; (8001190 <main+0x208>)
         lcd_display_string(0, 48, (const uint8_t *)"SD_CARD_OPEN_FAIL", 16, RED);
 800112a:	4a1a      	ldrne	r2, [pc, #104]	; (8001194 <main+0x20c>)
        lcd_display_string(0, 32, (const uint8_t *)"SD_CARD_NOT_FORMATTED", 16, RED);
 800112c:	f04f 0310 	mov.w	r3, #16
 8001130:	bf0c      	ite	eq
 8001132:	2120      	moveq	r1, #32
         lcd_display_string(0, 48, (const uint8_t *)"SD_CARD_OPEN_FAIL", 16, RED);
 8001134:	2130      	movne	r1, #48	; 0x30
 8001136:	2000      	movs	r0, #0
 8001138:	f001 fc88 	bl	8002a4c <lcd_display_string>
 800113c:	e775      	b.n	800102a <main+0xa2>
 800113e:	bf00      	nop
 8001140:	2000090c 	.word	0x2000090c
 8001144:	0800a278 	.word	0x0800a278
 8001148:	0800a294 	.word	0x0800a294
 800114c:	200006c4 	.word	0x200006c4
 8001150:	0800a2e0 	.word	0x0800a2e0
 8001154:	2000065c 	.word	0x2000065c
 8001158:	0800a2f8 	.word	0x0800a2f8
 800115c:	20000440 	.word	0x20000440
 8001160:	20000660 	.word	0x20000660
 8001164:	20000129 	.word	0x20000129
 8001168:	20000134 	.word	0x20000134
 800116c:	20000120 	.word	0x20000120
 8001170:	20000124 	.word	0x20000124
 8001174:	0800a330 	.word	0x0800a330
 8001178:	0800a34c 	.word	0x0800a34c
 800117c:	0801f294 	.word	0x0801f294
 8001180:	20000138 	.word	0x20000138
 8001184:	200046f6 	.word	0x200046f6
 8001188:	0800a298 	.word	0x0800a298
 800118c:	0800a2c0 	.word	0x0800a2c0
 8001190:	0800a304 	.word	0x0800a304
 8001194:	0800a31c 	.word	0x0800a31c
 8001198:	2000011c 	.word	0x2000011c
 800119c:	0800a340 	.word	0x0800a340
 80011a0:	200008f8 	.word	0x200008f8

080011a4 <HAL_I2S_TxHalfCpltCallback>:
  I2S_Flag = I2S_Half_Callback;
 80011a4:	4b01      	ldr	r3, [pc, #4]	; (80011ac <HAL_I2S_TxHalfCpltCallback+0x8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	4770      	bx	lr
 80011ac:	2000bc28 	.word	0x2000bc28

080011b0 <HAL_I2S_TxCpltCallback>:
  if(WAV_LastData >= WAV_BUFFER_SIZE)  {
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_I2S_TxCpltCallback+0x2c>)
	I2S_Flag = I2S_Callback;
 80011b2:	490b      	ldr	r1, [pc, #44]	; (80011e0 <HAL_I2S_TxCpltCallback+0x30>)
  if(WAV_LastData >= WAV_BUFFER_SIZE)  {
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f247 532f 	movw	r3, #29999	; 0x752f
	I2S_Flag = I2S_Callback;
 80011ba:	2002      	movs	r0, #2
  if(WAV_LastData >= WAV_BUFFER_SIZE)  {
 80011bc:	429a      	cmp	r2, r3
	I2S_Flag = I2S_Callback;
 80011be:	7008      	strb	r0, [r1, #0]
  if(WAV_LastData >= WAV_BUFFER_SIZE)  {
 80011c0:	d806      	bhi.n	80011d0 <HAL_I2S_TxCpltCallback+0x20>
    Play_Flag = 0;
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <HAL_I2S_TxCpltCallback+0x34>)
    End_Flag = 1;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_I2S_TxCpltCallback+0x38>)
    Play_Flag = 0;
 80011c6:	2000      	movs	r0, #0
    End_Flag = 1;
 80011c8:	2201      	movs	r2, #1
    Play_Flag = 0;
 80011ca:	7008      	strb	r0, [r1, #0]
    End_Flag = 1;
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	4770      	bx	lr
    HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t *)WAV_Buffer, WAV_BUFFER_SIZE/2);
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <HAL_I2S_TxCpltCallback+0x3c>)
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_I2S_TxCpltCallback+0x40>)
 80011d4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80011d8:	f002 bf7a 	b.w	80040d0 <HAL_I2S_Transmit_DMA>
 80011dc:	200046e8 	.word	0x200046e8
 80011e0:	2000bc28 	.word	0x2000bc28
 80011e4:	200046ec 	.word	0x200046ec
 80011e8:	200046f4 	.word	0x200046f4
 80011ec:	200046f8 	.word	0x200046f8
 80011f0:	200003f4 	.word	0x200003f4

080011f4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (HAL_GetTick()-tick>100) {
 80011f8:	4cc2      	ldr	r4, [pc, #776]	; (8001504 <HAL_GPIO_EXTI_Callback+0x310>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011fa:	b082      	sub	sp, #8
	if (HAL_GetTick()-tick>100) {
 80011fc:	f002 f996 	bl	800352c <HAL_GetTick>
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	1ac0      	subs	r0, r0, r3
 8001204:	2864      	cmp	r0, #100	; 0x64
 8001206:	d802      	bhi.n	800120e <HAL_GPIO_EXTI_Callback+0x1a>
}
 8001208:	b002      	add	sp, #8
 800120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (pageNumber) {
 800120e:	4fbe      	ldr	r7, [pc, #760]	; (8001508 <HAL_GPIO_EXTI_Callback+0x314>)
 8001210:	4dbe      	ldr	r5, [pc, #760]	; (800150c <HAL_GPIO_EXTI_Callback+0x318>)
	tp_scan(0);
 8001212:	2000      	movs	r0, #0
 8001214:	f005 f800 	bl	8006218 <tp_scan>
	switch (pageNumber) {
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	b2de      	uxtb	r6, r3
 800121e:	d013      	beq.n	8001248 <HAL_GPIO_EXTI_Callback+0x54>
 8001220:	2e02      	cmp	r6, #2
 8001222:	f000 808f 	beq.w	8001344 <HAL_GPIO_EXTI_Callback+0x150>
 8001226:	2e00      	cmp	r6, #0
 8001228:	d067      	beq.n	80012fa <HAL_GPIO_EXTI_Callback+0x106>
	tick=HAL_GetTick();
 800122a:	f002 f97f 	bl	800352c <HAL_GetTick>
	s_tTouch.chStatus &= ~(1 << 7);
 800122e:	7a2b      	ldrb	r3, [r5, #8]
	tick=HAL_GetTick();
 8001230:	6020      	str	r0, [r4, #0]
	s_tTouch.chStatus &= ~(1 << 7);
 8001232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	s_tTouch.hwXpos0 = 0;
 8001236:	2100      	movs	r1, #0
	s_tTouch.hwXpos = 0xffff;
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	e9c5 1200 	strd	r1, r2, [r5]
	s_tTouch.chStatus &= ~(1 << 7);
 8001240:	722b      	strb	r3, [r5, #8]
}
 8001242:	b002      	add	sp, #8
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (s_tTouch.chStatus & TP_PRESS_DOWN) {
 8001248:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	daec      	bge.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
					if (s_tTouch.hwXpos < LCD_WIDTH && s_tTouch.hwYpos < LCD_HEIGHT) {
 8001250:	88ab      	ldrh	r3, [r5, #4]
 8001252:	2bef      	cmp	r3, #239	; 0xef
 8001254:	d8e9      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001256:	88ea      	ldrh	r2, [r5, #6]
 8001258:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800125c:	d2e5      	bcs.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
						if ((s_tTouch.hwXpos > 30 && s_tTouch.hwXpos < 55) && (s_tTouch.hwYpos < 315 && s_tTouch.hwYpos>295)) {
 800125e:	f1a3 011f 	sub.w	r1, r3, #31
 8001262:	2917      	cmp	r1, #23
 8001264:	f200 808f 	bhi.w	8001386 <HAL_GPIO_EXTI_Callback+0x192>
 8001268:	f5a2 7194 	sub.w	r1, r2, #296	; 0x128
 800126c:	2912      	cmp	r1, #18
 800126e:	f240 8121 	bls.w	80014b4 <HAL_GPIO_EXTI_Callback+0x2c0>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 69 && s_tTouch.hwYpos>11)) {
 8001272:	3bb5      	subs	r3, #181	; 0xb5
 8001274:	2b3a      	cmp	r3, #58	; 0x3a
 8001276:	d8d8      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001278:	f1a2 030c 	sub.w	r3, r2, #12
 800127c:	2b38      	cmp	r3, #56	; 0x38
 800127e:	f240 816d 	bls.w	800155c <HAL_GPIO_EXTI_Callback+0x368>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 149 && s_tTouch.hwYpos>91)) {
 8001282:	f1a2 035c 	sub.w	r3, r2, #92	; 0x5c
 8001286:	2b38      	cmp	r3, #56	; 0x38
 8001288:	f240 818e 	bls.w	80015a8 <HAL_GPIO_EXTI_Callback+0x3b4>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 229 && s_tTouch.hwYpos>171)) {
 800128c:	f1a2 03ac 	sub.w	r3, r2, #172	; 0xac
 8001290:	2b38      	cmp	r3, #56	; 0x38
 8001292:	f240 81b0 	bls.w	80015f6 <HAL_GPIO_EXTI_Callback+0x402>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 309 && s_tTouch.hwYpos>251)) {
 8001296:	3afc      	subs	r2, #252	; 0xfc
 8001298:	2a38      	cmp	r2, #56	; 0x38
 800129a:	d8c6      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(11, 181, 58, 58, &pressedleftArrowImg, sizeof(pressedleftArrowImg));
 800129c:	f641 2348 	movw	r3, #6728	; 0x1a48
 80012a0:	4a9b      	ldr	r2, [pc, #620]	; (8001510 <HAL_GPIO_EXTI_Callback+0x31c>)
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	233a      	movs	r3, #58	; 0x3a
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	21b5      	movs	r1, #181	; 0xb5
 80012aa:	461a      	mov	r2, r3
 80012ac:	200b      	movs	r0, #11
 80012ae:	f001 fcc1 	bl	8002c34 <lcd_copy>
							Music_Num -= 2;
 80012b2:	4a98      	ldr	r2, [pc, #608]	; (8001514 <HAL_GPIO_EXTI_Callback+0x320>)
 80012b4:	7813      	ldrb	r3, [r2, #0]
 80012b6:	3b02      	subs	r3, #2
 80012b8:	b259      	sxtb	r1, r3
							if(Music_Num < 0)
 80012ba:	2900      	cmp	r1, #0
							Music_Num -= 2;
 80012bc:	7011      	strb	r1, [r2, #0]
 80012be:	b2db      	uxtb	r3, r3
							if(Music_Num < 0)
 80012c0:	da03      	bge.n	80012ca <HAL_GPIO_EXTI_Callback+0xd6>
								Music_Num += Music_Num_MAX;
 80012c2:	4995      	ldr	r1, [pc, #596]	; (8001518 <HAL_GPIO_EXTI_Callback+0x324>)
 80012c4:	7809      	ldrb	r1, [r1, #0]
 80012c6:	440b      	add	r3, r1
 80012c8:	7013      	strb	r3, [r2, #0]
							Play_Flag = 0;
 80012ca:	4994      	ldr	r1, [pc, #592]	; (800151c <HAL_GPIO_EXTI_Callback+0x328>)
							End_Flag = 1;
 80012cc:	4b94      	ldr	r3, [pc, #592]	; (8001520 <HAL_GPIO_EXTI_Callback+0x32c>)
							HAL_I2S_DMAStop(&hi2s2);
 80012ce:	4895      	ldr	r0, [pc, #596]	; (8001524 <HAL_GPIO_EXTI_Callback+0x330>)
							End_Flag = 1;
 80012d0:	2201      	movs	r2, #1
							Play_Flag = 0;
 80012d2:	2600      	movs	r6, #0
 80012d4:	700e      	strb	r6, [r1, #0]
							End_Flag = 1;
 80012d6:	701a      	strb	r2, [r3, #0]
							HAL_I2S_DMAStop(&hi2s2);
 80012d8:	f002 fffe 	bl	80042d8 <HAL_I2S_DMAStop>
							HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f002 f92b 	bl	8003538 <HAL_Delay>
							lcd_copy(11, 181, 58, 58, &leftArrowImg, sizeof(leftArrowImg));
 80012e2:	f641 2348 	movw	r3, #6728	; 0x1a48
 80012e6:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_GPIO_EXTI_Callback+0x334>)
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	233a      	movs	r3, #58	; 0x3a
 80012ec:	9200      	str	r2, [sp, #0]
 80012ee:	21b5      	movs	r1, #181	; 0xb5
 80012f0:	461a      	mov	r2, r3
 80012f2:	200b      	movs	r0, #11
 80012f4:	f001 fc9e 	bl	8002c34 <lcd_copy>
 80012f8:	e797      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
			if (s_tTouch.chStatus & TP_PRESS_DOWN) {
 80012fa:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da93      	bge.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
				if (s_tTouch.hwXpos < LCD_WIDTH && s_tTouch.hwYpos < LCD_HEIGHT) {
 8001302:	88ab      	ldrh	r3, [r5, #4]
 8001304:	2bef      	cmp	r3, #239	; 0xef
 8001306:	d890      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001308:	88ea      	ldrh	r2, [r5, #6]
 800130a:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800130e:	d28c      	bcs.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
					if ((s_tTouch.hwYpos > 57 && s_tTouch.hwYpos < 118) && (s_tTouch.hwXpos < 118 && s_tTouch.hwXpos>60)) {
 8001310:	f1a2 013a 	sub.w	r1, r2, #58	; 0x3a
 8001314:	293b      	cmp	r1, #59	; 0x3b
 8001316:	d86e      	bhi.n	80013f6 <HAL_GPIO_EXTI_Callback+0x202>
 8001318:	3b3d      	subs	r3, #61	; 0x3d
 800131a:	2b38      	cmp	r3, #56	; 0x38
 800131c:	d885      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
						lcd_copy(203, 60, 74, 58, &pressedphonesImg, sizeof(pressedphonesImg));
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <HAL_GPIO_EXTI_Callback+0x338>)
 8001320:	f242 1288 	movw	r2, #8584	; 0x2188
 8001324:	e9cd 3200 	strd	r3, r2, [sp]
 8001328:	213c      	movs	r1, #60	; 0x3c
 800132a:	233a      	movs	r3, #58	; 0x3a
 800132c:	224a      	movs	r2, #74	; 0x4a
 800132e:	20cb      	movs	r0, #203	; 0xcb
 8001330:	f001 fc80 	bl	8002c34 <lcd_copy>
						HAL_Delay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f002 f8ff 	bl	8003538 <HAL_Delay>
						pageNumber=1;
 800133a:	2001      	movs	r0, #1
 800133c:	7038      	strb	r0, [r7, #0]
						lcd_draw_image(1);
 800133e:	f001 fca3 	bl	8002c88 <lcd_draw_image>
					if ((s_tTouch.hwYpos > 57 && s_tTouch.hwYpos < 118) && (s_tTouch.hwXpos < 118 && s_tTouch.hwXpos>60)) {
 8001342:	e772      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
			if (s_tTouch.chStatus & TP_PRESS_DOWN) {
 8001344:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f6bf af6e 	bge.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
				if (s_tTouch.hwXpos < LCD_WIDTH && s_tTouch.hwYpos < LCD_HEIGHT) {
 800134e:	88ab      	ldrh	r3, [r5, #4]
 8001350:	2bef      	cmp	r3, #239	; 0xef
 8001352:	f63f af6a 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001356:	88ea      	ldrh	r2, [r5, #6]
 8001358:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800135c:	f4bf af65 	bcs.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
					if ((s_tTouch.hwXpos > 0 && s_tTouch.hwXpos < 120) && (s_tTouch.hwYpos < 220 && s_tTouch.hwYpos>0)) {
 8001360:	1e59      	subs	r1, r3, #1
 8001362:	b289      	uxth	r1, r1
 8001364:	2976      	cmp	r1, #118	; 0x76
 8001366:	d834      	bhi.n	80013d2 <HAL_GPIO_EXTI_Callback+0x1de>
 8001368:	1e53      	subs	r3, r2, #1
 800136a:	2bda      	cmp	r3, #218	; 0xda
 800136c:	f200 8090 	bhi.w	8001490 <HAL_GPIO_EXTI_Callback+0x29c>
						if (bmpcounter>1) {
 8001370:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	f240 80be 	bls.w	80014f6 <HAL_GPIO_EXTI_Callback+0x302>
							displayImgFlag=1;
 800137a:	496e      	ldr	r1, [pc, #440]	; (8001534 <HAL_GPIO_EXTI_Callback+0x340>)
							bmpcounter--;
 800137c:	3b01      	subs	r3, #1
							displayImgFlag=1;
 800137e:	2001      	movs	r0, #1
							bmpcounter--;
 8001380:	6013      	str	r3, [r2, #0]
							displayImgFlag=1;
 8001382:	7008      	strb	r0, [r1, #0]
 8001384:	e751      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
						else if ((s_tTouch.hwXpos > 60 && s_tTouch.hwXpos < 105) && (s_tTouch.hwYpos < 55 && s_tTouch.hwYpos>10)) {
 8001386:	f1a3 013d 	sub.w	r1, r3, #61	; 0x3d
 800138a:	292b      	cmp	r1, #43	; 0x2b
 800138c:	d856      	bhi.n	800143c <HAL_GPIO_EXTI_Callback+0x248>
 800138e:	3a0b      	subs	r2, #11
 8001390:	2a2b      	cmp	r2, #43	; 0x2b
 8001392:	f63f af4a 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(266, 60, 44, 44, &pressedplusImg, sizeof(pressedplusImg));
 8001396:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 800139a:	4a67      	ldr	r2, [pc, #412]	; (8001538 <HAL_GPIO_EXTI_Callback+0x344>)
 800139c:	9301      	str	r3, [sp, #4]
							if (volumeLevel<112) {
 800139e:	4e67      	ldr	r6, [pc, #412]	; (800153c <HAL_GPIO_EXTI_Callback+0x348>)
							lcd_copy(266, 60, 44, 44, &pressedplusImg, sizeof(pressedplusImg));
 80013a0:	9200      	str	r2, [sp, #0]
 80013a2:	232c      	movs	r3, #44	; 0x2c
 80013a4:	461a      	mov	r2, r3
 80013a6:	213c      	movs	r1, #60	; 0x3c
 80013a8:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80013ac:	f001 fc42 	bl	8002c34 <lcd_copy>
							if (volumeLevel<112) {
 80013b0:	7833      	ldrb	r3, [r6, #0]
 80013b2:	2b6f      	cmp	r3, #111	; 0x6f
 80013b4:	f240 8131 	bls.w	800161a <HAL_GPIO_EXTI_Callback+0x426>
							lcd_copy(266, 60, 44, 44, &plusImg, sizeof(plusImg));
 80013b8:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 80013bc:	4a60      	ldr	r2, [pc, #384]	; (8001540 <HAL_GPIO_EXTI_Callback+0x34c>)
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	232c      	movs	r3, #44	; 0x2c
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	213c      	movs	r1, #60	; 0x3c
 80013c6:	461a      	mov	r2, r3
 80013c8:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80013cc:	f001 fc32 	bl	8002c34 <lcd_copy>
						else if ((s_tTouch.hwXpos > 60 && s_tTouch.hwXpos < 105) && (s_tTouch.hwYpos < 55 && s_tTouch.hwYpos>10)) {
 80013d0:	e72b      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
					else if ((s_tTouch.hwXpos > 120 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 220 && s_tTouch.hwYpos>0)) {
 80013d2:	3b79      	subs	r3, #121	; 0x79
 80013d4:	2b76      	cmp	r3, #118	; 0x76
 80013d6:	d858      	bhi.n	800148a <HAL_GPIO_EXTI_Callback+0x296>
 80013d8:	1e53      	subs	r3, r2, #1
 80013da:	2bda      	cmp	r3, #218	; 0xda
 80013dc:	d855      	bhi.n	800148a <HAL_GPIO_EXTI_Callback+0x296>
				        if(bmpcounter > filesnumbers)
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_EXTI_Callback+0x33c>)
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <HAL_GPIO_EXTI_Callback+0x350>)
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	6809      	ldr	r1, [r1, #0]
 80013e6:	428b      	cmp	r3, r1
				          displayImgFlag=1;
 80013e8:	4952      	ldr	r1, [pc, #328]	; (8001534 <HAL_GPIO_EXTI_Callback+0x340>)
				        if(bmpcounter > filesnumbers)
 80013ea:	f240 80d8 	bls.w	800159e <HAL_GPIO_EXTI_Callback+0x3aa>
				          bmpcounter = 1;
 80013ee:	2301      	movs	r3, #1
				          displayImgFlag=1;
 80013f0:	700b      	strb	r3, [r1, #0]
				          bmpcounter = 1;
 80013f2:	6013      	str	r3, [r2, #0]
				          displayImgFlag=1;
 80013f4:	e719      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
					else if ((s_tTouch.hwYpos > 210 && s_tTouch.hwYpos < 270) && (s_tTouch.hwXpos < 118 && s_tTouch.hwXpos>60)) {
 80013f6:	3ad3      	subs	r2, #211	; 0xd3
 80013f8:	2a3a      	cmp	r2, #58	; 0x3a
 80013fa:	f63f af16 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
 80013fe:	3b3d      	subs	r3, #61	; 0x3d
 8001400:	2b38      	cmp	r3, #56	; 0x38
 8001402:	f63f af12 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
						lcd_copy(50, 60, 59, 58, &pressedphotoImg, sizeof(pressedphotoImg));
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <HAL_GPIO_EXTI_Callback+0x354>)
						bmpcounter=1;
 8001408:	f8df c124 	ldr.w	ip, [pc, #292]	; 8001530 <HAL_GPIO_EXTI_Callback+0x33c>
						lcd_copy(50, 60, 59, 58, &pressedphotoImg, sizeof(pressedphotoImg));
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f641 3332 	movw	r3, #6962	; 0x1b32
 8001412:	223b      	movs	r2, #59	; 0x3b
 8001414:	213c      	movs	r1, #60	; 0x3c
						bmpcounter=1;
 8001416:	2601      	movs	r6, #1
						lcd_copy(50, 60, 59, 58, &pressedphotoImg, sizeof(pressedphotoImg));
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2032      	movs	r0, #50	; 0x32
 800141c:	233a      	movs	r3, #58	; 0x3a
						bmpcounter=1;
 800141e:	f8cc 6000 	str.w	r6, [ip]
						lcd_copy(50, 60, 59, 58, &pressedphotoImg, sizeof(pressedphotoImg));
 8001422:	f001 fc07 	bl	8002c34 <lcd_copy>
						HAL_Delay(100);
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f002 f886 	bl	8003538 <HAL_Delay>
						setRotation(0);
 800142c:	2000      	movs	r0, #0
 800142e:	f001 fd01 	bl	8002e34 <setRotation>
						displayImgFlag=1;
 8001432:	4a40      	ldr	r2, [pc, #256]	; (8001534 <HAL_GPIO_EXTI_Callback+0x340>)
						pageNumber=2;
 8001434:	2302      	movs	r3, #2
						displayImgFlag=1;
 8001436:	7016      	strb	r6, [r2, #0]
						pageNumber=2;
 8001438:	703b      	strb	r3, [r7, #0]
 800143a:	e6f6      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
						else if ((s_tTouch.hwXpos > 120 && s_tTouch.hwXpos < 165) && (s_tTouch.hwYpos < 55 && s_tTouch.hwYpos>10)) {
 800143c:	f1a3 0179 	sub.w	r1, r3, #121	; 0x79
 8001440:	292b      	cmp	r1, #43	; 0x2b
 8001442:	f63f af16 	bhi.w	8001272 <HAL_GPIO_EXTI_Callback+0x7e>
 8001446:	3a0b      	subs	r2, #11
 8001448:	2a2b      	cmp	r2, #43	; 0x2b
 800144a:	f63f aeee 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(266, 120, 44, 44, &pressedminusImg, sizeof(pressedminusImg));
 800144e:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8001452:	4a3e      	ldr	r2, [pc, #248]	; (800154c <HAL_GPIO_EXTI_Callback+0x358>)
 8001454:	9301      	str	r3, [sp, #4]
							if (volumeLevel>60) {
 8001456:	4e39      	ldr	r6, [pc, #228]	; (800153c <HAL_GPIO_EXTI_Callback+0x348>)
							lcd_copy(266, 120, 44, 44, &pressedminusImg, sizeof(pressedminusImg));
 8001458:	9200      	str	r2, [sp, #0]
 800145a:	232c      	movs	r3, #44	; 0x2c
 800145c:	461a      	mov	r2, r3
 800145e:	2178      	movs	r1, #120	; 0x78
 8001460:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001464:	f001 fbe6 	bl	8002c34 <lcd_copy>
							if (volumeLevel>60) {
 8001468:	7833      	ldrb	r3, [r6, #0]
 800146a:	2b3c      	cmp	r3, #60	; 0x3c
 800146c:	f200 80e4 	bhi.w	8001638 <HAL_GPIO_EXTI_Callback+0x444>
							lcd_copy(266, 120, 44, 44, &minusImg, sizeof(minusImg));
 8001470:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8001474:	4a36      	ldr	r2, [pc, #216]	; (8001550 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	232c      	movs	r3, #44	; 0x2c
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	2178      	movs	r1, #120	; 0x78
 800147e:	461a      	mov	r2, r3
 8001480:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001484:	f001 fbd6 	bl	8002c34 <lcd_copy>
						else if ((s_tTouch.hwXpos > 120 && s_tTouch.hwXpos < 165) && (s_tTouch.hwYpos < 55 && s_tTouch.hwYpos>10)) {
 8001488:	e6cf      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
					else if ((s_tTouch.hwXpos > 0 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 320 && s_tTouch.hwYpos>220)) {
 800148a:	29ee      	cmp	r1, #238	; 0xee
 800148c:	f63f aecd 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001490:	3add      	subs	r2, #221	; 0xdd
 8001492:	2a62      	cmp	r2, #98	; 0x62
 8001494:	f63f aec9 	bhi.w	800122a <HAL_GPIO_EXTI_Callback+0x36>
						displayImgFlag=0;
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_GPIO_EXTI_Callback+0x340>)
						bmpcounter=1;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_GPIO_EXTI_Callback+0x33c>)
						displayImgFlag=0;
 800149c:	2600      	movs	r6, #0
 800149e:	7016      	strb	r6, [r2, #0]
						setRotation(3);
 80014a0:	2003      	movs	r0, #3
						bmpcounter=1;
 80014a2:	2201      	movs	r2, #1
						pageNumber=0;
 80014a4:	703e      	strb	r6, [r7, #0]
						bmpcounter=1;
 80014a6:	601a      	str	r2, [r3, #0]
						setRotation(3);
 80014a8:	f001 fcc4 	bl	8002e34 <setRotation>
						lcd_draw_image(0);
 80014ac:	4630      	mov	r0, r6
 80014ae:	f001 fbeb 	bl	8002c88 <lcd_draw_image>
 80014b2:	e6ba      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(5, 30, 24, 20, &pressedbackImg, sizeof(pressedbackImg));
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_GPIO_EXTI_Callback+0x360>)
 80014b6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80014ba:	e9cd 3200 	strd	r3, r2, [sp]
 80014be:	211e      	movs	r1, #30
 80014c0:	2314      	movs	r3, #20
 80014c2:	2218      	movs	r2, #24
 80014c4:	2005      	movs	r0, #5
 80014c6:	f001 fbb5 	bl	8002c34 <lcd_copy>
							HAL_I2S_DMAStop(&hi2s2);
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <HAL_GPIO_EXTI_Callback+0x330>)
 80014cc:	f002 ff04 	bl	80042d8 <HAL_I2S_DMAStop>
							playFlag=0;
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_GPIO_EXTI_Callback+0x364>)
							Play_Flag=0;
 80014d2:	4912      	ldr	r1, [pc, #72]	; (800151c <HAL_GPIO_EXTI_Callback+0x328>)
							End_Flag=1;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_GPIO_EXTI_Callback+0x32c>)
							pageNumber=0;
 80014d6:	f04f 0800 	mov.w	r8, #0
							HAL_Delay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
							pageNumber=0;
 80014dc:	f887 8000 	strb.w	r8, [r7]
							Play_Flag=0;
 80014e0:	f881 8000 	strb.w	r8, [r1]
							playFlag=0;
 80014e4:	f882 8000 	strb.w	r8, [r2]
							End_Flag=1;
 80014e8:	701e      	strb	r6, [r3, #0]
							HAL_Delay(100);
 80014ea:	f002 f825 	bl	8003538 <HAL_Delay>
							lcd_draw_image(0);
 80014ee:	4640      	mov	r0, r8
 80014f0:	f001 fbca 	bl	8002c88 <lcd_draw_image>
						if ((s_tTouch.hwXpos > 30 && s_tTouch.hwXpos < 55) && (s_tTouch.hwYpos < 315 && s_tTouch.hwYpos>295)) {
 80014f4:	e699      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
							bmpcounter=filesnumbers;
 80014f6:	4913      	ldr	r1, [pc, #76]	; (8001544 <HAL_GPIO_EXTI_Callback+0x350>)
							displayImgFlag=1;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_GPIO_EXTI_Callback+0x340>)
							bmpcounter=filesnumbers;
 80014fa:	6809      	ldr	r1, [r1, #0]
 80014fc:	6011      	str	r1, [r2, #0]
							displayImgFlag=1;
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e692      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
 8001504:	2000012c 	.word	0x2000012c
 8001508:	20000128 	.word	0x20000128
 800150c:	2000c460 	.word	0x2000c460
 8001510:	08011430 	.word	0x08011430
 8001514:	20000134 	.word	0x20000134
 8001518:	200046f6 	.word	0x200046f6
 800151c:	200046ec 	.word	0x200046ec
 8001520:	200046f4 	.word	0x200046f4
 8001524:	200003f4 	.word	0x200003f4
 8001528:	0800a358 	.word	0x0800a358
 800152c:	080157e0 	.word	0x080157e0
 8001530:	2000011c 	.word	0x2000011c
 8001534:	20000120 	.word	0x20000120
 8001538:	0801aee4 	.word	0x0801aee4
 800153c:	20000000 	.word	0x20000000
 8001540:	08010150 	.word	0x08010150
 8001544:	20000124 	.word	0x20000124
 8001548:	08017968 	.word	0x08017968
 800154c:	08012e78 	.word	0x08012e78
 8001550:	0800bda0 	.word	0x0800bda0
 8001554:	08011070 	.word	0x08011070
 8001558:	20000129 	.word	0x20000129
							lcd_copy(251, 181, 58, 58, &pressedrightArrowImg, sizeof(pressedrightArrowImg));
 800155c:	f641 2648 	movw	r6, #6728	; 0x1a48
 8001560:	233a      	movs	r3, #58	; 0x3a
 8001562:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_GPIO_EXTI_Callback+0x46c>)
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	9601      	str	r6, [sp, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	21b5      	movs	r1, #181	; 0xb5
 800156c:	20fb      	movs	r0, #251	; 0xfb
 800156e:	f001 fb61 	bl	8002c34 <lcd_copy>
							Play_Flag=0;
 8001572:	493c      	ldr	r1, [pc, #240]	; (8001664 <HAL_GPIO_EXTI_Callback+0x470>)
							End_Flag = 1;
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_GPIO_EXTI_Callback+0x474>)
							HAL_I2S_DMAStop(&hi2s2);
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <HAL_GPIO_EXTI_Callback+0x478>)
							End_Flag = 1;
 8001578:	2201      	movs	r2, #1
							Play_Flag=0;
 800157a:	2700      	movs	r7, #0
 800157c:	700f      	strb	r7, [r1, #0]
							End_Flag = 1;
 800157e:	701a      	strb	r2, [r3, #0]
							HAL_I2S_DMAStop(&hi2s2);
 8001580:	f002 feaa 	bl	80042d8 <HAL_I2S_DMAStop>
							HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f001 ffd7 	bl	8003538 <HAL_Delay>
							lcd_copy(251, 181, 58, 58, &rightArrowImg, sizeof(rightArrowImg));
 800158a:	4a39      	ldr	r2, [pc, #228]	; (8001670 <HAL_GPIO_EXTI_Callback+0x47c>)
 800158c:	9200      	str	r2, [sp, #0]
 800158e:	233a      	movs	r3, #58	; 0x3a
 8001590:	9601      	str	r6, [sp, #4]
 8001592:	461a      	mov	r2, r3
 8001594:	21b5      	movs	r1, #181	; 0xb5
 8001596:	20fb      	movs	r0, #251	; 0xfb
 8001598:	f001 fb4c 	bl	8002c34 <lcd_copy>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 69 && s_tTouch.hwYpos>11)) {
 800159c:	e645      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
				        	 bmpcounter++;
 800159e:	3301      	adds	r3, #1
				        	 displayImgFlag=1;
 80015a0:	2001      	movs	r0, #1
				        	 bmpcounter++;
 80015a2:	6013      	str	r3, [r2, #0]
				        	 displayImgFlag=1;
 80015a4:	7008      	strb	r0, [r1, #0]
 80015a6:	e640      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(171, 181, 58, 58, &pressedpauseImg, sizeof(pressedpauseImg));
 80015a8:	233a      	movs	r3, #58	; 0x3a
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_GPIO_EXTI_Callback+0x480>)
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	f641 2648 	movw	r6, #6728	; 0x1a48
 80015b2:	461a      	mov	r2, r3
 80015b4:	21b5      	movs	r1, #181	; 0xb5
 80015b6:	9601      	str	r6, [sp, #4]
 80015b8:	20ab      	movs	r0, #171	; 0xab
 80015ba:	f001 fb3b 	bl	8002c34 <lcd_copy>
							lcd_copy(91, 181, 58, 58, &playImg, sizeof(playImg));
 80015be:	233a      	movs	r3, #58	; 0x3a
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_GPIO_EXTI_Callback+0x484>)
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	9601      	str	r6, [sp, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	21b5      	movs	r1, #181	; 0xb5
 80015ca:	205b      	movs	r0, #91	; 0x5b
 80015cc:	f001 fb32 	bl	8002c34 <lcd_copy>
							if (playFlag==1) {
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_GPIO_EXTI_Callback+0x488>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d03e      	beq.n	8001656 <HAL_GPIO_EXTI_Callback+0x462>
							HAL_Delay(100);
 80015d8:	2064      	movs	r0, #100	; 0x64
 80015da:	f001 ffad 	bl	8003538 <HAL_Delay>
							lcd_copy(171, 181, 58, 58, &pauseImg, sizeof(pauseImg));
 80015de:	f641 2348 	movw	r3, #6728	; 0x1a48
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_EXTI_Callback+0x48c>)
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	233a      	movs	r3, #58	; 0x3a
 80015e8:	9200      	str	r2, [sp, #0]
 80015ea:	21b5      	movs	r1, #181	; 0xb5
 80015ec:	461a      	mov	r2, r3
 80015ee:	20ab      	movs	r0, #171	; 0xab
 80015f0:	f001 fb20 	bl	8002c34 <lcd_copy>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 149 && s_tTouch.hwYpos>91)) {
 80015f4:	e619      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
							lcd_copy(91, 181, 58, 58, &pressedplayImg, sizeof(pressedplayImg));
 80015f6:	f641 2348 	movw	r3, #6728	; 0x1a48
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_GPIO_EXTI_Callback+0x490>)
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	233a      	movs	r3, #58	; 0x3a
 8001602:	461a      	mov	r2, r3
 8001604:	21b5      	movs	r1, #181	; 0xb5
 8001606:	205b      	movs	r0, #91	; 0x5b
 8001608:	f001 fb14 	bl	8002c34 <lcd_copy>
							playFlag=1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_GPIO_EXTI_Callback+0x488>)
							HAL_I2S_DMAResume(&hi2s2);
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <HAL_GPIO_EXTI_Callback+0x478>)
							playFlag=1;
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
							HAL_I2S_DMAResume(&hi2s2);
 8001614:	f002 fe08 	bl	8004228 <HAL_I2S_DMAResume>
						else if ((s_tTouch.hwXpos > 180 && s_tTouch.hwXpos < 240) && (s_tTouch.hwYpos < 229 && s_tTouch.hwYpos>171)) {
 8001618:	e607      	b.n	800122a <HAL_GPIO_EXTI_Callback+0x36>
								volumeLevel+=4;
 800161a:	3304      	adds	r3, #4
 800161c:	b2db      	uxtb	r3, r3
								WM8960_Write_Reg(0x02, volumeLevel | 0x0100);  //LOUT1 Volume Set
 800161e:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8001622:	2002      	movs	r0, #2
								volumeLevel+=4;
 8001624:	7033      	strb	r3, [r6, #0]
								WM8960_Write_Reg(0x02, volumeLevel | 0x0100);  //LOUT1 Volume Set
 8001626:	f000 fd13 	bl	8002050 <WM8960_Write_Reg>
								WM8960_Write_Reg(0x03, volumeLevel | 0x0100);
 800162a:	7831      	ldrb	r1, [r6, #0]
 800162c:	2003      	movs	r0, #3
 800162e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001632:	f000 fd0d 	bl	8002050 <WM8960_Write_Reg>
 8001636:	e6bf      	b.n	80013b8 <HAL_GPIO_EXTI_Callback+0x1c4>
								volumeLevel-=4;
 8001638:	3b04      	subs	r3, #4
 800163a:	b2db      	uxtb	r3, r3
								WM8960_Write_Reg(0x02, volumeLevel | 0x0100);  //LOUT1 Volume Set
 800163c:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8001640:	2002      	movs	r0, #2
								volumeLevel-=4;
 8001642:	7033      	strb	r3, [r6, #0]
								WM8960_Write_Reg(0x02, volumeLevel | 0x0100);  //LOUT1 Volume Set
 8001644:	f000 fd04 	bl	8002050 <WM8960_Write_Reg>
								WM8960_Write_Reg(0x03, volumeLevel | 0x0100);
 8001648:	7831      	ldrb	r1, [r6, #0]
 800164a:	2003      	movs	r0, #3
 800164c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001650:	f000 fcfe 	bl	8002050 <WM8960_Write_Reg>
 8001654:	e70c      	b.n	8001470 <HAL_GPIO_EXTI_Callback+0x27c>
								HAL_I2S_DMAPause(&hi2s2);
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_GPIO_EXTI_Callback+0x478>)
 8001658:	f002 fd9c 	bl	8004194 <HAL_I2S_DMAPause>
 800165c:	e7bc      	b.n	80015d8 <HAL_GPIO_EXTI_Callback+0x3e4>
 800165e:	bf00      	nop
 8001660:	0801be04 	.word	0x0801be04
 8001664:	200046ec 	.word	0x200046ec
 8001668:	200046f4 	.word	0x200046f4
 800166c:	200003f4 	.word	0x200003f4
 8001670:	0801d84c 	.word	0x0801d84c
 8001674:	08013d98 	.word	0x08013d98
 8001678:	0800e708 	.word	0x0800e708
 800167c:	20000129 	.word	0x20000129
 8001680:	0800ccc0 	.word	0x0800ccc0
 8001684:	0801949c 	.word	0x0801949c

08001688 <Error_Handler>:
 8001688:	b672      	cpsid	i
  while (1)
 800168a:	e7fe      	b.n	800168a <Error_Handler+0x2>

0800168c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <MX_SPI1_Init+0x48>)
{
 800168e:	b538      	push	{r3, r4, r5, lr}
  hspi1.Instance = SPI1;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_SPI1_Init+0x4c>)
 8001692:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001698:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800169c:	f44f 65e0 	mov.w	r5, #1792	; 0x700
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016a0:	2418      	movs	r4, #24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80016a2:	2107      	movs	r1, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a4:	6042      	str	r2, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a6:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a8:	2208      	movs	r2, #8
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b4:	60c5      	str	r5, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016b6:	61c4      	str	r4, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80016b8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ba:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016bc:	6083      	str	r3, [r0, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016be:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016c0:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c2:	f003 ff2f 	bl	8005524 <HAL_SPI_Init>
 80016c6:	b900      	cbnz	r0, 80016ca <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
 80016ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80016ce:	f7ff bfdb 	b.w	8001688 <Error_Handler>
 80016d2:	bf00      	nop
 80016d4:	20000910 	.word	0x20000910
 80016d8:	40013000 	.word	0x40013000

080016dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016dc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80016de:	6801      	ldr	r1, [r0, #0]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_SPI_MspInit+0x64>)
{
 80016e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80016e6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80016ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80016f0:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80016f2:	d001      	beq.n	80016f8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016f4:	b008      	add	sp, #32
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016fc:	25e0      	movs	r5, #224	; 0xe0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	6991      	ldr	r1, [r2, #24]
 8001700:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001704:	6191      	str	r1, [r2, #24]
 8001706:	6991      	ldr	r1, [r2, #24]
 8001708:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800170c:	9101      	str	r1, [sp, #4]
 800170e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	6951      	ldr	r1, [r2, #20]
 8001712:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001716:	6151      	str	r1, [r2, #20]
 8001718:	6952      	ldr	r2, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001720:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001724:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f002 f888 	bl	800384c <HAL_GPIO_Init>
}
 800173c:	b008      	add	sp, #32
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	40013000 	.word	0x40013000

08001744 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_MspInit+0x2c>)
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	699a      	ldr	r2, [r3, #24]
{
 8001750:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	f002 0201 	and.w	r2, r2, #1
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176c:	b002      	add	sp, #8
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler>
 8001776:	bf00      	nop

08001778 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <HardFault_Handler>
 800177a:	bf00      	nop

0800177c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler>
 800177e:	bf00      	nop

08001780 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <BusFault_Handler>
 8001782:	bf00      	nop

08001784 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler>
 8001786:	bf00      	nop

08001788 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <DebugMon_Handler>:
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <PendSV_Handler>:
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f001 bebe 	b.w	8003514 <HAL_IncTick>

08001798 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001798:	2008      	movs	r0, #8
 800179a:	f002 b95f 	b.w	8003a5c <HAL_GPIO_EXTI_IRQHandler>
 800179e:	bf00      	nop

080017a0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017a0:	4801      	ldr	r0, [pc, #4]	; (80017a8 <DMA1_Channel5_IRQHandler+0x8>)
 80017a2:	f002 b809 	b.w	80037b8 <HAL_DMA_IRQHandler>
 80017a6:	bf00      	nop
 80017a8:	200003b0 	.word	0x200003b0

080017ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	1e16      	subs	r6, r2, #0
 80017b0:	dd07      	ble.n	80017c2 <_read+0x16>
 80017b2:	460c      	mov	r4, r1
 80017b4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80017b6:	f3af 8000 	nop.w
 80017ba:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	42a5      	cmp	r5, r4
 80017c0:	d1f9      	bne.n	80017b6 <_read+0xa>
	}

return len;
}
 80017c2:	4630      	mov	r0, r6
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
 80017c6:	bf00      	nop

080017c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	1e16      	subs	r6, r2, #0
 80017cc:	dd07      	ble.n	80017de <_write+0x16>
 80017ce:	460c      	mov	r4, r1
 80017d0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80017d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80017d6:	f7ff fb83 	bl	8000ee0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	42a5      	cmp	r5, r4
 80017dc:	d1f9      	bne.n	80017d2 <_write+0xa>
	}
	return len;
}
 80017de:	4630      	mov	r0, r6
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	bf00      	nop

080017e4 <_close>:

int _close(int file)
{
	return -1;
}
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f0:	604b      	str	r3, [r1, #4]
	return 0;
}
 80017f2:	2000      	movs	r0, #0
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80017f8:	2001      	movs	r0, #1
 80017fa:	4770      	bx	lr

080017fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80017fc:	2000      	movs	r0, #0
 80017fe:	4770      	bx	lr

08001800 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001804:	680b      	ldr	r3, [r1, #0]
{
 8001806:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4c0c      	ldr	r4, [pc, #48]	; (800183c <_sbrk+0x3c>)
 800180a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800180c:	b12b      	cbz	r3, 800181a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4418      	add	r0, r3
 8001810:	4290      	cmp	r0, r2
 8001812:	d807      	bhi.n	8001824 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001814:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <_sbrk+0x40>)
 800181c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4418      	add	r0, r3
 8001820:	4290      	cmp	r0, r2
 8001822:	d9f7      	bls.n	8001814 <_sbrk+0x14>
    errno = ENOMEM;
 8001824:	f007 fa4a 	bl	8008cbc <__errno>
 8001828:	230c      	movs	r3, #12
 800182a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd10      	pop	{r4, pc}
 8001834:	20000130 	.word	0x20000130
 8001838:	20010000 	.word	0x20010000
 800183c:	00000400 	.word	0x00000400
 8001840:	2000c8f8 	.word	0x2000c8f8

08001844 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_USART2_UART_Init+0x34>)
{
 8001846:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_USART2_UART_Init+0x38>)
 800184a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800184c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001850:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001852:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8001860:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001862:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001864:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001866:	f004 fbad 	bl	8005fc4 <HAL_UART_Init>
 800186a:	b900      	cbnz	r0, 800186e <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186c:	bd08      	pop	{r3, pc}
 800186e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001872:	f7ff bf09 	b.w	8001688 <Error_Handler>
 8001876:	bf00      	nop
 8001878:	20000974 	.word	0x20000974
 800187c:	40004400 	.word	0x40004400

08001880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001880:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8001882:	6801      	ldr	r1, [r0, #0]
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_UART_MspInit+0x64>)
{
 8001886:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 800188a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001890:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001894:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001898:	b008      	add	sp, #32
 800189a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018a0:	250c      	movs	r5, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a2:	69d1      	ldr	r1, [r2, #28]
 80018a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80018a8:	61d1      	str	r1, [r2, #28]
 80018aa:	69d1      	ldr	r1, [r2, #28]
 80018ac:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 80018b0:	9101      	str	r1, [sp, #4]
 80018b2:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	6951      	ldr	r1, [r2, #20]
 80018b6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80018ba:	6151      	str	r1, [r2, #20]
 80018bc:	6952      	ldr	r2, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018c4:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c6:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f001 ffb6 	bl	800384c <HAL_GPIO_Init>
}
 80018e0:	b008      	add	sp, #32
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	40004400 	.word	0x40004400

080018e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001912:	f000 fcef 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f007 f9d7 	bl	8008cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191a:	f7ff fb35 	bl	8000f88 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800192c:	0803c220 	.word	0x0803c220
  ldr r2, =_sbss
 8001930:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001934:	2000c8f4 	.word	0x2000c8f4

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>
	...

0800193c <ScanWavefiles>:
/**
  * @brief  Scan the WAV files that set the path.
  * @param  path: Path to scan.
  * @retval None
  */
FRESULT ScanWavefiles(char* path) {
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001940:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  FRESULT res;
  FILINFO fno;
  DIR dir;
  uint16_t i,j;

  res = f_opendir(&dir, path);    //Open the directory
 8001944:	4601      	mov	r1, r0
FRESULT ScanWavefiles(char* path) {
 8001946:	4606      	mov	r6, r0
  res = f_opendir(&dir, path);    //Open the directory
 8001948:	a806      	add	r0, sp, #24
 800194a:	f007 f8db 	bl	8008b04 <f_opendir>
  if(res != FR_OK)  {
 800194e:	4604      	mov	r4, r0
 8001950:	2800      	cmp	r0, #0
 8001952:	d161      	bne.n	8001a18 <ScanWavefiles+0xdc>
 8001954:	4605      	mov	r5, r0
    printf("f_opendir error !\r\n");
    return res;
  }

  for(i=0;;i++) {                 //Scan the files in the directory
    res = f_readdir(&dir, &fno);  //read a item
 8001956:	4669      	mov	r1, sp
 8001958:	a806      	add	r0, sp, #24
 800195a:	f007 f957 	bl	8008c0c <f_readdir>

    if(((fno.fname[j+1] == 'w')||(fno.fname[j+1] == 'W'))
        &&((fno.fname[j+2] == 'a')||(fno.fname[j+2] == 'A'))
        &&((fno.fname[j+3] == 'v')||(fno.fname[j+3] == 'V'))) //The file is WAV
    {
      strcpy(Play_List[i], path);     //Copy type of file is WAV
 800195e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001a50 <ScanWavefiles+0x114>
      strcat(Play_List[i],"/");       // Add '/' to the buffer
      strcat(Play_List[i],fno.fname); // Add file name to the buffer
      printf("%s\r\n", Play_List[i]); // print the whole file path to the UART
 8001962:	4f35      	ldr	r7, [pc, #212]	; (8001a38 <ScanWavefiles+0xfc>)
    if(res != FR_OK)  {
 8001964:	4604      	mov	r4, r0
 8001966:	b9e0      	cbnz	r0, 80019a2 <ScanWavefiles+0x66>
    if(fno.fname[0] == 0)         //scan to the end of the path
 8001968:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d043      	beq.n	80019f8 <ScanWavefiles+0xbc>
 8001970:	f10d 0209 	add.w	r2, sp, #9
 8001974:	e004      	b.n	8001980 <ScanWavefiles+0x44>
 8001976:	3001      	adds	r0, #1
    for(j=0;j<_MAX_LFN;j++) {
 8001978:	28ff      	cmp	r0, #255	; 0xff
 800197a:	d03a      	beq.n	80019f2 <ScanWavefiles+0xb6>
 800197c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
      if(fno.fname[j] == '.')     //Check if the type of the file is WAV
 8001980:	2b2e      	cmp	r3, #46	; 0x2e
 8001982:	d1f8      	bne.n	8001976 <ScanWavefiles+0x3a>
 8001984:	1c43      	adds	r3, r0, #1
    if(((fno.fname[j+1] == 'w')||(fno.fname[j+1] == 'W'))
 8001986:	446b      	add	r3, sp
 8001988:	7a5b      	ldrb	r3, [r3, #9]
 800198a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800198e:	2b57      	cmp	r3, #87	; 0x57
 8001990:	d00f      	beq.n	80019b2 <ScanWavefiles+0x76>
    res = f_readdir(&dir, &fno);  //read a item
 8001992:	4669      	mov	r1, sp
 8001994:	a806      	add	r0, sp, #24
 8001996:	f007 f939 	bl	8008c0c <f_readdir>
 800199a:	3501      	adds	r5, #1
    if(res != FR_OK)  {
 800199c:	4604      	mov	r4, r0
 800199e:	2800      	cmp	r0, #0
 80019a0:	d0e2      	beq.n	8001968 <ScanWavefiles+0x2c>
      printf("f_readdir error !\r\n");
 80019a2:	4826      	ldr	r0, [pc, #152]	; (8001a3c <ScanWavefiles+0x100>)
 80019a4:	f007 faf4 	bl	8008f90 <puts>
  Music_Num_MAX = i;

  printf("Scan WAV Files complete ! Music_Num = %d\r\n",Music_Num_MAX);

  return res;
}
 80019a8:	4620      	mov	r0, r4
 80019aa:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80019ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        &&((fno.fname[j+2] == 'a')||(fno.fname[j+2] == 'A'))
 80019b2:	eb0d 0300 	add.w	r3, sp, r0
 80019b6:	7ada      	ldrb	r2, [r3, #11]
 80019b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80019bc:	2a41      	cmp	r2, #65	; 0x41
 80019be:	d1e8      	bne.n	8001992 <ScanWavefiles+0x56>
        &&((fno.fname[j+3] == 'v')||(fno.fname[j+3] == 'V'))) //The file is WAV
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80019c6:	2b56      	cmp	r3, #86	; 0x56
 80019c8:	d1e3      	bne.n	8001992 <ScanWavefiles+0x56>
      strcpy(Play_List[i], path);     //Copy type of file is WAV
 80019ca:	2332      	movs	r3, #50	; 0x32
 80019cc:	b2ac      	uxth	r4, r5
 80019ce:	fb03 8404 	mla	r4, r3, r4, r8
 80019d2:	4631      	mov	r1, r6
 80019d4:	4620      	mov	r0, r4
 80019d6:	f007 fb13 	bl	8009000 <stpcpy>
      strcat(Play_List[i],"/");       // Add '/' to the buffer
 80019da:	232f      	movs	r3, #47	; 0x2f
 80019dc:	7003      	strb	r3, [r0, #0]
      strcat(Play_List[i],fno.fname); // Add file name to the buffer
 80019de:	f10d 0109 	add.w	r1, sp, #9
 80019e2:	3001      	adds	r0, #1
 80019e4:	f007 fb15 	bl	8009012 <strcpy>
      printf("%s\r\n", Play_List[i]); // print the whole file path to the UART
 80019e8:	4621      	mov	r1, r4
 80019ea:	4638      	mov	r0, r7
 80019ec:	f007 fa4a 	bl	8008e84 <iprintf>
 80019f0:	e7cf      	b.n	8001992 <ScanWavefiles+0x56>
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	e7c6      	b.n	8001986 <ScanWavefiles+0x4a>
  res = f_closedir(&dir);             //Close the directory
 80019f8:	a806      	add	r0, sp, #24
 80019fa:	f007 f8df 	bl	8008bbc <f_closedir>
  if(res != FR_OK)  {
 80019fe:	4604      	mov	r4, r0
 8001a00:	b990      	cbnz	r0, 8001a28 <ScanWavefiles+0xec>
  Music_Num_MAX = i;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <ScanWavefiles+0x104>)
  printf("Scan WAV Files complete ! Music_Num = %d\r\n",Music_Num_MAX);
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <ScanWavefiles+0x108>)
  Music_Num_MAX = i;
 8001a06:	701d      	strb	r5, [r3, #0]
  printf("Scan WAV Files complete ! Music_Num = %d\r\n",Music_Num_MAX);
 8001a08:	b2e9      	uxtb	r1, r5
 8001a0a:	f007 fa3b 	bl	8008e84 <iprintf>
}
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("f_opendir error !\r\n");
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <ScanWavefiles+0x10c>)
 8001a1a:	f007 fab9 	bl	8008f90 <puts>
}
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("f_closedir error !\r\n");
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <ScanWavefiles+0x110>)
 8001a2a:	f007 fab1 	bl	8008f90 <puts>
}
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a38:	080224bc 	.word	0x080224bc
 8001a3c:	080224a8 	.word	0x080224a8
 8001a40:	200046f6 	.word	0x200046f6
 8001a44:	080224d8 	.word	0x080224d8
 8001a48:	08022494 	.word	0x08022494
 8001a4c:	080224c4 	.word	0x080224c4
 8001a50:	20000138 	.word	0x20000138

08001a54 <Get_WAV_Message>:
  * @brief  Open the WAV file, get the message of the file.
  * @param  fname: name of the file you want to get its massage.
  * @param  wavx: the struct of data control.
  * @retval None
  */
uint8_t Get_WAV_Message(char* fname, wavctrl* wavx) {
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b083      	sub	sp, #12
 8001a58:	460c      	mov	r4, r1

  uint8_t res = 0;
  uint32_t br = 0;
 8001a5a:	2300      	movs	r3, #0
  ChunkRIFF *riff;
	ChunkFMT *fmt;
	ChunkFACT *fact;
	ChunkDATA *data;

  res = f_open(&WAV_File, (TCHAR *)fname, FA_READ);     //Open the file
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4849      	ldr	r0, [pc, #292]	; (8001b88 <Get_WAV_Message+0x134>)
  uint32_t br = 0;
 8001a62:	9301      	str	r3, [sp, #4]
  res = f_open(&WAV_File, (TCHAR *)fname, FA_READ);     //Open the file
 8001a64:	f006 fc30 	bl	80082c8 <f_open>
  if(res == FR_OK) {
 8001a68:	b9e0      	cbnz	r0, 8001aa4 <Get_WAV_Message+0x50>

    CloseFileFlag = 1;

    f_read(&WAV_File, TempBuf, WAV_BUFFER_SIZE/2, &br); //Read WAV_BUFFER_SIZE/2 bytes data
 8001a6a:	4e48      	ldr	r6, [pc, #288]	; (8001b8c <Get_WAV_Message+0x138>)
    CloseFileFlag = 1;
 8001a6c:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <Get_WAV_Message+0x13c>)
 8001a6e:	2701      	movs	r7, #1
    f_read(&WAV_File, TempBuf, WAV_BUFFER_SIZE/2, &br); //Read WAV_BUFFER_SIZE/2 bytes data
 8001a70:	ab01      	add	r3, sp, #4
    CloseFileFlag = 1;
 8001a72:	7017      	strb	r7, [r2, #0]
    f_read(&WAV_File, TempBuf, WAV_BUFFER_SIZE/2, &br); //Read WAV_BUFFER_SIZE/2 bytes data
 8001a74:	4605      	mov	r5, r0
 8001a76:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a7a:	4843      	ldr	r0, [pc, #268]	; (8001b88 <Get_WAV_Message+0x134>)
 8001a7c:	4631      	mov	r1, r6
 8001a7e:	f006 fd21 	bl	80084c4 <f_read>

    riff = (ChunkRIFF *)TempBuf;      //Get RIFF Chunk

    if(riff->Format == 0x45564157)  { //Format = "WAV"
 8001a82:	68b2      	ldr	r2, [r6, #8]
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <Get_WAV_Message+0x140>)
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d166      	bne.n	8001b58 <Get_WAV_Message+0x104>

      fmt = (ChunkFMT *)(TempBuf+12); //Get FMT Chunk
      if(fmt->AudioFormat==1||fmt->AudioFormat==3)        //Linear PCM or 32 bits WAVE
 8001a8a:	f8b6 c014 	ldrh.w	ip, [r6, #20]
 8001a8e:	fa1f f18c 	uxth.w	r1, ip
 8001a92:	f021 0302 	bic.w	r3, r1, #2
 8001a96:	42bb      	cmp	r3, r7
 8001a98:	d00e      	beq.n	8001ab8 <Get_WAV_Message+0x64>
          printf("data->ChunkID = 0x%x\r\n",data->ChunkID);
          res = 4;
        }
      }
      else  {
        printf("Not linear PCM, not support !!\r\n");
 8001a9a:	483f      	ldr	r0, [pc, #252]	; (8001b98 <Get_WAV_Message+0x144>)
 8001a9c:	f007 fa78 	bl	8008f90 <puts>
        res = 3;
 8001aa0:	2503      	movs	r5, #3
 8001aa2:	e003      	b.n	8001aac <Get_WAV_Message+0x58>
      printf("Not WAV file !!\r\n");
      res = 2;
    }
  }
  else  {
    printf("Get_WAV_Message.f_open error !!\r\n");
 8001aa4:	483d      	ldr	r0, [pc, #244]	; (8001b9c <Get_WAV_Message+0x148>)
 8001aa6:	f007 fa73 	bl	8008f90 <puts>
    res = 1;
 8001aaa:	2501      	movs	r5, #1
  }
  WAV_LastData = wavx->datasize;
 8001aac:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <Get_WAV_Message+0x14c>)
 8001aae:	68a2      	ldr	r2, [r4, #8]
 8001ab0:	601a      	str	r2, [r3, #0]

  return res;
}
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fact=(ChunkFACT *)(TempBuf+12+8+fmt->ChunkSize);  //Read FACT chunk
 8001ab8:	6930      	ldr	r0, [r6, #16]
        if((fact->ChunkID == 0x74636166)||(fact->ChunkID==0X5453494C))
 8001aba:	f8df e118 	ldr.w	lr, [pc, #280]	; 8001bd4 <Get_WAV_Message+0x180>
        fact=(ChunkFACT *)(TempBuf+12+8+fmt->ChunkSize);  //Read FACT chunk
 8001abe:	f100 0314 	add.w	r3, r0, #20
 8001ac2:	18f7      	adds	r7, r6, r3
        if((fact->ChunkID == 0x74636166)||(fact->ChunkID==0X5453494C))
 8001ac4:	58f2      	ldr	r2, [r6, r3]
 8001ac6:	4572      	cmp	r2, lr
 8001ac8:	d04b      	beq.n	8001b62 <Get_WAV_Message+0x10e>
 8001aca:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8001bd8 <Get_WAV_Message+0x184>
 8001ace:	4572      	cmp	r2, lr
 8001ad0:	d047      	beq.n	8001b62 <Get_WAV_Message+0x10e>
        if(data->ChunkID==0X61746164) {           //Read DATA Chunk success
 8001ad2:	4834      	ldr	r0, [pc, #208]	; (8001ba4 <Get_WAV_Message+0x150>)
 8001ad4:	6223      	str	r3, [r4, #32]
 8001ad6:	4282      	cmp	r2, r0
 8001ad8:	d14d      	bne.n	8001b76 <Get_WAV_Message+0x122>
          wavx->audioformat=fmt->AudioFormat;     //Audio Format
 8001ada:	f8a4 c000 	strh.w	ip, [r4]
          wavx->nchannels=fmt->NumOfChannels;     //channel number
 8001ade:	f896 c017 	ldrb.w	ip, [r6, #23]
 8001ae2:	7db2      	ldrb	r2, [r6, #22]
          wavx->datasize=data->ChunkSize;					//Size of audio data chunk
 8001ae4:	687f      	ldr	r7, [r7, #4]
          printf("WAV.audioformat:%d\r\n",wavx->audioformat);
 8001ae6:	4830      	ldr	r0, [pc, #192]	; (8001ba8 <Get_WAV_Message+0x154>)
          wavx->nchannels=fmt->NumOfChannels;     //channel number
 8001ae8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8001aec:	8062      	strh	r2, [r4, #2]
          wavx->samplerate=fmt->SampleRate;				//Sample Rate
 8001aee:	69b2      	ldr	r2, [r6, #24]
 8001af0:	61a2      	str	r2, [r4, #24]
          wavx->bitrate=fmt->ByteRate*8;					//Byte Rate
 8001af2:	69f2      	ldr	r2, [r6, #28]
 8001af4:	00d2      	lsls	r2, r2, #3
 8001af6:	6162      	str	r2, [r4, #20]
          wavx->blockalign=fmt->BlockAlign;				//Block Align
 8001af8:	f896 c021 	ldrb.w	ip, [r6, #33]	; 0x21
 8001afc:	f896 2020 	ldrb.w	r2, [r6, #32]
 8001b00:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8001b04:	80a2      	strh	r2, [r4, #4]
          wavx->bps=fmt->BitsPerSample;						//number of chunk, 8/16/24/32 bits
 8001b06:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
 8001b0a:	f896 6023 	ldrb.w	r6, [r6, #35]	; 0x23
          wavx->datasize=data->ChunkSize;					//Size of audio data chunk
 8001b0e:	60a7      	str	r7, [r4, #8]
          wavx->datastart=wavx->datastart+8;			//data stream start offest
 8001b10:	3308      	adds	r3, #8
          wavx->bps=fmt->BitsPerSample;						//number of chunk, 8/16/24/32 bits
 8001b12:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8001b16:	83a2      	strh	r2, [r4, #28]
          wavx->datastart=wavx->datastart+8;			//data stream start offest
 8001b18:	6223      	str	r3, [r4, #32]
          printf("WAV.audioformat:%d\r\n",wavx->audioformat);
 8001b1a:	f007 f9b3 	bl	8008e84 <iprintf>
          printf("WAV.nchannels:%d\r\n",wavx->nchannels);
 8001b1e:	8861      	ldrh	r1, [r4, #2]
 8001b20:	4822      	ldr	r0, [pc, #136]	; (8001bac <Get_WAV_Message+0x158>)
 8001b22:	f007 f9af 	bl	8008e84 <iprintf>
          printf("WAV.samplerate:%d\r\n",wavx->samplerate);
 8001b26:	69a1      	ldr	r1, [r4, #24]
 8001b28:	4821      	ldr	r0, [pc, #132]	; (8001bb0 <Get_WAV_Message+0x15c>)
 8001b2a:	f007 f9ab 	bl	8008e84 <iprintf>
          printf("WAV.bitrate:%d\r\n",wavx->bitrate);
 8001b2e:	6961      	ldr	r1, [r4, #20]
 8001b30:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <Get_WAV_Message+0x160>)
 8001b32:	f007 f9a7 	bl	8008e84 <iprintf>
          printf("WAV.blockalign:%d\r\n",wavx->blockalign);
 8001b36:	88a1      	ldrh	r1, [r4, #4]
 8001b38:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <Get_WAV_Message+0x164>)
 8001b3a:	f007 f9a3 	bl	8008e84 <iprintf>
          printf("WAV.bps:%d\r\n",wavx->bps);
 8001b3e:	8ba1      	ldrh	r1, [r4, #28]
 8001b40:	481e      	ldr	r0, [pc, #120]	; (8001bbc <Get_WAV_Message+0x168>)
 8001b42:	f007 f99f 	bl	8008e84 <iprintf>
          printf("WAV.datasize:%d\r\n",wavx->datasize);
 8001b46:	68a1      	ldr	r1, [r4, #8]
 8001b48:	481d      	ldr	r0, [pc, #116]	; (8001bc0 <Get_WAV_Message+0x16c>)
 8001b4a:	f007 f99b 	bl	8008e84 <iprintf>
          printf("WAV.datastart:%d\r\n",wavx->datastart);
 8001b4e:	6a21      	ldr	r1, [r4, #32]
 8001b50:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <Get_WAV_Message+0x170>)
 8001b52:	f007 f997 	bl	8008e84 <iprintf>
 8001b56:	e7a9      	b.n	8001aac <Get_WAV_Message+0x58>
      printf("Not WAV file !!\r\n");
 8001b58:	481b      	ldr	r0, [pc, #108]	; (8001bc8 <Get_WAV_Message+0x174>)
 8001b5a:	f007 fa19 	bl	8008f90 <puts>
      res = 2;
 8001b5e:	2502      	movs	r5, #2
 8001b60:	e7a4      	b.n	8001aac <Get_WAV_Message+0x58>
          wavx->datastart=12+8+fmt->ChunkSize+8+fact->ChunkSize;  //When there is fact/LIST Chunk.
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	301c      	adds	r0, #28
 8001b66:	4403      	add	r3, r0
        if(data->ChunkID==0X61746164) {           //Read DATA Chunk success
 8001b68:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <Get_WAV_Message+0x150>)
 8001b6a:	58f2      	ldr	r2, [r6, r3]
 8001b6c:	6223      	str	r3, [r4, #32]
 8001b6e:	4282      	cmp	r2, r0
 8001b70:	eb06 0703 	add.w	r7, r6, r3
 8001b74:	d0b1      	beq.n	8001ada <Get_WAV_Message+0x86>
          printf("Not find data chunk !!\r\n");
 8001b76:	4815      	ldr	r0, [pc, #84]	; (8001bcc <Get_WAV_Message+0x178>)
 8001b78:	f007 fa0a 	bl	8008f90 <puts>
          printf("data->ChunkID = 0x%x\r\n",data->ChunkID);
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <Get_WAV_Message+0x17c>)
 8001b80:	f007 f980 	bl	8008e84 <iprintf>
          res = 4;
 8001b84:	2504      	movs	r5, #4
 8001b86:	e791      	b.n	8001aac <Get_WAV_Message+0x58>
 8001b88:	20004498 	.word	0x20004498
 8001b8c:	200009fc 	.word	0x200009fc
 8001b90:	200009f8 	.word	0x200009f8
 8001b94:	45564157 	.word	0x45564157
 8001b98:	080225d4 	.word	0x080225d4
 8001b9c:	08022608 	.word	0x08022608
 8001ba0:	200046e8 	.word	0x200046e8
 8001ba4:	61746164 	.word	0x61746164
 8001ba8:	08022504 	.word	0x08022504
 8001bac:	0802251c 	.word	0x0802251c
 8001bb0:	08022530 	.word	0x08022530
 8001bb4:	08022544 	.word	0x08022544
 8001bb8:	08022558 	.word	0x08022558
 8001bbc:	0802256c 	.word	0x0802256c
 8001bc0:	0802257c 	.word	0x0802257c
 8001bc4:	08022590 	.word	0x08022590
 8001bc8:	080225f4 	.word	0x080225f4
 8001bcc:	080225a4 	.word	0x080225a4
 8001bd0:	080225bc 	.word	0x080225bc
 8001bd4:	74636166 	.word	0x74636166
 8001bd8:	5453494c 	.word	0x5453494c

08001bdc <Fill_WAV_Buffer>:
  * @brief  Open the WAV file, get the message of the file.
  * @param  BUFF: the pointer of the buffer to cached data.
  * @param  size: the byte mumber of data.
  * @retval None
  */
uint32_t Fill_WAV_Buffer(uint8_t *BUFF, uint16_t size) {
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *p;
  float *f;
  int sound;

  //It has been read last time, return.
  if(EndFileFlag==1)
 8001bde:	4eaf      	ldr	r6, [pc, #700]	; (8001e9c <Fill_WAV_Buffer+0x2c0>)
 8001be0:	7833      	ldrb	r3, [r6, #0]
 8001be2:	2b01      	cmp	r3, #1
uint32_t Fill_WAV_Buffer(uint8_t *BUFF, uint16_t size) {
 8001be4:	b083      	sub	sp, #12
  if(EndFileFlag==1)
 8001be6:	d064      	beq.n	8001cb2 <Fill_WAV_Buffer+0xd6>
		return 0;

  if(WaveCtrlData.nchannels==2) {
 8001be8:	4bad      	ldr	r3, [pc, #692]	; (8001ea0 <Fill_WAV_Buffer+0x2c4>)
 8001bea:	885a      	ldrh	r2, [r3, #2]
 8001bec:	2a02      	cmp	r2, #2
 8001bee:	4604      	mov	r4, r0
 8001bf0:	460d      	mov	r5, r1
 8001bf2:	d049      	beq.n	8001c88 <Fill_WAV_Buffer+0xac>
    }
	}
	//Signal channelŁ¬adjust to dual channel data for playback
	else
	{
		if(WaveCtrlData.bps==16)
 8001bf4:	8b9b      	ldrh	r3, [r3, #28]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d05e      	beq.n	8001cb8 <Fill_WAV_Buffer+0xdc>
				BUFF[i+3]=p[1];
				i+=4;
				p=p+2;
			}
		}
		else if(WaveCtrlData.bps==24)																	//24-bit audio
 8001bfa:	2b18      	cmp	r3, #24
 8001bfc:	f000 809d 	beq.w	8001d3a <Fill_WAV_Buffer+0x15e>
				BUFF[i+7]=p[0];
				p+=3;
				i+=8;
			}
		}
		else if(WaveCtrlData.bps==8)                                //8-bit audio
 8001c00:	2b08      	cmp	r3, #8
		{
			NeedReadSize=size/4;                                      //Number of bytes to read
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8001c02:	ab01      	add	r3, sp, #4
		else if(WaveCtrlData.bps==8)                                //8-bit audio
 8001c04:	d07a      	beq.n	8001cfc <Fill_WAV_Buffer+0x120>
			}
		}
		else                                                        //32-bit audio
		{
			NeedReadSize=size/2;                                      //Number of bytes to read
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);	//Read data
 8001c06:	084a      	lsrs	r2, r1, #1
 8001c08:	48a6      	ldr	r0, [pc, #664]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001c0a:	49a7      	ldr	r1, [pc, #668]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001c0c:	f006 fc5a 	bl	80084c4 <f_read>
			f=(float*)TempBuf;
			ReadSize=ReadSize*2;                                      //Size of data after fill
 8001c10:	9801      	ldr	r0, [sp, #4]
 8001c12:	0040      	lsls	r0, r0, #1
 8001c14:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001c16:	b308      	cbz	r0, 8001c5c <Fill_WAV_Buffer+0x80>
			f=(float*)TempBuf;
 8001c18:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8001ea8 <Fill_WAV_Buffer+0x2cc>
 8001c1c:	4623      	mov	r3, r4
			for(i=0;i<ReadSize;)
 8001c1e:	2100      	movs	r1, #0
			{
				sound=0x7FFFFFFF*(*f);
 8001c20:	ecfe 7a01 	vldmia	lr!, {s15}
 8001c24:	eeb0 7a67 	vmov.f32	s14, s15
 8001c28:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
				BUFF[i+4] = BUFF[i]   = (uint8_t)(sound>>16);
				BUFF[i+5] = BUFF[i+1] = (uint8_t)(sound>>24);
				BUFF[i+6] = BUFF[i+2] = (uint8_t)(sound);
				BUFF[i+7] = BUFF[i+3] = (uint8_t)(sound>>8);
				f++;
				i=i+8;
 8001c2c:	3108      	adds	r1, #8
				sound=0x7FFFFFFF*(*f);
 8001c2e:	ee17 2a10 	vmov	r2, s14
				BUFF[i+4] = BUFF[i]   = (uint8_t)(sound>>16);
 8001c32:	f3c2 4707 	ubfx	r7, r2, #16, #8
				BUFF[i+5] = BUFF[i+1] = (uint8_t)(sound>>24);
 8001c36:	ea4f 6c12 	mov.w	ip, r2, lsr #24
				BUFF[i+4] = BUFF[i]   = (uint8_t)(sound>>16);
 8001c3a:	701f      	strb	r7, [r3, #0]
 8001c3c:	711f      	strb	r7, [r3, #4]
			for(i=0;i<ReadSize;)
 8001c3e:	4288      	cmp	r0, r1
				BUFF[i+6] = BUFF[i+2] = (uint8_t)(sound);
 8001c40:	b2d7      	uxtb	r7, r2
				BUFF[i+7] = BUFF[i+3] = (uint8_t)(sound>>8);
 8001c42:	f3c2 2207 	ubfx	r2, r2, #8, #8
				BUFF[i+5] = BUFF[i+1] = (uint8_t)(sound>>24);
 8001c46:	f883 c001 	strb.w	ip, [r3, #1]
 8001c4a:	f883 c005 	strb.w	ip, [r3, #5]
				BUFF[i+6] = BUFF[i+2] = (uint8_t)(sound);
 8001c4e:	709f      	strb	r7, [r3, #2]
 8001c50:	719f      	strb	r7, [r3, #6]
				BUFF[i+7] = BUFF[i+3] = (uint8_t)(sound>>8);
 8001c52:	70da      	strb	r2, [r3, #3]
 8001c54:	71da      	strb	r2, [r3, #7]
			for(i=0;i<ReadSize;)
 8001c56:	f103 0308 	add.w	r3, r3, #8
 8001c5a:	d8e1      	bhi.n	8001c20 <Fill_WAV_Buffer+0x44>
      }
		}
	}
	if(ReadSize<size)   //Data is not enough, supplementary '0'
 8001c5c:	4285      	cmp	r5, r0
 8001c5e:	d90d      	bls.n	8001c7c <Fill_WAV_Buffer+0xa0>
	{
		EndFileFlag=1;
		for(i=ReadSize;i<size-ReadSize;i++)
 8001c60:	1a2d      	subs	r5, r5, r0
		EndFileFlag=1;
 8001c62:	2301      	movs	r3, #1
		for(i=ReadSize;i<size-ReadSize;i++)
 8001c64:	4285      	cmp	r5, r0
		EndFileFlag=1;
 8001c66:	7033      	strb	r3, [r6, #0]
		for(i=ReadSize;i<size-ReadSize;i++)
 8001c68:	d908      	bls.n	8001c7c <Fill_WAV_Buffer+0xa0>
 8001c6a:	1e63      	subs	r3, r4, #1
 8001c6c:	3801      	subs	r0, #1
 8001c6e:	441d      	add	r5, r3
 8001c70:	4420      	add	r0, r4
			BUFF[i] = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f800 3f01 	strb.w	r3, [r0, #1]!
		for(i=ReadSize;i<size-ReadSize;i++)
 8001c78:	4285      	cmp	r5, r0
 8001c7a:	d1fb      	bne.n	8001c74 <Fill_WAV_Buffer+0x98>
	}
  f_sync(&WAV_File);
 8001c7c:	4889      	ldr	r0, [pc, #548]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001c7e:	f006 fd1b 	bl	80086b8 <f_sync>
	return ReadSize;
 8001c82:	9801      	ldr	r0, [sp, #4]
}
 8001c84:	b003      	add	sp, #12
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(WaveCtrlData.bps == 16)          //16-bit audio,read data directly
 8001c88:	8b99      	ldrh	r1, [r3, #28]
 8001c8a:	2910      	cmp	r1, #16
 8001c8c:	f000 808d 	beq.w	8001daa <Fill_WAV_Buffer+0x1ce>
		else if(WaveCtrlData.bps==24)       //24-bit audio, adjust the order between the read data and the DMA cache
 8001c90:	2918      	cmp	r1, #24
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8001c92:	4886      	ldr	r0, [pc, #536]	; (8001eac <Fill_WAV_Buffer+0x2d0>)
		else if(WaveCtrlData.bps==24)       //24-bit audio, adjust the order between the read data and the DMA cache
 8001c94:	f000 8091 	beq.w	8001dba <Fill_WAV_Buffer+0x1de>
		else if(WaveCtrlData.bps == 8)      //8-bit audio, data need to be transformed to 16-bit mode before play
 8001c98:	2908      	cmp	r1, #8
 8001c9a:	f000 80e2 	beq.w	8001e62 <Fill_WAV_Buffer+0x286>
		else if(WaveCtrlData.bps == 32)     //32bit WAVE, floating-point numbers [(-1) ~ 1] to represent sound
 8001c9e:	2920      	cmp	r1, #32
 8001ca0:	f000 80b6 	beq.w	8001e10 <Fill_WAV_Buffer+0x234>
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8001ca4:	f007 f8ee 	bl	8008e84 <iprintf>
      printf("Error !!\r\n");
 8001ca8:	4881      	ldr	r0, [pc, #516]	; (8001eb0 <Fill_WAV_Buffer+0x2d4>)
 8001caa:	f007 f971 	bl	8008f90 <puts>
 8001cae:	9801      	ldr	r0, [sp, #4]
 8001cb0:	e7d4      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
		return 0;
 8001cb2:	2000      	movs	r0, #0
}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);	//Read data
 8001cb8:	084a      	lsrs	r2, r1, #1
 8001cba:	487a      	ldr	r0, [pc, #488]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001cbc:	497a      	ldr	r1, [pc, #488]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001cbe:	ab01      	add	r3, sp, #4
 8001cc0:	f006 fc00 	bl	80084c4 <f_read>
			ReadSize=ReadSize*2;                                      //Size of data after fill
 8001cc4:	9801      	ldr	r0, [sp, #4]
 8001cc6:	0040      	lsls	r0, r0, #1
 8001cc8:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d0c6      	beq.n	8001c5c <Fill_WAV_Buffer+0x80>
 8001cce:	4a79      	ldr	r2, [pc, #484]	; (8001eb4 <Fill_WAV_Buffer+0x2d8>)
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	2100      	movs	r1, #0
				BUFF[i]=p[0];
 8001cd4:	f812 7c02 	ldrb.w	r7, [r2, #-2]
 8001cd8:	701f      	strb	r7, [r3, #0]
				BUFF[i+1]=p[1];
 8001cda:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8001cde:	705f      	strb	r7, [r3, #1]
				BUFF[i+2]=p[0];
 8001ce0:	f812 7c02 	ldrb.w	r7, [r2, #-2]
 8001ce4:	709f      	strb	r7, [r3, #2]
				i+=4;
 8001ce6:	3104      	adds	r1, #4
				BUFF[i+3]=p[1];
 8001ce8:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8001cec:	70df      	strb	r7, [r3, #3]
			for(i=0;i<ReadSize;)
 8001cee:	4288      	cmp	r0, r1
 8001cf0:	f102 0202 	add.w	r2, r2, #2
 8001cf4:	f103 0304 	add.w	r3, r3, #4
 8001cf8:	d8ec      	bhi.n	8001cd4 <Fill_WAV_Buffer+0xf8>
 8001cfa:	e7af      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8001cfc:	088a      	lsrs	r2, r1, #2
 8001cfe:	4869      	ldr	r0, [pc, #420]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001d00:	4969      	ldr	r1, [pc, #420]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001d02:	f006 fbdf 	bl	80084c4 <f_read>
			ReadSize=ReadSize*4;                                      //Size of data after fill
 8001d06:	9801      	ldr	r0, [sp, #4]
 8001d08:	0080      	lsls	r0, r0, #2
 8001d0a:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d0a5      	beq.n	8001c5c <Fill_WAV_Buffer+0x80>
 8001d10:	2100      	movs	r1, #0
			p=TempBuf;
 8001d12:	4f65      	ldr	r7, [pc, #404]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
				BUFF[i]=0;
 8001d14:	468c      	mov	ip, r1
 8001d16:	4623      	mov	r3, r4
 8001d18:	f883 c000 	strb.w	ip, [r3]
				BUFF[i+1]=*p+0x80;
 8001d1c:	783a      	ldrb	r2, [r7, #0]
				BUFF[i+2]=0;
 8001d1e:	f883 c002 	strb.w	ip, [r3, #2]
				BUFF[i+1]=*p+0x80;
 8001d22:	3a80      	subs	r2, #128	; 0x80
 8001d24:	705a      	strb	r2, [r3, #1]
				BUFF[i+3]=*p+0x80;
 8001d26:	f817 2b01 	ldrb.w	r2, [r7], #1
				i+=4;
 8001d2a:	3104      	adds	r1, #4
				BUFF[i+3]=*p+0x80;
 8001d2c:	3a80      	subs	r2, #128	; 0x80
			for(i=0;i<ReadSize;)
 8001d2e:	4288      	cmp	r0, r1
				BUFF[i+3]=*p+0x80;
 8001d30:	70da      	strb	r2, [r3, #3]
			for(i=0;i<ReadSize;)
 8001d32:	f103 0304 	add.w	r3, r3, #4
 8001d36:	d8ef      	bhi.n	8001d18 <Fill_WAV_Buffer+0x13c>
 8001d38:	e790      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
			NeedReadSize=(size/8)*3;                                  //Number of bytes to read
 8001d3a:	08ca      	lsrs	r2, r1, #3
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);  //Read data
 8001d3c:	ab01      	add	r3, sp, #4
 8001d3e:	495a      	ldr	r1, [pc, #360]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001d40:	4858      	ldr	r0, [pc, #352]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001d42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d46:	f006 fbbd 	bl	80084c4 <f_read>
			ReadSize=(ReadSize/3)*8;                                  //Size of data after fill
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	485a      	ldr	r0, [pc, #360]	; (8001eb8 <Fill_WAV_Buffer+0x2dc>)
 8001d4e:	fba0 3003 	umull	r3, r0, r0, r3
 8001d52:	0840      	lsrs	r0, r0, #1
 8001d54:	00c0      	lsls	r0, r0, #3
 8001d56:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f43f af7f 	beq.w	8001c5c <Fill_WAV_Buffer+0x80>
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <Fill_WAV_Buffer+0x2e0>)
				BUFF[i+2]=0;
 8001d62:	460f      	mov	r7, r1
 8001d64:	4623      	mov	r3, r4
				BUFF[i]=p[1];
 8001d66:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8001d6a:	f883 c000 	strb.w	ip, [r3]
				BUFF[i+1]=p[2];
 8001d6e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8001d72:	f883 c001 	strb.w	ip, [r3, #1]
				BUFF[i+2]=0;
 8001d76:	709f      	strb	r7, [r3, #2]
				BUFF[i+3]=p[0];
 8001d78:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8001d7c:	f883 c003 	strb.w	ip, [r3, #3]
				BUFF[i+4]=p[1];
 8001d80:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8001d84:	f883 c004 	strb.w	ip, [r3, #4]
				BUFF[i+5]=p[2];
 8001d88:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8001d8c:	f883 c005 	strb.w	ip, [r3, #5]
				BUFF[i+6]=0;
 8001d90:	719f      	strb	r7, [r3, #6]
				i+=8;
 8001d92:	3108      	adds	r1, #8
				BUFF[i+7]=p[0];
 8001d94:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8001d98:	f883 c007 	strb.w	ip, [r3, #7]
			for(i=0;i<ReadSize;)
 8001d9c:	4288      	cmp	r0, r1
 8001d9e:	f102 0203 	add.w	r2, r2, #3
 8001da2:	f103 0308 	add.w	r3, r3, #8
 8001da6:	d8de      	bhi.n	8001d66 <Fill_WAV_Buffer+0x18a>
 8001da8:	e758      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
			f_read(&WAV_File,BUFF,size,(UINT*)&ReadSize);
 8001daa:	4601      	mov	r1, r0
 8001dac:	ab01      	add	r3, sp, #4
 8001dae:	483d      	ldr	r0, [pc, #244]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001db0:	462a      	mov	r2, r5
 8001db2:	f006 fb87 	bl	80084c4 <f_read>
 8001db6:	9801      	ldr	r0, [sp, #4]
 8001db8:	e750      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8001dba:	f007 f863 	bl	8008e84 <iprintf>
			NeedReadSize=(size/4)*3;                                  //Number of bytes to read
 8001dbe:	08aa      	lsrs	r2, r5, #2
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);	//Read data
 8001dc0:	ab01      	add	r3, sp, #4
 8001dc2:	4939      	ldr	r1, [pc, #228]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001dc4:	4837      	ldr	r0, [pc, #220]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001dc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dca:	f006 fb7b 	bl	80084c4 <f_read>
			ReadSize=(ReadSize/3)*4;                                  //Size of data after fill
 8001dce:	9b01      	ldr	r3, [sp, #4]
 8001dd0:	4839      	ldr	r0, [pc, #228]	; (8001eb8 <Fill_WAV_Buffer+0x2dc>)
 8001dd2:	fba0 3003 	umull	r3, r0, r0, r3
 8001dd6:	0840      	lsrs	r0, r0, #1
 8001dd8:	0080      	lsls	r0, r0, #2
 8001dda:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	f43f af3d 	beq.w	8001c5c <Fill_WAV_Buffer+0x80>
 8001de2:	2100      	movs	r1, #0
 8001de4:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <Fill_WAV_Buffer+0x2e0>)
				BUFF[i+2]=0;
 8001de6:	468c      	mov	ip, r1
 8001de8:	4623      	mov	r3, r4
				BUFF[i]=p[1];
 8001dea:	f812 7c02 	ldrb.w	r7, [r2, #-2]
 8001dee:	701f      	strb	r7, [r3, #0]
				BUFF[i+1]=p[2];
 8001df0:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8001df4:	705f      	strb	r7, [r3, #1]
				BUFF[i+2]=0;
 8001df6:	f883 c002 	strb.w	ip, [r3, #2]
				i+=4;
 8001dfa:	3104      	adds	r1, #4
				BUFF[i+3]=p[0];
 8001dfc:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 8001e00:	70df      	strb	r7, [r3, #3]
			for(i=0;i<ReadSize;)
 8001e02:	4288      	cmp	r0, r1
 8001e04:	f102 0203 	add.w	r2, r2, #3
 8001e08:	f103 0304 	add.w	r3, r3, #4
 8001e0c:	d8ed      	bhi.n	8001dea <Fill_WAV_Buffer+0x20e>
 8001e0e:	e725      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8001e10:	f007 f838 	bl	8008e84 <iprintf>
			f_read(&WAV_File,TempBuf,size,(UINT*)&ReadSize);					//Read data
 8001e14:	4924      	ldr	r1, [pc, #144]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001e16:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001e18:	ab01      	add	r3, sp, #4
 8001e1a:	462a      	mov	r2, r5
 8001e1c:	f006 fb52 	bl	80084c4 <f_read>
			for(i=0;i<ReadSize;)
 8001e20:	9801      	ldr	r0, [sp, #4]
 8001e22:	2800      	cmp	r0, #0
 8001e24:	f43f af1a 	beq.w	8001c5c <Fill_WAV_Buffer+0x80>
			f=(float*)TempBuf;
 8001e28:	4f1f      	ldr	r7, [pc, #124]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001e2a:	4622      	mov	r2, r4
			for(i=0;i<ReadSize;)
 8001e2c:	2100      	movs	r1, #0
				sound=0x7FFFFFFF*(*f);
 8001e2e:	ecf7 7a01 	vldmia	r7!, {s15}
 8001e32:	eeb0 7a67 	vmov.f32	s14, s15
 8001e36:	eebe 7ae0 	vcvt.s32.f32	s14, s14, #31
				i=i+4;
 8001e3a:	3104      	adds	r1, #4
				sound=0x7FFFFFFF*(*f);
 8001e3c:	ee17 3a10 	vmov	r3, s14
			for(i=0;i<ReadSize;)
 8001e40:	4281      	cmp	r1, r0
				BUFF[i]=(uint8_t)(sound>>16);
 8001e42:	ea4f 4e23 	mov.w	lr, r3, asr #16
				BUFF[i+1]=(uint8_t)(sound>>24);
 8001e46:	ea4f 6c23 	mov.w	ip, r3, asr #24
				BUFF[i+2]=(uint8_t)(sound);
 8001e4a:	7093      	strb	r3, [r2, #2]
				BUFF[i+3]=(uint8_t)(sound>>8);
 8001e4c:	ea4f 2323 	mov.w	r3, r3, asr #8
				BUFF[i]=(uint8_t)(sound>>16);
 8001e50:	f882 e000 	strb.w	lr, [r2]
				BUFF[i+1]=(uint8_t)(sound>>24);
 8001e54:	f882 c001 	strb.w	ip, [r2, #1]
				BUFF[i+3]=(uint8_t)(sound>>8);
 8001e58:	70d3      	strb	r3, [r2, #3]
			for(i=0;i<ReadSize;)
 8001e5a:	f102 0204 	add.w	r2, r2, #4
 8001e5e:	d3e6      	bcc.n	8001e2e <Fill_WAV_Buffer+0x252>
 8001e60:	e6fc      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
      printf("WaveCtrlData.bps = %d\r\n",WaveCtrlData.bps);
 8001e62:	f007 f80f 	bl	8008e84 <iprintf>
			f_read(&WAV_File,TempBuf,NeedReadSize,(UINT*)&ReadSize);	//Read data
 8001e66:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001e68:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <Fill_WAV_Buffer+0x2c8>)
 8001e6a:	ab01      	add	r3, sp, #4
 8001e6c:	086a      	lsrs	r2, r5, #1
 8001e6e:	f006 fb29 	bl	80084c4 <f_read>
			ReadSize=ReadSize*2;                                      //Size of data after fill
 8001e72:	9801      	ldr	r0, [sp, #4]
 8001e74:	0040      	lsls	r0, r0, #1
 8001e76:	9001      	str	r0, [sp, #4]
			for(i=0;i<ReadSize;)
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	f43f aeef 	beq.w	8001c5c <Fill_WAV_Buffer+0x80>
 8001e7e:	490a      	ldr	r1, [pc, #40]	; (8001ea8 <Fill_WAV_Buffer+0x2cc>)
 8001e80:	4623      	mov	r3, r4
 8001e82:	eb04 0c00 	add.w	ip, r4, r0
				BUFF[i]=0;
 8001e86:	2700      	movs	r7, #0
 8001e88:	701f      	strb	r7, [r3, #0]
				BUFF[i+1]=*p+0x80;
 8001e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e8e:	3a80      	subs	r2, #128	; 0x80
 8001e90:	705a      	strb	r2, [r3, #1]
			for(i=0;i<ReadSize;)
 8001e92:	3302      	adds	r3, #2
 8001e94:	459c      	cmp	ip, r3
 8001e96:	d1f7      	bne.n	8001e88 <Fill_WAV_Buffer+0x2ac>
 8001e98:	e6e0      	b.n	8001c5c <Fill_WAV_Buffer+0x80>
 8001e9a:	bf00      	nop
 8001e9c:	200009f9 	.word	0x200009f9
 8001ea0:	200046c4 	.word	0x200046c4
 8001ea4:	20004498 	.word	0x20004498
 8001ea8:	200009fc 	.word	0x200009fc
 8001eac:	0802262c 	.word	0x0802262c
 8001eb0:	08022644 	.word	0x08022644
 8001eb4:	200009fe 	.word	0x200009fe
 8001eb8:	aaaaaaab 	.word	0xaaaaaaab
 8001ebc:	200009ff 	.word	0x200009ff

08001ec0 <PlayWaveFile>:
uint8_t PlayWaveFile(void)  {
 8001ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001ec4:	4e51      	ldr	r6, [pc, #324]	; (800200c <PlayWaveFile+0x14c>)
  CloseFileFlag = 0;
 8001ec6:	4852      	ldr	r0, [pc, #328]	; (8002010 <PlayWaveFile+0x150>)
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001ec8:	f996 1000 	ldrsb.w	r1, [r6]
	EndFileFlag = 0;
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <PlayWaveFile+0x154>)
  Play_Flag = 0;
 8001ece:	4d52      	ldr	r5, [pc, #328]	; (8002018 <PlayWaveFile+0x158>)
  End_Flag = 0;
 8001ed0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800203c <PlayWaveFile+0x17c>
  I2S_Flag = I2S_No_CallBack;
 8001ed4:	4c51      	ldr	r4, [pc, #324]	; (800201c <PlayWaveFile+0x15c>)
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001ed6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002040 <PlayWaveFile+0x180>
  Get_WAV_Message(Play_List[Music_Num],&WaveCtrlData);    //Get the messages of the WAV file
 8001eda:	f8df b168 	ldr.w	fp, [pc, #360]	; 8002044 <PlayWaveFile+0x184>
  WAV_OFFSET = WaveCtrlData.datastart;
 8001ede:	f8df a168 	ldr.w	sl, [pc, #360]	; 8002048 <PlayWaveFile+0x188>
        WAV_LastData -= WAV_BUFFER_SIZE;
 8001ee2:	4f4f      	ldr	r7, [pc, #316]	; (8002020 <PlayWaveFile+0x160>)
  CloseFileFlag = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	7003      	strb	r3, [r0, #0]
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001ee8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	FillBufFlag = 0xFF;
 8001eec:	484d      	ldr	r0, [pc, #308]	; (8002024 <PlayWaveFile+0x164>)
	EndFileFlag = 0;
 8001eee:	7013      	strb	r3, [r2, #0]
  Play_Flag = 0;
 8001ef0:	702b      	strb	r3, [r5, #0]
  PausePlayFlag = 1;
 8001ef2:	4a4d      	ldr	r2, [pc, #308]	; (8002028 <PlayWaveFile+0x168>)
  End_Flag = 0;
 8001ef4:	f889 3000 	strb.w	r3, [r9]
  I2S_Flag = I2S_No_CallBack;
 8001ef8:	7023      	strb	r3, [r4, #0]
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001efa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	FillBufFlag = 0xFF;
 8001efe:	23ff      	movs	r3, #255	; 0xff
 8001f00:	7003      	strb	r3, [r0, #0]
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001f02:	eb08 0141 	add.w	r1, r8, r1, lsl #1
  PausePlayFlag = 1;
 8001f06:	2301      	movs	r3, #1
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001f08:	4848      	ldr	r0, [pc, #288]	; (800202c <PlayWaveFile+0x16c>)
  PausePlayFlag = 1;
 8001f0a:	7013      	strb	r3, [r2, #0]
  printf("Now Play: %s\r\n",Play_List[Music_Num]);
 8001f0c:	f006 ffba 	bl	8008e84 <iprintf>
  Get_WAV_Message(Play_List[Music_Num],&WaveCtrlData);    //Get the messages of the WAV file
 8001f10:	f996 0000 	ldrsb.w	r0, [r6]
        f_lseek(&WAV_File, WAV_OFFSET);
 8001f14:	4e46      	ldr	r6, [pc, #280]	; (8002030 <PlayWaveFile+0x170>)
  Get_WAV_Message(Play_List[Music_Num],&WaveCtrlData);    //Get the messages of the WAV file
 8001f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f1e:	4659      	mov	r1, fp
 8001f20:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8001f24:	f7ff fd96 	bl	8001a54 <Get_WAV_Message>
  WAV_OFFSET = WaveCtrlData.datastart;
 8001f28:	f8db 1020 	ldr.w	r1, [fp, #32]
 8001f2c:	f8ca 1000 	str.w	r1, [sl]
  f_lseek(&WAV_File, WAV_OFFSET);
 8001f30:	4630      	mov	r0, r6
 8001f32:	f006 fc57 	bl	80087e4 <f_lseek>
  Fill_WAV_Buffer(WAV_Buffer, WAV_BUFFER_SIZE);
 8001f36:	483f      	ldr	r0, [pc, #252]	; (8002034 <PlayWaveFile+0x174>)
 8001f38:	f247 5130 	movw	r1, #30000	; 0x7530
 8001f3c:	f7ff fe4e 	bl	8001bdc <Fill_WAV_Buffer>
  WAV_OFFSET += WAV_BUFFER_SIZE;
 8001f40:	f8da 3000 	ldr.w	r3, [sl]
 8001f44:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8001f48:	3330      	adds	r3, #48	; 0x30
 8001f4a:	f8ca 3000 	str.w	r3, [sl]
  while(End_Flag == 0)  {
 8001f4e:	f899 3000 	ldrb.w	r3, [r9]
 8001f52:	bb73      	cbnz	r3, 8001fb2 <PlayWaveFile+0xf2>
    while(Play_Flag == 1) {
 8001f54:	782b      	ldrb	r3, [r5, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d14f      	bne.n	8001ffa <PlayWaveFile+0x13a>
        Fill_WAV_Buffer((WAV_Buffer+WAV_BUFFER_SIZE/2),WAV_BUFFER_SIZE/2);
 8001f5a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800204c <PlayWaveFile+0x18c>
 8001f5e:	e004      	b.n	8001f6a <PlayWaveFile+0xaa>
      else if(I2S_Flag == I2S_Callback) {
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d02b      	beq.n	8001fbc <PlayWaveFile+0xfc>
    while(Play_Flag == 1) {
 8001f64:	782b      	ldrb	r3, [r5, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d11e      	bne.n	8001fa8 <PlayWaveFile+0xe8>
      if(I2S_Flag == I2S_Half_Callback) {
 8001f6a:	7823      	ldrb	r3, [r4, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d1f7      	bne.n	8001f60 <PlayWaveFile+0xa0>
        f_lseek(&WAV_File, WAV_OFFSET);
 8001f70:	f8da 1000 	ldr.w	r1, [sl]
 8001f74:	4630      	mov	r0, r6
 8001f76:	f006 fc35 	bl	80087e4 <f_lseek>
        HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001f7a:	2009      	movs	r0, #9
 8001f7c:	f001 fb48 	bl	8003610 <HAL_NVIC_DisableIRQ>
        Fill_WAV_Buffer(WAV_Buffer,WAV_BUFFER_SIZE/2);
 8001f80:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001f84:	482b      	ldr	r0, [pc, #172]	; (8002034 <PlayWaveFile+0x174>)
 8001f86:	f7ff fe29 	bl	8001bdc <Fill_WAV_Buffer>
        HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f8a:	2009      	movs	r0, #9
 8001f8c:	f001 fb32 	bl	80035f4 <HAL_NVIC_EnableIRQ>
        WAV_OFFSET += WAV_BUFFER_SIZE/2;
 8001f90:	f8da 3000 	ldr.w	r3, [sl]
 8001f94:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001f98:	3318      	adds	r3, #24
 8001f9a:	f8ca 3000 	str.w	r3, [sl]
    while(Play_Flag == 1) {
 8001f9e:	782b      	ldrb	r3, [r5, #0]
        I2S_Flag = I2S_No_CallBack;
 8001fa0:	2200      	movs	r2, #0
    while(Play_Flag == 1) {
 8001fa2:	2b01      	cmp	r3, #1
        I2S_Flag = I2S_No_CallBack;
 8001fa4:	7022      	strb	r2, [r4, #0]
    while(Play_Flag == 1) {
 8001fa6:	d0e0      	beq.n	8001f6a <PlayWaveFile+0xaa>
 8001fa8:	f899 3000 	ldrb.w	r3, [r9]
    Play_Flag = 1;
 8001fac:	2201      	movs	r2, #1
 8001fae:	702a      	strb	r2, [r5, #0]
    if (End_Flag==0) {
 8001fb0:	b32b      	cbz	r3, 8001ffe <PlayWaveFile+0x13e>
}
 8001fb2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  res = f_close(&WAV_File);
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <PlayWaveFile+0x170>)
 8001fb8:	f006 bbe4 	b.w	8008784 <f_close>
        f_lseek(&WAV_File, WAV_OFFSET);
 8001fbc:	f8da 1000 	ldr.w	r1, [sl]
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f006 fc0f 	bl	80087e4 <f_lseek>
        HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001fc6:	2009      	movs	r0, #9
 8001fc8:	f001 fb22 	bl	8003610 <HAL_NVIC_DisableIRQ>
        Fill_WAV_Buffer((WAV_Buffer+WAV_BUFFER_SIZE/2),WAV_BUFFER_SIZE/2);
 8001fcc:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001fd0:	4640      	mov	r0, r8
 8001fd2:	f7ff fe03 	bl	8001bdc <Fill_WAV_Buffer>
        HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fd6:	2009      	movs	r0, #9
 8001fd8:	f001 fb0c 	bl	80035f4 <HAL_NVIC_EnableIRQ>
        WAV_OFFSET += WAV_BUFFER_SIZE/2;
 8001fdc:	f8da 2000 	ldr.w	r2, [sl]
        WAV_LastData -= WAV_BUFFER_SIZE;
 8001fe0:	683b      	ldr	r3, [r7, #0]
        WAV_OFFSET += WAV_BUFFER_SIZE/2;
 8001fe2:	f502 526a 	add.w	r2, r2, #14976	; 0x3a80
        WAV_LastData -= WAV_BUFFER_SIZE;
 8001fe6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
        WAV_OFFSET += WAV_BUFFER_SIZE/2;
 8001fea:	3218      	adds	r2, #24
        WAV_LastData -= WAV_BUFFER_SIZE;
 8001fec:	3b30      	subs	r3, #48	; 0x30
        I2S_Flag = I2S_No_CallBack;
 8001fee:	2100      	movs	r1, #0
        WAV_OFFSET += WAV_BUFFER_SIZE/2;
 8001ff0:	f8ca 2000 	str.w	r2, [sl]
        WAV_LastData -= WAV_BUFFER_SIZE;
 8001ff4:	603b      	str	r3, [r7, #0]
        I2S_Flag = I2S_No_CallBack;
 8001ff6:	7021      	strb	r1, [r4, #0]
 8001ff8:	e7b4      	b.n	8001f64 <PlayWaveFile+0xa4>
    Play_Flag = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	702b      	strb	r3, [r5, #0]
    	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)WAV_Buffer, WAV_BUFFER_SIZE/2);
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <PlayWaveFile+0x174>)
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <PlayWaveFile+0x178>)
 8002002:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002006:	f002 f863 	bl	80040d0 <HAL_I2S_Transmit_DMA>
 800200a:	e7a0      	b.n	8001f4e <PlayWaveFile+0x8e>
 800200c:	20000134 	.word	0x20000134
 8002010:	200009f8 	.word	0x200009f8
 8002014:	200009f9 	.word	0x200009f9
 8002018:	200046ec 	.word	0x200046ec
 800201c:	2000bc28 	.word	0x2000bc28
 8002020:	200046e8 	.word	0x200046e8
 8002024:	2000bc29 	.word	0x2000bc29
 8002028:	2000bc2a 	.word	0x2000bc2a
 800202c:	08022650 	.word	0x08022650
 8002030:	20004498 	.word	0x20004498
 8002034:	200046f8 	.word	0x200046f8
 8002038:	200003f4 	.word	0x200003f4
 800203c:	200046f4 	.word	0x200046f4
 8002040:	20000138 	.word	0x20000138
 8002044:	200046c4 	.word	0x200046c4
 8002048:	200046f0 	.word	0x200046f0
 800204c:	20008190 	.word	0x20008190

08002050 <WM8960_Write_Reg>:
  * @brief  Write register of WM8960.
  * @param  reg: The number of resigter which to be read.
  * @param  dat: The data which will be writeen to the register.
  * @retval The value of regsiter.
  */
uint8_t WM8960_Write_Reg(uint8_t reg, uint16_t dat)  {
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	b084      	sub	sp, #16
  
  uint8_t res,I2C_Data[2];
  
  I2C_Data[0] = (reg<<1)|((uint8_t)((dat>>8)&0x0001));  //RegAddr
 8002054:	f3c1 2600 	ubfx	r6, r1, #8, #1
  I2C_Data[1] = (uint8_t)(dat&0x00FF);                  //RegValue
  
  res = HAL_I2C_Master_Transmit(&hi2c1,(WM8960_ADDRESS<<1),I2C_Data,2,10);
 8002058:	230a      	movs	r3, #10
uint8_t WM8960_Write_Reg(uint8_t reg, uint16_t dat)  {
 800205a:	460c      	mov	r4, r1
  I2C_Data[0] = (reg<<1)|((uint8_t)((dat>>8)&0x0001));  //RegAddr
 800205c:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
uint8_t WM8960_Write_Reg(uint8_t reg, uint16_t dat)  {
 8002060:	4605      	mov	r5, r0
  res = HAL_I2C_Master_Transmit(&hi2c1,(WM8960_ADDRESS<<1),I2C_Data,2,10);
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <WM8960_Write_Reg+0x34>)
  I2C_Data[1] = (uint8_t)(dat&0x00FF);                  //RegValue
 8002066:	f88d 400d 	strb.w	r4, [sp, #13]
  res = HAL_I2C_Master_Transmit(&hi2c1,(WM8960_ADDRESS<<1),I2C_Data,2,10);
 800206a:	2302      	movs	r3, #2
 800206c:	aa03      	add	r2, sp, #12
 800206e:	2134      	movs	r1, #52	; 0x34
  I2C_Data[0] = (reg<<1)|((uint8_t)((dat>>8)&0x0001));  //RegAddr
 8002070:	f88d 600c 	strb.w	r6, [sp, #12]
  res = HAL_I2C_Master_Transmit(&hi2c1,(WM8960_ADDRESS<<1),I2C_Data,2,10);
 8002074:	f001 fe18 	bl	8003ca8 <HAL_I2C_Master_Transmit>
  if(res == HAL_OK)
 8002078:	b910      	cbnz	r0, 8002080 <WM8960_Write_Reg+0x30>
    WM8960_REG_VAL[reg] = dat;
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <WM8960_Write_Reg+0x38>)
 800207c:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
  
  return res;
}
 8002080:	b004      	add	sp, #16
 8002082:	bd70      	pop	{r4, r5, r6, pc}
 8002084:	20000364 	.word	0x20000364
 8002088:	20000004 	.word	0x20000004

0800208c <WM89060_Init>:
/**
  * @brief  Initialize WM8960 device.
  * @param  None
  * @retval None
  */
uint8_t WM89060_Init(void)  {
 800208c:	b538      	push	{r3, r4, r5, lr}

  uint8_t res;
  
  //Reset Device
  res = WM8960_Write_Reg(0x0f, 0x0000);
 800208e:	2100      	movs	r1, #0
 8002090:	200f      	movs	r0, #15
 8002092:	f7ff ffdd 	bl	8002050 <WM8960_Write_Reg>
  if(res != 0)
 8002096:	4604      	mov	r4, r0
 8002098:	b108      	cbz	r0, 800209e <WM89060_Init+0x12>
  WM8960_Write_Reg(0x18, 1<<6 | 0<<5);
  WM8960_Write_Reg(0x17, 0x01C3);
  WM8960_Write_Reg(0x30, 0x0009);//0x000D,0x0005
  
  return 0;
}
 800209a:	4620      	mov	r0, r4
 800209c:	bd38      	pop	{r3, r4, r5, pc}
    printf("WM8960 reset completed !!\r\n");
 800209e:	482f      	ldr	r0, [pc, #188]	; (800215c <WM89060_Init+0xd0>)
 80020a0:	f006 ff76 	bl	8008f90 <puts>
  res =  WM8960_Write_Reg(0x19, 1<<8 | 1<<7 | 1<<6);
 80020a4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80020a8:	2019      	movs	r0, #25
 80020aa:	f7ff ffd1 	bl	8002050 <WM8960_Write_Reg>
  res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
 80020ae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  res =  WM8960_Write_Reg(0x19, 1<<8 | 1<<7 | 1<<6);
 80020b2:	4605      	mov	r5, r0
  res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
 80020b4:	201a      	movs	r0, #26
 80020b6:	f7ff ffcb 	bl	8002050 <WM8960_Write_Reg>
  res += WM8960_Write_Reg(0x2F, 1<<3 | 1<<2);
 80020ba:	210c      	movs	r1, #12
  res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
 80020bc:	4405      	add	r5, r0
  res += WM8960_Write_Reg(0x2F, 1<<3 | 1<<2);
 80020be:	202f      	movs	r0, #47	; 0x2f
 80020c0:	f7ff ffc6 	bl	8002050 <WM8960_Write_Reg>
  res += WM8960_Write_Reg(0x1A, 1<<8 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
 80020c4:	b2ed      	uxtb	r5, r5
  res += WM8960_Write_Reg(0x2F, 1<<3 | 1<<2);
 80020c6:	4428      	add	r0, r5
  if(res != 0)  {
 80020c8:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 80020cc:	d13d      	bne.n	800214a <WM89060_Init+0xbe>
  WM8960_Write_Reg(0x04, 0x810);
 80020ce:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80020d2:	2004      	movs	r0, #4
 80020d4:	f7ff ffbc 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x05, 0x0000);
 80020d8:	4621      	mov	r1, r4
 80020da:	2005      	movs	r0, #5
 80020dc:	f7ff ffb8 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x07, 0x0002);
 80020e0:	2102      	movs	r1, #2
 80020e2:	2007      	movs	r0, #7
 80020e4:	f7ff ffb4 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x02, 0x006F | 0x0100);  //LOUT1 Volume Set
 80020e8:	f240 116f 	movw	r1, #367	; 0x16f
 80020ec:	2002      	movs	r0, #2
 80020ee:	f7ff ffaf 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x03, 0x006F | 0x0100);  //ROUT1 Volume Set
 80020f2:	f240 116f 	movw	r1, #367	; 0x16f
 80020f6:	2003      	movs	r0, #3
 80020f8:	f7ff ffaa 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x0a, 0x00FF | 0x0100);
 80020fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002100:	200a      	movs	r0, #10
 8002102:	f7ff ffa5 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x0b, 0x00FF | 0x0100);
 8002106:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210a:	200b      	movs	r0, #11
 800210c:	f7ff ffa0 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x10, 0x001F);
 8002110:	211f      	movs	r1, #31
 8002112:	2010      	movs	r0, #16
 8002114:	f7ff ff9c 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x22, 1<<8 | 1<<7);
 8002118:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800211c:	2022      	movs	r0, #34	; 0x22
 800211e:	f7ff ff97 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x25, 1<<8 | 1<<7);
 8002122:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002126:	2025      	movs	r0, #37	; 0x25
 8002128:	f7ff ff92 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x18, 1<<6 | 0<<5);
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	2018      	movs	r0, #24
 8002130:	f7ff ff8e 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x17, 0x01C3);
 8002134:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002138:	2017      	movs	r0, #23
 800213a:	f7ff ff89 	bl	8002050 <WM8960_Write_Reg>
  WM8960_Write_Reg(0x30, 0x0009);//0x000D,0x0005
 800213e:	2109      	movs	r1, #9
 8002140:	2030      	movs	r0, #48	; 0x30
 8002142:	f7ff ff85 	bl	8002050 <WM8960_Write_Reg>
}
 8002146:	4620      	mov	r0, r4
 8002148:	bd38      	pop	{r3, r4, r5, pc}
    printf("Source set fail !!\r\n");
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <WM89060_Init+0xd4>)
 800214c:	f006 ff20 	bl	8008f90 <puts>
    printf("Error code: %d\r\n",res);
 8002150:	4621      	mov	r1, r4
 8002152:	4804      	ldr	r0, [pc, #16]	; (8002164 <WM89060_Init+0xd8>)
 8002154:	f006 fe96 	bl	8008e84 <iprintf>
}
 8002158:	4620      	mov	r0, r4
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	08022660 	.word	0x08022660
 8002160:	0802267c 	.word	0x0802267c
 8002164:	0800a2ac 	.word	0x0800a2ac

08002168 <Storage_OpenReadFile>:
* @param  FileLen: the File length
* @retval err: Error status (0=> success, 1=> fail)
*/
#define PIXEL(__M)  ((((__M) + 31 ) >> 5) << 2)
uint32_t Storage_OpenReadFile(uint8_t Xpoz, uint16_t Ypoz, const char* BmpName)
{
 8002168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t bmpaddress, bit_pixel = 0;
    FIL file1; 
    uint16_t color = 0;

    f_open(&file1, BmpName, FA_READ);
    f_read(&file1, aBuffer, 30, &BytesRead);
 800216c:	4e33      	ldr	r6, [pc, #204]	; (800223c <Storage_OpenReadFile+0xd4>)
{
 800216e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8002172:	4614      	mov	r4, r2
 8002174:	4681      	mov	r9, r0
 8002176:	460d      	mov	r5, r1
    f_open(&file1, BmpName, FA_READ);
 8002178:	a801      	add	r0, sp, #4
 800217a:	4611      	mov	r1, r2
 800217c:	2201      	movs	r2, #1
 800217e:	f006 f8a3 	bl	80082c8 <f_open>
    f_read(&file1, aBuffer, 30, &BytesRead);
 8002182:	4631      	mov	r1, r6
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <Storage_OpenReadFile+0xd8>)
 8002186:	221e      	movs	r2, #30
 8002188:	a801      	add	r0, sp, #4
 800218a:	f006 f99b 	bl	80084c4 <f_read>

    bmpaddress = (uint32_t)aBuffer;
 800218e:	4637      	mov	r7, r6
    /* Read bitmap height */
    height = *(uint16_t *) (bmpaddress + 22);
    height |= (*(uint16_t *) (bmpaddress + 24)) << 16;

    /* Read bit/pixel */
    bit_pixel = *(uint16_t *) (bmpaddress + 28);  
 8002190:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
    index |= (*(uint16_t *) (bmpaddress + 12)) << 16;
 8002194:	f8b7 800c 	ldrh.w	r8, [r7, #12]
    index = *(uint16_t *) (bmpaddress + 10);
 8002198:	8976      	ldrh	r6, [r6, #10]
    f_close (&file1);
 800219a:	a801      	add	r0, sp, #4
 800219c:	f006 faf2 	bl	8008784 <f_close>

    if (24 != bit_pixel) {
 80021a0:	f1ba 0f18 	cmp.w	sl, #24
 80021a4:	d004      	beq.n	80021b0 <Storage_OpenReadFile+0x48>
        return 0;
 80021a6:	2000      	movs	r0, #0
            }
        }

    f_close(&file1);
    return 1;
}
 80021a8:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 80021ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f_open (&file1, (TCHAR const*)BmpName, FA_READ);  
 80021b0:	4621      	mov	r1, r4
 80021b2:	2201      	movs	r2, #1
 80021b4:	a801      	add	r0, sp, #4
 80021b6:	f006 f887 	bl	80082c8 <f_open>
    f_read(&file1, aBuffer, index, &BytesRead);
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <Storage_OpenReadFile+0xd8>)
 80021bc:	ea46 4208 	orr.w	r2, r6, r8, lsl #16
 80021c0:	4639      	mov	r1, r7
 80021c2:	a801      	add	r0, sp, #4
            f_read(&file1, aBuffer, PIXEL(240 * bit_pixel) >> 1, (UINT *)&BytesRead);
 80021c4:	461e      	mov	r6, r3
    f_read(&file1, aBuffer, index, &BytesRead);
 80021c6:	f006 f97d 	bl	80084c4 <f_read>
        for (i = 0; i < 360; i ++) {
 80021ca:	f505 78b4 	add.w	r8, r5, #360	; 0x168
 80021ce:	fa1f f989 	uxth.w	r9, r9
 80021d2:	fa1f f888 	uxth.w	r8, r8
 80021d6:	f507 7434 	add.w	r4, r7, #720	; 0x2d0
            f_read(&file1, aBuffer, PIXEL(240 * bit_pixel) >> 1, (UINT *)&BytesRead);
 80021da:	46ba      	mov	sl, r7
 80021dc:	4633      	mov	r3, r6
 80021de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80021e2:	4651      	mov	r1, sl
 80021e4:	a801      	add	r0, sp, #4
 80021e6:	f006 f96d 	bl	80084c4 <f_read>
            f_read(&file1, aBuffer + (PIXEL(240 * bit_pixel) >> 1), PIXEL(240 * bit_pixel) >> 1, (UINT *)&BytesRead);
 80021ea:	4916      	ldr	r1, [pc, #88]	; (8002244 <Storage_OpenReadFile+0xdc>)
 80021ec:	4633      	mov	r3, r6
 80021ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80021f2:	a801      	add	r0, sp, #4
 80021f4:	f006 f966 	bl	80084c4 <f_read>
            lcd_set_cursor(Xpoz + 0, Ypoz + i);
 80021f8:	4629      	mov	r1, r5
 80021fa:	4648      	mov	r0, r9
 80021fc:	f000 f964 	bl	80024c8 <lcd_set_cursor>
 8002200:	46bb      	mov	fp, r7
                color = (uint16_t)(((aBuffer[k + 2] >> 3) << 11 ) | ((aBuffer[k + 1] >> 2) << 5) | (aBuffer[k] >> 3));
 8002202:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8002206:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800220a:	f81b 0b03 	ldrb.w	r0, [fp], #3
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	08d2      	lsrs	r2, r2, #3
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                lcd_write_word(color);
 8002218:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 800221c:	f000 f926 	bl	800246c <lcd_write_word>
            for (j = 0; j < 240; j ++) {
 8002220:	455c      	cmp	r4, fp
 8002222:	d1ee      	bne.n	8002202 <Storage_OpenReadFile+0x9a>
        for (i = 0; i < 360; i ++) {
 8002224:	3501      	adds	r5, #1
 8002226:	b2ad      	uxth	r5, r5
 8002228:	45a8      	cmp	r8, r5
 800222a:	d1d7      	bne.n	80021dc <Storage_OpenReadFile+0x74>
    f_close(&file1);
 800222c:	a801      	add	r0, sp, #4
 800222e:	f006 faa9 	bl	8008784 <f_close>
    return 1;
 8002232:	2001      	movs	r0, #1
}
 8002234:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 8002238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223c:	2000c098 	.word	0x2000c098
 8002240:	2000be4c 	.word	0x2000be4c
 8002244:	2000c200 	.word	0x2000c200

08002248 <Storage_GetDirectoryBitmapFiles>:
* @param  DirName: Directory name
* @param  Files: Buffer to contain read files
* @retval The number of the found files
*/
uint32_t Storage_GetDirectoryBitmapFiles(const char* DirName, char* Files[])
{
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	4688      	mov	r8, r1
  uint32_t i = 0, j = 0;
  FRESULT res;
   
  res = f_opendir(&MyDirectory, DirName);
 8002250:	4825      	ldr	r0, [pc, #148]	; (80022e8 <Storage_GetDirectoryBitmapFiles+0xa0>)
 8002252:	4621      	mov	r1, r4
 8002254:	f006 fc56 	bl	8008b04 <f_opendir>
  
  if(res == FR_OK)
 8002258:	bb90      	cbnz	r0, 80022c0 <Storage_GetDirectoryBitmapFiles+0x78>
 800225a:	4605      	mov	r5, r0
  {
    i = strlen(DirName);
 800225c:	4620      	mov	r0, r4
 800225e:	f7fd ffbf 	bl	80001e0 <strlen>
 8002262:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80022f0 <Storage_GetDirectoryBitmapFiles+0xa8>
    for (;;)
    {
      res = f_readdir(&MyDirectory, &MyFileInfo);
 8002266:	4f20      	ldr	r7, [pc, #128]	; (80022e8 <Storage_GetDirectoryBitmapFiles+0xa0>)
    i = strlen(DirName);
 8002268:	4604      	mov	r4, r0
      res = f_readdir(&MyDirectory, &MyFileInfo);
 800226a:	4656      	mov	r6, sl
        
        if(j < MAX_BMP_FILES)
        {
          if((MyFileInfo.fname[i + 1] == 'B') && (MyFileInfo.fname[i + 2] == 'M') && (MyFileInfo.fname[i + 3] == 'P'))
          {
            sprintf(Files[j], "%-11.11s", MyFileInfo.fname);
 800226c:	f10a 0909 	add.w	r9, sl, #9
      res = f_readdir(&MyDirectory, &MyFileInfo);
 8002270:	4631      	mov	r1, r6
 8002272:	4638      	mov	r0, r7
 8002274:	f006 fcca 	bl	8008c0c <f_readdir>
      if(res != FR_OK || MyFileInfo.fname[0] == 0) break;
 8002278:	b9f8      	cbnz	r0, 80022ba <Storage_GetDirectoryBitmapFiles+0x72>
 800227a:	f89a 3009 	ldrb.w	r3, [sl, #9]
 800227e:	b1e3      	cbz	r3, 80022ba <Storage_GetDirectoryBitmapFiles+0x72>
      if(MyFileInfo.fname[0] == '.') continue;
 8002280:	2b2e      	cmp	r3, #46	; 0x2e
 8002282:	d0f5      	beq.n	8002270 <Storage_GetDirectoryBitmapFiles+0x28>
      if(!(MyFileInfo.fattrib & AM_DIR))
 8002284:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8002288:	06db      	lsls	r3, r3, #27
 800228a:	d4f1      	bmi.n	8002270 <Storage_GetDirectoryBitmapFiles+0x28>
 800228c:	f104 030a 	add.w	r3, r4, #10
 8002290:	4453      	add	r3, sl
        while (MyFileInfo.fname[i] != 0x2E);
 8002292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002296:	2a2e      	cmp	r2, #46	; 0x2e
 8002298:	4621      	mov	r1, r4
          i++;
 800229a:	f104 0401 	add.w	r4, r4, #1
        while (MyFileInfo.fname[i] != 0x2E);
 800229e:	d1f8      	bne.n	8002292 <Storage_GetDirectoryBitmapFiles+0x4a>
        if(j < MAX_BMP_FILES)
 80022a0:	2d18      	cmp	r5, #24
 80022a2:	d803      	bhi.n	80022ac <Storage_GetDirectoryBitmapFiles+0x64>
          if((MyFileInfo.fname[i + 1] == 'B') && (MyFileInfo.fname[i + 2] == 'M') && (MyFileInfo.fname[i + 3] == 'P'))
 80022a4:	4451      	add	r1, sl
 80022a6:	7acb      	ldrb	r3, [r1, #11]
 80022a8:	2b42      	cmp	r3, #66	; 0x42
 80022aa:	d00d      	beq.n	80022c8 <Storage_GetDirectoryBitmapFiles+0x80>
      res = f_readdir(&MyDirectory, &MyFileInfo);
 80022ac:	4631      	mov	r1, r6
 80022ae:	4638      	mov	r0, r7
            j++;
          }
        }
        i = 0;
 80022b0:	2400      	movs	r4, #0
      res = f_readdir(&MyDirectory, &MyFileInfo);
 80022b2:	f006 fcab 	bl	8008c0c <f_readdir>
      if(res != FR_OK || MyFileInfo.fname[0] == 0) break;
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d0df      	beq.n	800227a <Storage_GetDirectoryBitmapFiles+0x32>
      }
    }
  }
    
  return j;
}
 80022ba:	4628      	mov	r0, r5
 80022bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t i = 0, j = 0;
 80022c0:	2500      	movs	r5, #0
}
 80022c2:	4628      	mov	r0, r5
 80022c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((MyFileInfo.fname[i + 1] == 'B') && (MyFileInfo.fname[i + 2] == 'M') && (MyFileInfo.fname[i + 3] == 'P'))
 80022c8:	7b0b      	ldrb	r3, [r1, #12]
 80022ca:	2b4d      	cmp	r3, #77	; 0x4d
 80022cc:	d1ee      	bne.n	80022ac <Storage_GetDirectoryBitmapFiles+0x64>
 80022ce:	7b4b      	ldrb	r3, [r1, #13]
 80022d0:	2b50      	cmp	r3, #80	; 0x50
 80022d2:	d1eb      	bne.n	80022ac <Storage_GetDirectoryBitmapFiles+0x64>
            sprintf(Files[j], "%-11.11s", MyFileInfo.fname);
 80022d4:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80022d8:	4904      	ldr	r1, [pc, #16]	; (80022ec <Storage_GetDirectoryBitmapFiles+0xa4>)
 80022da:	464a      	mov	r2, r9
 80022dc:	f006 fe70 	bl	8008fc0 <siprintf>
            j++;
 80022e0:	3501      	adds	r5, #1
        i = 0;
 80022e2:	2400      	movs	r4, #0
 80022e4:	e7c4      	b.n	8002270 <Storage_GetDirectoryBitmapFiles+0x28>
 80022e6:	bf00      	nop
 80022e8:	2000bc2c 	.word	0x2000bc2c
 80022ec:	0800a34c 	.word	0x0800a34c
 80022f0:	2000c080 	.word	0x2000c080

080022f4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <SystemInit+0x10>)
 80022f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <lcd_write_byte>:
uint8_t lcd_id;
uint8_t _rotation = 0;
static uint16_t frame_buffer[(LCD_WIDTH * LCD_HEIGHT)/4];

void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8002308:	b500      	push	{lr}
 800230a:	b083      	sub	sp, #12
 800230c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (chCmd) {
 8002310:	b1d1      	cbz	r1, 8002348 <lcd_write_byte+0x40>
        __LCD_DC_SET();
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f001 fb98 	bl	8003a50 <HAL_GPIO_WritePin>
    } else {
        __LCD_DC_CLR();
    }
    __LCD_CS_CLR();
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <lcd_write_byte+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	f001 fb93 	bl	8003a50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&chByte,1,0xff);
 800232a:	23ff      	movs	r3, #255	; 0xff
 800232c:	f10d 0107 	add.w	r1, sp, #7
 8002330:	2201      	movs	r2, #1
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <lcd_write_byte+0x54>)
 8002334:	f003 f97c 	bl	8005630 <HAL_SPI_Transmit>
    __LCD_CS_SET();
 8002338:	4807      	ldr	r0, [pc, #28]	; (8002358 <lcd_write_byte+0x50>)
 800233a:	2201      	movs	r2, #1
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	f001 fb87 	bl	8003a50 <HAL_GPIO_WritePin>
}
 8002342:	b003      	add	sp, #12
 8002344:	f85d fb04 	ldr.w	pc, [sp], #4
        __LCD_DC_CLR();
 8002348:	460a      	mov	r2, r1
 800234a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002352:	f001 fb7d 	bl	8003a50 <HAL_GPIO_WritePin>
 8002356:	e7e3      	b.n	8002320 <lcd_write_byte+0x18>
 8002358:	48000400 	.word	0x48000400
 800235c:	20000910 	.word	0x20000910

08002360 <setRotation.part.0>:
//	lcd_write_byte(0x2C, LCD_CMD);
//	for (int i = 0; i < width * height * 2; i++)
//		lcd_data(data[i]);
//}

void setRotation(uint8_t rotation)
 8002360:	b510      	push	{r4, lr}
 8002362:	4604      	mov	r4, r0
 8002364:	2803      	cmp	r0, #3
 8002366:	d837      	bhi.n	80023d8 <setRotation.part.0+0x78>
 8002368:	e8df f000 	tbb	[pc, r0]
 800236c:	02777039 	.word	0x02777039
	lcd_write_byte(chRegister, LCD_CMD);
 8002370:	2100      	movs	r1, #0
 8002372:	2036      	movs	r0, #54	; 0x36
 8002374:	f7ff ffc8 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002378:	2101      	movs	r1, #1
 800237a:	20a0      	movs	r0, #160	; 0xa0
 800237c:	f7ff ffc4 	bl	8002308 <lcd_write_byte>

			case 3:
			 /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
			 lcd_write_register(0X36, 0xA0);
			
				lcd_write_byte(0x2A,LCD_CMD);
 8002380:	2100      	movs	r1, #0
 8002382:	202a      	movs	r0, #42	; 0x2a
 8002384:	f7ff ffc0 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8002388:	2101      	movs	r1, #1
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff ffbc 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8002390:	2101      	movs	r1, #1
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff ffb8 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 8002398:	2101      	movs	r1, #1
 800239a:	4608      	mov	r0, r1
 800239c:	f7ff ffb4 	bl	8002308 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 80023a0:	2101      	movs	r1, #1
 80023a2:	203f      	movs	r0, #63	; 0x3f
 80023a4:	f7ff ffb0 	bl	8002308 <lcd_write_byte>

				lcd_write_byte(0x2B,LCD_CMD);
 80023a8:	2100      	movs	r1, #0
 80023aa:	202b      	movs	r0, #43	; 0x2b
 80023ac:	f7ff ffac 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80023b0:	2101      	movs	r1, #1
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff ffa8 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80023b8:	2101      	movs	r1, #1
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff ffa4 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80023c0:	2101      	movs	r1, #1
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff ffa0 	bl	8002308 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80023c8:	2101      	movs	r1, #1
 80023ca:	20ef      	movs	r0, #239	; 0xef
 80023cc:	f7ff ff9c 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 80023d0:	2100      	movs	r1, #0
 80023d2:	202c      	movs	r0, #44	; 0x2c
 80023d4:	f7ff ff98 	bl	8002308 <lcd_write_byte>
				break;
				
				default:
				break;
		 }
		_rotation=rotation;
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <setRotation.part.0+0x108>)
 80023da:	701c      	strb	r4, [r3, #0]
	}else{
		//HX8347 ROTATION SET
	} 
}
 80023dc:	bd10      	pop	{r4, pc}
	lcd_write_byte(chRegister, LCD_CMD);
 80023de:	2100      	movs	r1, #0
 80023e0:	2036      	movs	r0, #54	; 0x36
 80023e2:	f7ff ff91 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80023e6:	2101      	movs	r1, #1
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff8d 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x2A,LCD_CMD);
 80023ee:	2100      	movs	r1, #0
 80023f0:	202a      	movs	r0, #42	; 0x2a
 80023f2:	f7ff ff89 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80023f6:	2101      	movs	r1, #1
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff ff85 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80023fe:	2101      	movs	r1, #1
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff ff81 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8002406:	2101      	movs	r1, #1
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff ff7d 	bl	8002308 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 800240e:	2101      	movs	r1, #1
 8002410:	20ef      	movs	r0, #239	; 0xef
 8002412:	f7ff ff79 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x2B,LCD_CMD);
 8002416:	2100      	movs	r1, #0
 8002418:	202b      	movs	r0, #43	; 0x2b
 800241a:	f7ff ff75 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800241e:	2101      	movs	r1, #1
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff ff71 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8002426:	2101      	movs	r1, #1
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff ff6d 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800242e:	2101      	movs	r1, #1
 8002430:	4608      	mov	r0, r1
 8002432:	f7ff ff69 	bl	8002308 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8002436:	2101      	movs	r1, #1
 8002438:	203f      	movs	r0, #63	; 0x3f
 800243a:	f7ff ff65 	bl	8002308 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 800243e:	2100      	movs	r1, #0
 8002440:	202c      	movs	r0, #44	; 0x2c
 8002442:	f7ff ff61 	bl	8002308 <lcd_write_byte>
		_rotation=rotation;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <setRotation.part.0+0x108>)
 8002448:	701c      	strb	r4, [r3, #0]
}
 800244a:	bd10      	pop	{r4, pc}
	lcd_write_byte(chRegister, LCD_CMD);
 800244c:	2100      	movs	r1, #0
 800244e:	2036      	movs	r0, #54	; 0x36
 8002450:	f7ff ff5a 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002454:	2101      	movs	r1, #1
 8002456:	2060      	movs	r0, #96	; 0x60
 8002458:	e790      	b.n	800237c <setRotation.part.0+0x1c>
	lcd_write_byte(chRegister, LCD_CMD);
 800245a:	2100      	movs	r1, #0
 800245c:	2036      	movs	r0, #54	; 0x36
 800245e:	f7ff ff53 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002462:	2101      	movs	r1, #1
 8002464:	20c0      	movs	r0, #192	; 0xc0
 8002466:	e7c0      	b.n	80023ea <setRotation.part.0+0x8a>
 8002468:	2000032c 	.word	0x2000032c

0800246c <lcd_write_word>:
{
 800246c:	b530      	push	{r4, r5, lr}
 800246e:	b083      	sub	sp, #12
    __LCD_CS_CLR();
 8002470:	4c13      	ldr	r4, [pc, #76]	; (80024c0 <lcd_write_word+0x54>)
		HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8002472:	4d14      	ldr	r5, [pc, #80]	; (80024c4 <lcd_write_word+0x58>)
		uint8_t lval = hwData & 0xFF;
 8002474:	f88d 0007 	strb.w	r0, [sp, #7]
		uint8_t hval = hwData >> 8;
 8002478:	0a03      	lsrs	r3, r0, #8
    __LCD_DC_SET();
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		uint8_t hval = hwData >> 8;
 8002484:	f88d 3006 	strb.w	r3, [sp, #6]
    __LCD_DC_SET();
 8002488:	f001 fae2 	bl	8003a50 <HAL_GPIO_WritePin>
    __LCD_CS_CLR();
 800248c:	4620      	mov	r0, r4
 800248e:	2200      	movs	r2, #0
 8002490:	2140      	movs	r1, #64	; 0x40
 8002492:	f001 fadd 	bl	8003a50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8002496:	f10d 0106 	add.w	r1, sp, #6
 800249a:	4628      	mov	r0, r5
 800249c:	23ff      	movs	r3, #255	; 0xff
 800249e:	2201      	movs	r2, #1
 80024a0:	f003 f8c6 	bl	8005630 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 80024a4:	23ff      	movs	r3, #255	; 0xff
 80024a6:	f10d 0107 	add.w	r1, sp, #7
 80024aa:	4628      	mov	r0, r5
 80024ac:	2201      	movs	r2, #1
 80024ae:	f003 f8bf 	bl	8005630 <HAL_SPI_Transmit>
    __LCD_CS_SET();
 80024b2:	4620      	mov	r0, r4
 80024b4:	2201      	movs	r2, #1
 80024b6:	2140      	movs	r1, #64	; 0x40
 80024b8:	f001 faca 	bl	8003a50 <HAL_GPIO_WritePin>
}
 80024bc:	b003      	add	sp, #12
 80024be:	bd30      	pop	{r4, r5, pc}
 80024c0:	48000400 	.word	0x48000400
 80024c4:	20000910 	.word	0x20000910

080024c8 <lcd_set_cursor>:
{
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ST7789V == lcd_id){
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <lcd_set_cursor+0x128>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b52      	cmp	r3, #82	; 0x52
{
 80024d0:	4604      	mov	r4, r0
 80024d2:	460d      	mov	r5, r1
	if(ST7789V == lcd_id){
 80024d4:	d141      	bne.n	800255a <lcd_set_cursor+0x92>
		if(1==_rotation||3==_rotation){
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <lcd_set_cursor+0x12c>)
 80024d8:	781e      	ldrb	r6, [r3, #0]
 80024da:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 80024de:	2e01      	cmp	r6, #1
			lcd_write_byte(0x2A,LCD_CMD);
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	f04f 002a 	mov.w	r0, #42	; 0x2a
		if(1==_rotation||3==_rotation){
 80024e8:	d01b      	beq.n	8002522 <lcd_set_cursor+0x5a>
			lcd_write_byte(0x2A,LCD_CMD);
 80024ea:	f7ff ff0d 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 80024ee:	2101      	movs	r1, #1
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff ff09 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(hwXpos&0xff,LCD_DATA);
 80024f6:	b2e0      	uxtb	r0, r4
 80024f8:	2101      	movs	r1, #1
 80024fa:	f7ff ff05 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x2B,LCD_CMD);
 80024fe:	2100      	movs	r1, #0
 8002500:	202b      	movs	r0, #43	; 0x2b
 8002502:	f7ff ff01 	bl	8002308 <lcd_write_byte>
			lcd_write_byte((hwYpos>>8)&0xff,LCD_DATA);
 8002506:	0a28      	lsrs	r0, r5, #8
 8002508:	2101      	movs	r1, #1
 800250a:	f7ff fefd 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(hwYpos&0xff,LCD_DATA);
 800250e:	b2e8      	uxtb	r0, r5
 8002510:	2101      	movs	r1, #1
 8002512:	f7ff fef9 	bl	8002308 <lcd_write_byte>
}
 8002516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		lcd_write_byte(0x2C, LCD_CMD);
 800251a:	2100      	movs	r1, #0
 800251c:	202c      	movs	r0, #44	; 0x2c
 800251e:	f7ff bef3 	b.w	8002308 <lcd_write_byte>
			lcd_write_byte(0x2A,LCD_CMD);
 8002522:	f7ff fef1 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(((hwXpos)>>8)&0xff,LCD_DATA);
 8002526:	4631      	mov	r1, r6
 8002528:	0a20      	lsrs	r0, r4, #8
 800252a:	f7ff feed 	bl	8002308 <lcd_write_byte>
			lcd_write_byte((hwXpos)&0xff,LCD_DATA);
 800252e:	4631      	mov	r1, r6
 8002530:	b2e0      	uxtb	r0, r4
 8002532:	f7ff fee9 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x2B,LCD_CMD);
 8002536:	2100      	movs	r1, #0
 8002538:	202b      	movs	r0, #43	; 0x2b
 800253a:	f7ff fee5 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 800253e:	4631      	mov	r1, r6
 8002540:	2000      	movs	r0, #0
 8002542:	f7ff fee1 	bl	8002308 <lcd_write_byte>
			lcd_write_byte((hwYpos)&0xff,LCD_DATA);
 8002546:	4631      	mov	r1, r6
 8002548:	b2e8      	uxtb	r0, r5
 800254a:	f7ff fedd 	bl	8002308 <lcd_write_byte>
}
 800254e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		lcd_write_byte(0x2C, LCD_CMD);
 8002552:	2100      	movs	r1, #0
 8002554:	202c      	movs	r0, #44	; 0x2c
 8002556:	f7ff bed7 	b.w	8002308 <lcd_write_byte>
			lcd_write_register(0x02, hwXpos >> 8);
 800255a:	0a27      	lsrs	r7, r4, #8
	lcd_write_byte(chRegister, LCD_CMD);
 800255c:	2100      	movs	r1, #0
 800255e:	2002      	movs	r0, #2
 8002560:	f7ff fed2 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002564:	4638      	mov	r0, r7
 8002566:	2101      	movs	r1, #1
 8002568:	f7ff fece 	bl	8002308 <lcd_write_byte>
			lcd_write_register(0x03, hwXpos & 0xFF); //Column Start
 800256c:	b2e4      	uxtb	r4, r4
	lcd_write_byte(chRegister, LCD_CMD);
 800256e:	2100      	movs	r1, #0
 8002570:	2003      	movs	r0, #3
 8002572:	f7ff fec9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002576:	4620      	mov	r0, r4
 8002578:	2101      	movs	r1, #1
 800257a:	f7ff fec5 	bl	8002308 <lcd_write_byte>
			lcd_write_register(0x06, hwYpos >> 8);
 800257e:	0a2e      	lsrs	r6, r5, #8
	lcd_write_byte(chRegister, LCD_CMD);
 8002580:	2100      	movs	r1, #0
 8002582:	2006      	movs	r0, #6
 8002584:	f7ff fec0 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002588:	4630      	mov	r0, r6
 800258a:	2101      	movs	r1, #1
 800258c:	f7ff febc 	bl	8002308 <lcd_write_byte>
			lcd_write_register(0x07, hwYpos & 0xFF); //Row Start
 8002590:	b2ed      	uxtb	r5, r5
	lcd_write_byte(chRegister, LCD_CMD);
 8002592:	2100      	movs	r1, #0
 8002594:	2007      	movs	r0, #7
 8002596:	f7ff feb7 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800259a:	4628      	mov	r0, r5
 800259c:	2101      	movs	r1, #1
 800259e:	f7ff feb3 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80025a2:	2100      	movs	r1, #0
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7ff feaf 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80025aa:	4638      	mov	r0, r7
 80025ac:	2101      	movs	r1, #1
 80025ae:	f7ff feab 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2003      	movs	r0, #3
 80025b6:	f7ff fea7 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80025ba:	4620      	mov	r0, r4
 80025bc:	2101      	movs	r1, #1
 80025be:	f7ff fea3 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80025c2:	2100      	movs	r1, #0
 80025c4:	2006      	movs	r0, #6
 80025c6:	f7ff fe9f 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80025ca:	4630      	mov	r0, r6
 80025cc:	2101      	movs	r1, #1
 80025ce:	f7ff fe9b 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80025d2:	2100      	movs	r1, #0
 80025d4:	2007      	movs	r0, #7
 80025d6:	f7ff fe97 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80025da:	4628      	mov	r0, r5
 80025dc:	2101      	movs	r1, #1
 80025de:	f7ff fe93 	bl	8002308 <lcd_write_byte>
}
 80025e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			lcd_write_byte(0x22, LCD_CMD);
 80025e6:	2100      	movs	r1, #0
 80025e8:	2022      	movs	r0, #34	; 0x22
 80025ea:	f7ff be8d 	b.w	8002308 <lcd_write_byte>
 80025ee:	bf00      	nop
 80025f0:	2000c458 	.word	0x2000c458
 80025f4:	2000032c 	.word	0x2000032c

080025f8 <lcd_clear_screen>:
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(ST7789V == lcd_id){
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <lcd_clear_screen+0xc4>)
{
 80025fc:	b083      	sub	sp, #12
	if(ST7789V == lcd_id){
 80025fe:	781b      	ldrb	r3, [r3, #0]
	uint8_t lval = hwColor & 0xFF;
 8002600:	f88d 0007 	strb.w	r0, [sp, #7]
	if(ST7789V == lcd_id){
 8002604:	2b52      	cmp	r3, #82	; 0x52
	uint8_t hval = hwColor >> 8;
 8002606:	ea4f 2010 	mov.w	r0, r0, lsr #8
 800260a:	f88d 0006 	strb.w	r0, [sp, #6]
	if(ST7789V == lcd_id){
 800260e:	d02f      	beq.n	8002670 <lcd_clear_screen+0x78>
		lcd_set_cursor(0, 0);
 8002610:	2100      	movs	r1, #0
 8002612:	4608      	mov	r0, r1
 8002614:	f7ff ff58 	bl	80024c8 <lcd_set_cursor>
		lcd_write_byte(0x22, LCD_CMD);
 8002618:	2100      	movs	r1, #0
 800261a:	2022      	movs	r0, #34	; 0x22
 800261c:	f7ff fe74 	bl	8002308 <lcd_write_byte>
		__LCD_DC_SET();
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262a:	f001 fa11 	bl	8003a50 <HAL_GPIO_WritePin>
		__LCD_CS_CLR();
 800262e:	4824      	ldr	r0, [pc, #144]	; (80026c0 <lcd_clear_screen+0xc8>)
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8002630:	4d24      	ldr	r5, [pc, #144]	; (80026c4 <lcd_clear_screen+0xcc>)
		__LCD_CS_CLR();
 8002632:	2200      	movs	r2, #0
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	f001 fa0b 	bl	8003a50 <HAL_GPIO_WritePin>
 800263a:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
 800263e:	f10d 0706 	add.w	r7, sp, #6
 8002642:	f10d 0607 	add.w	r6, sp, #7
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8002646:	23ff      	movs	r3, #255	; 0xff
 8002648:	2201      	movs	r2, #1
 800264a:	4639      	mov	r1, r7
 800264c:	4628      	mov	r0, r5
 800264e:	f002 ffef 	bl	8005630 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 8002652:	23ff      	movs	r3, #255	; 0xff
 8002654:	2201      	movs	r2, #1
 8002656:	4631      	mov	r1, r6
 8002658:	4628      	mov	r0, r5
 800265a:	f002 ffe9 	bl	8005630 <HAL_SPI_Transmit>
		for (i = 0; i < wCount; i ++) {
 800265e:	3c01      	subs	r4, #1
 8002660:	d1f1      	bne.n	8002646 <lcd_clear_screen+0x4e>
		__LCD_CS_SET();
 8002662:	4817      	ldr	r0, [pc, #92]	; (80026c0 <lcd_clear_screen+0xc8>)
 8002664:	2201      	movs	r2, #1
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	f001 f9f2 	bl	8003a50 <HAL_GPIO_WritePin>
}
 800266c:	b003      	add	sp, #12
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setRotation(_rotation);
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <lcd_clear_screen+0xd0>)
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8002672:	4d14      	ldr	r5, [pc, #80]	; (80026c4 <lcd_clear_screen+0xcc>)
 8002674:	7818      	ldrb	r0, [r3, #0]
 8002676:	f7ff fe73 	bl	8002360 <setRotation.part.0>
		__LCD_DC_SET();
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f001 f9e4 	bl	8003a50 <HAL_GPIO_WritePin>
		__LCD_CS_CLR();
 8002688:	480d      	ldr	r0, [pc, #52]	; (80026c0 <lcd_clear_screen+0xc8>)
 800268a:	2200      	movs	r2, #0
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	f001 f9df 	bl	8003a50 <HAL_GPIO_WritePin>
 8002692:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
 8002696:	f10d 0706 	add.w	r7, sp, #6
 800269a:	f10d 0607 	add.w	r6, sp, #7
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 800269e:	23ff      	movs	r3, #255	; 0xff
 80026a0:	2201      	movs	r2, #1
 80026a2:	4639      	mov	r1, r7
 80026a4:	4628      	mov	r0, r5
 80026a6:	f002 ffc3 	bl	8005630 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 80026aa:	23ff      	movs	r3, #255	; 0xff
 80026ac:	2201      	movs	r2, #1
 80026ae:	4631      	mov	r1, r6
 80026b0:	4628      	mov	r0, r5
 80026b2:	f002 ffbd 	bl	8005630 <HAL_SPI_Transmit>
		for (i = 0; i < wCount; i ++) {
 80026b6:	3c01      	subs	r4, #1
 80026b8:	d1f1      	bne.n	800269e <lcd_clear_screen+0xa6>
 80026ba:	e7d2      	b.n	8002662 <lcd_clear_screen+0x6a>
 80026bc:	2000c458 	.word	0x2000c458
 80026c0:	48000400 	.word	0x48000400
 80026c4:	20000910 	.word	0x20000910
 80026c8:	2000032c 	.word	0x2000032c

080026cc <lcd_set_window>:
{
 80026cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(ST7789V == lcd_id){
 80026d0:	4c74      	ldr	r4, [pc, #464]	; (80028a4 <lcd_set_window+0x1d8>)
 80026d2:	7825      	ldrb	r5, [r4, #0]
 80026d4:	2d52      	cmp	r5, #82	; 0x52
{
 80026d6:	4680      	mov	r8, r0
 80026d8:	460f      	mov	r7, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461e      	mov	r6, r3
	if(ST7789V == lcd_id){
 80026de:	d107      	bne.n	80026f0 <lcd_set_window+0x24>
		switch(_rotation){
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <lcd_set_window+0x1dc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d83b      	bhi.n	8002760 <lcd_set_window+0x94>
 80026e8:	e8df f003 	tbb	[pc, r3]
 80026ec:	32894a3c 	.word	0x32894a3c
	lcd_write_byte(chRegister, LCD_CMD);
 80026f0:	2100      	movs	r1, #0
 80026f2:	2004      	movs	r0, #4
 80026f4:	f7ff fe08 	bl	8002308 <lcd_write_byte>
		lcd_write_register(0x04, (hwXpos + hwWidth - 1) >> 8);
 80026f8:	eb08 0004 	add.w	r0, r8, r4
 80026fc:	3801      	subs	r0, #1
	lcd_write_byte(chValue, LCD_DATA);
 80026fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002702:	2101      	movs	r1, #1
 8002704:	f7ff fe00 	bl	8002308 <lcd_write_byte>
		lcd_write_register(0x05, (hwXpos + hwWidth - 1) & 0xFF); //Column End
 8002708:	1e62      	subs	r2, r4, #1
 800270a:	eb02 0008 	add.w	r0, r2, r8
 800270e:	b2c4      	uxtb	r4, r0
	lcd_write_byte(chRegister, LCD_CMD);
 8002710:	2100      	movs	r1, #0
 8002712:	2005      	movs	r0, #5
 8002714:	f7ff fdf8 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002718:	4620      	mov	r0, r4
 800271a:	2101      	movs	r1, #1
 800271c:	f7ff fdf4 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002720:	2100      	movs	r1, #0
 8002722:	2008      	movs	r0, #8
 8002724:	f7ff fdf0 	bl	8002308 <lcd_write_byte>
		lcd_write_register(0x08, (hwYpos + hwHeight - 1) >> 8);
 8002728:	19b8      	adds	r0, r7, r6
 800272a:	3801      	subs	r0, #1
	lcd_write_byte(chValue, LCD_DATA);
 800272c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002730:	2101      	movs	r1, #1
 8002732:	f7ff fde9 	bl	8002308 <lcd_write_byte>
		lcd_write_register(0x09, (hwYpos + hwHeight - 1) & 0xFF); //Row End
 8002736:	1e73      	subs	r3, r6, #1
 8002738:	19d9      	adds	r1, r3, r7
 800273a:	b2cc      	uxtb	r4, r1
	lcd_write_byte(chRegister, LCD_CMD);
 800273c:	2009      	movs	r0, #9
 800273e:	2100      	movs	r1, #0
 8002740:	f7ff fde2 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002744:	4620      	mov	r0, r4
 8002746:	2101      	movs	r1, #1
}
 8002748:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	lcd_write_byte(chValue, LCD_DATA);
 800274c:	f7ff bddc 	b.w	8002308 <lcd_write_byte>
				if( 320 > hwXpos + hwWidth - 1 && 240 > hwYpos + hwHeight - 1 ){
 8002750:	1825      	adds	r5, r4, r0
 8002752:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8002756:	dc03      	bgt.n	8002760 <lcd_set_window+0x94>
 8002758:	198b      	adds	r3, r1, r6
 800275a:	2bf0      	cmp	r3, #240	; 0xf0
 800275c:	f340 809a 	ble.w	8002894 <lcd_set_window+0x1c8>
}
 8002760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( 240 > hwXpos + hwWidth - 1 && 320 > hwYpos + hwHeight - 1 ){
 8002764:	1903      	adds	r3, r0, r4
 8002766:	2bf0      	cmp	r3, #240	; 0xf0
 8002768:	dcfa      	bgt.n	8002760 <lcd_set_window+0x94>
 800276a:	1875      	adds	r5, r6, r1
 800276c:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8002770:	dcf6      	bgt.n	8002760 <lcd_set_window+0x94>
	lcd_write_byte(chRegister, LCD_CMD);
 8002772:	2100      	movs	r1, #0
 8002774:	2036      	movs	r0, #54	; 0x36
 8002776:	f7ff fdc7 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800277a:	2101      	movs	r1, #1
 800277c:	2000      	movs	r0, #0
 800277e:	e04b      	b.n	8002818 <lcd_set_window+0x14c>
				if( 320 > hwXpos + hwWidth - 1 && 240 > hwYpos + hwHeight - 1 ){
 8002780:	1825      	adds	r5, r4, r0
 8002782:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8002786:	dceb      	bgt.n	8002760 <lcd_set_window+0x94>
 8002788:	198b      	adds	r3, r1, r6
 800278a:	2bf0      	cmp	r3, #240	; 0xf0
 800278c:	dce8      	bgt.n	8002760 <lcd_set_window+0x94>
	lcd_write_byte(chRegister, LCD_CMD);
 800278e:	2100      	movs	r1, #0
 8002790:	2036      	movs	r0, #54	; 0x36
 8002792:	f7ff fdb9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002796:	2101      	movs	r1, #1
 8002798:	2060      	movs	r0, #96	; 0x60
 800279a:	f7ff fdb5 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x2A,LCD_CMD);
 800279e:	2100      	movs	r1, #0
 80027a0:	202a      	movs	r0, #42	; 0x2a
 80027a2:	f7ff fdb1 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(((hwXpos-1)>>8)&0xff,LCD_DATA);
 80027a6:	f108 30ff 	add.w	r0, r8, #4294967295
 80027aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80027ae:	2101      	movs	r1, #1
					lcd_write_byte((hwXpos-1)&0xff,LCD_DATA);
 80027b0:	fa5f f988 	uxtb.w	r9, r8
					lcd_write_byte(((hwXpos-1)>>8)&0xff,LCD_DATA);
 80027b4:	f7ff fda8 	bl	8002308 <lcd_write_byte>
					lcd_write_byte((hwXpos-1)&0xff,LCD_DATA);
 80027b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80027bc:	b2c0      	uxtb	r0, r0
 80027be:	2101      	movs	r1, #1
 80027c0:	f7ff fda2 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(((hwWidth+hwXpos-1)>>8)&0xff,LCD_DATA);
 80027c4:	1e68      	subs	r0, r5, #1
 80027c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80027ca:	2101      	movs	r1, #1
 80027cc:	f7ff fd9c 	bl	8002308 <lcd_write_byte>
					lcd_write_byte((hwWidth+hwXpos-1)&0xff,LCD_DATA);
 80027d0:	1e60      	subs	r0, r4, #1
 80027d2:	4448      	add	r0, r9
 80027d4:	b2c0      	uxtb	r0, r0
 80027d6:	2101      	movs	r1, #1
 80027d8:	f7ff fd96 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x2B,LCD_CMD);
 80027dc:	2100      	movs	r1, #0
 80027de:	202b      	movs	r0, #43	; 0x2b
 80027e0:	f7ff fd92 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwYpos-1,LCD_DATA);
 80027e4:	b2fc      	uxtb	r4, r7
					lcd_write_byte(0x00,LCD_DATA);
 80027e6:	2101      	movs	r1, #1
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7ff fd8d 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwYpos-1,LCD_DATA);
 80027ee:	1e60      	subs	r0, r4, #1
 80027f0:	b2c0      	uxtb	r0, r0
 80027f2:	2101      	movs	r1, #1
 80027f4:	f7ff fd88 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x00,LCD_DATA);
 80027f8:	2101      	movs	r1, #1
 80027fa:	2000      	movs	r0, #0
 80027fc:	e03c      	b.n	8002878 <lcd_set_window+0x1ac>
				if( 240 > hwXpos + hwWidth - 1 && 320 > hwYpos + hwHeight - 1 ){
 80027fe:	1903      	adds	r3, r0, r4
 8002800:	2bf0      	cmp	r3, #240	; 0xf0
 8002802:	dcad      	bgt.n	8002760 <lcd_set_window+0x94>
 8002804:	1875      	adds	r5, r6, r1
 8002806:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800280a:	dca9      	bgt.n	8002760 <lcd_set_window+0x94>
	lcd_write_byte(chRegister, LCD_CMD);
 800280c:	2100      	movs	r1, #0
 800280e:	2036      	movs	r0, #54	; 0x36
 8002810:	f7ff fd7a 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002814:	2101      	movs	r1, #1
 8002816:	20c0      	movs	r0, #192	; 0xc0
 8002818:	f7ff fd76 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x2A,LCD_CMD);
 800281c:	2100      	movs	r1, #0
 800281e:	202a      	movs	r0, #42	; 0x2a
 8002820:	f7ff fd72 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwXpos-1 & 0xff,LCD_DATA);
 8002824:	fa5f f988 	uxtb.w	r9, r8
					lcd_write_byte(0x00,LCD_DATA);
 8002828:	2101      	movs	r1, #1
 800282a:	2000      	movs	r0, #0
 800282c:	f7ff fd6c 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwXpos-1 & 0xff,LCD_DATA);
 8002830:	f109 30ff 	add.w	r0, r9, #4294967295
 8002834:	b2c0      	uxtb	r0, r0
 8002836:	2101      	movs	r1, #1
 8002838:	f7ff fd66 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x00,LCD_DATA);
 800283c:	2101      	movs	r1, #1
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff fd62 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwXpos+hwWidth-1&0xff,LCD_DATA);
 8002844:	1e60      	subs	r0, r4, #1
 8002846:	4448      	add	r0, r9
 8002848:	b2c0      	uxtb	r0, r0
 800284a:	2101      	movs	r1, #1
 800284c:	f7ff fd5c 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(0x2B,LCD_CMD);
 8002850:	2100      	movs	r1, #0
 8002852:	202b      	movs	r0, #43	; 0x2b
 8002854:	f7ff fd58 	bl	8002308 <lcd_write_byte>
					lcd_write_byte((hwYpos-1)>>8&0xFF,LCD_DATA);
 8002858:	1e78      	subs	r0, r7, #1
 800285a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800285e:	2101      	movs	r1, #1
					lcd_write_byte(hwYpos-1&0xFF,LCD_DATA);
 8002860:	b2fc      	uxtb	r4, r7
					lcd_write_byte((hwYpos-1)>>8&0xFF,LCD_DATA);
 8002862:	f7ff fd51 	bl	8002308 <lcd_write_byte>
					lcd_write_byte(hwYpos-1&0xFF,LCD_DATA);
 8002866:	1e60      	subs	r0, r4, #1
 8002868:	b2c0      	uxtb	r0, r0
 800286a:	2101      	movs	r1, #1
 800286c:	f7ff fd4c 	bl	8002308 <lcd_write_byte>
					lcd_write_byte((hwYpos+hwHeight-1)>>8&0xFF,LCD_DATA);
 8002870:	1e68      	subs	r0, r5, #1
 8002872:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002876:	2101      	movs	r1, #1
					lcd_write_byte(0x00,LCD_DATA);
 8002878:	f7ff fd46 	bl	8002308 <lcd_write_byte>
					lcd_write_byte((hwHeight+hwYpos-1)&0xff,LCD_DATA);
 800287c:	1e73      	subs	r3, r6, #1
 800287e:	18e0      	adds	r0, r4, r3
 8002880:	b2c0      	uxtb	r0, r0
 8002882:	2101      	movs	r1, #1
 8002884:	f7ff fd40 	bl	8002308 <lcd_write_byte>
					lcd_set_cursor(hwXpos,hwYpos);
 8002888:	4639      	mov	r1, r7
 800288a:	4640      	mov	r0, r8
}
 800288c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
					lcd_set_cursor(hwXpos,hwYpos);
 8002890:	f7ff be1a 	b.w	80024c8 <lcd_set_cursor>
	lcd_write_byte(chRegister, LCD_CMD);
 8002894:	2100      	movs	r1, #0
 8002896:	2036      	movs	r0, #54	; 0x36
 8002898:	f7ff fd36 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800289c:	2101      	movs	r1, #1
 800289e:	20a0      	movs	r0, #160	; 0xa0
 80028a0:	e77b      	b.n	800279a <lcd_set_window+0xce>
 80028a2:	bf00      	nop
 80028a4:	2000c458 	.word	0x2000c458
 80028a8:	2000032c 	.word	0x2000032c

080028ac <lcd_draw_point>:
{
 80028ac:	b510      	push	{r4, lr}
	if(ST7789V == lcd_id){
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <lcd_draw_point+0x38>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b52      	cmp	r3, #82	; 0x52
{
 80028b4:	4614      	mov	r4, r2
	if(ST7789V == lcd_id){
 80028b6:	d00a      	beq.n	80028ce <lcd_draw_point+0x22>
		lcd_set_cursor(hwXpos, hwYpos);
 80028b8:	f7ff fe06 	bl	80024c8 <lcd_set_cursor>
		lcd_write_byte(0x22, LCD_CMD);
 80028bc:	2022      	movs	r0, #34	; 0x22
 80028be:	2100      	movs	r1, #0
 80028c0:	f7ff fd22 	bl	8002308 <lcd_write_byte>
		lcd_write_word(hwColor);
 80028c4:	4620      	mov	r0, r4
}
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lcd_write_word(hwColor);
 80028ca:	f7ff bdcf 	b.w	800246c <lcd_write_word>
		lcd_set_cursor(hwXpos, hwYpos);
 80028ce:	f7ff fdfb 	bl	80024c8 <lcd_set_cursor>
		lcd_write_byte(0x2C, LCD_CMD);
 80028d2:	202c      	movs	r0, #44	; 0x2c
 80028d4:	2100      	movs	r1, #0
 80028d6:	f7ff fd17 	bl	8002308 <lcd_write_byte>
		lcd_write_word(hwColor);
 80028da:	4620      	mov	r0, r4
}
 80028dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lcd_write_word(hwColor);
 80028e0:	f7ff bdc4 	b.w	800246c <lcd_write_word>
 80028e4:	2000c458 	.word	0x2000c458

080028e8 <lcd_display_char>:
{      	
 80028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	b083      	sub	sp, #12
 80028ee:	4692      	mov	sl, r2
 80028f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    for (i = 0; i < chSize; i ++) {   
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d040      	beq.n	800297a <lcd_display_char+0x92>
 80028f8:	4e23      	ldr	r6, [pc, #140]	; (8002988 <lcd_display_char+0xa0>)
 80028fa:	4c24      	ldr	r4, [pc, #144]	; (800298c <lcd_display_char+0xa4>)
 80028fc:	f46f 7cff 	mvn.w	ip, #510	; 0x1fe
 8002900:	461f      	mov	r7, r3
 8002902:	eb06 0b0c 	add.w	fp, r6, ip
 8002906:	eb0b 130a 	add.w	r3, fp, sl, lsl #4
 800290a:	f107 3bff 	add.w	fp, r7, #4294967295
 800290e:	fa53 fb8b 	uxtab	fp, r3, fp
 8002912:	f10a 5380 	add.w	r3, sl, #268435456	; 0x10000000
 8002916:	3b20      	subs	r3, #32
 8002918:	4688      	mov	r8, r1
 800291a:	eb06 1903 	add.w	r9, r6, r3, lsl #4
 800291e:	491c      	ldr	r1, [pc, #112]	; (8002990 <lcd_display_char+0xa8>)
 8002920:	230c      	movs	r3, #12
 8002922:	fb13 4a0a 	smlabb	sl, r3, sl, r4
 8002926:	2500      	movs	r5, #0
 8002928:	448a      	add	sl, r1
 800292a:	4644      	mov	r4, r8
			if (FONT_1206 == chSize) {
 800292c:	2f0c      	cmp	r7, #12
 800292e:	d027      	beq.n	8002980 <lcd_display_char+0x98>
				}else if (FONT_1608 == chSize) { 
 8002930:	2f10      	cmp	r7, #16
				chTemp = c_chFont1608[chChr - 0x20][i];
 8002932:	bf08      	it	eq
 8002934:	f899 5000 	ldrbeq.w	r5, [r9]
 8002938:	f104 0608 	add.w	r6, r4, #8
 800293c:	b2b6      	uxth	r6, r6
 800293e:	e009      	b.n	8002954 <lcd_display_char+0x6c>
					hwYpos ++;
 8002940:	3401      	adds	r4, #1
 8002942:	b2a4      	uxth	r4, r4
					if ((hwYpos - hwYpos0) == chSize) {
 8002944:	eba4 0308 	sub.w	r3, r4, r8
					chTemp <<= 1;
 8002948:	006d      	lsls	r5, r5, #1
					if ((hwYpos - hwYpos0) == chSize) {
 800294a:	42bb      	cmp	r3, r7
					chTemp <<= 1;
 800294c:	b2ed      	uxtb	r5, r5
					if ((hwYpos - hwYpos0) == chSize) {
 800294e:	d00b      	beq.n	8002968 <lcd_display_char+0x80>
			for (j = 0; j < 8; j ++) {
 8002950:	42a6      	cmp	r6, r4
 8002952:	d00c      	beq.n	800296e <lcd_display_char+0x86>
					if (chTemp & 0x80) {
 8002954:	062b      	lsls	r3, r5, #24
 8002956:	d5f3      	bpl.n	8002940 <lcd_display_char+0x58>
						lcd_draw_point(hwXpos, hwYpos, hwColorVal);
 8002958:	4621      	mov	r1, r4
 800295a:	9201      	str	r2, [sp, #4]
 800295c:	9000      	str	r0, [sp, #0]
 800295e:	f7ff ffa5 	bl	80028ac <lcd_draw_point>
 8002962:	e9dd 0200 	ldrd	r0, r2, [sp]
 8002966:	e7eb      	b.n	8002940 <lcd_display_char+0x58>
						hwXpos ++;
 8002968:	3001      	adds	r0, #1
 800296a:	b280      	uxth	r0, r0
						hwYpos = hwYpos0;
 800296c:	4644      	mov	r4, r8
    for (i = 0; i < chSize; i ++) {   
 800296e:	f109 0901 	add.w	r9, r9, #1
 8002972:	45d9      	cmp	r9, fp
 8002974:	f10a 0a01 	add.w	sl, sl, #1
 8002978:	d1d8      	bne.n	800292c <lcd_display_char+0x44>
}
 800297a:	b003      	add	sp, #12
 800297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				chTemp = c_chFont1206[chChr - 0x20][i];  
 8002980:	f89a 5000 	ldrb.w	r5, [sl]
 8002984:	e7d8      	b.n	8002938 <lcd_display_char+0x50>
 8002986:	bf00      	nop
 8002988:	08022b1c 	.word	0x08022b1c
 800298c:	fffffe80 	.word	0xfffffe80
 8002990:	080226a8 	.word	0x080226a8

08002994 <lcd_display_num>:
{         	
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	b087      	sub	sp, #28
 800299a:	4617      	mov	r7, r2
	for(i = 0; i < chLen; i ++) {
 800299c:	4698      	mov	r8, r3
{         	
 800299e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 80029a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80029a6:	9204      	str	r2, [sp, #16]
	for(i = 0; i < chLen; i ++) {
 80029a8:	f1b8 0f00 	cmp.w	r8, #0
 80029ac:	d03c      	beq.n	8002a28 <lcd_display_num+0x94>
 80029ae:	f1a8 0402 	sub.w	r4, r8, #2
	 	lcd_display_char(hwXpos + (chSize / 2) * i, hwYpos, chTemp + '0', chSize, hwColor); 
 80029b2:	2500      	movs	r5, #0
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 80029b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8002a48 <lcd_display_num+0xb4>
	 	lcd_display_char(hwXpos + (chSize / 2) * i, hwYpos, chTemp + '0', chSize, hwColor); 
 80029b8:	f8cd 8014 	str.w	r8, [sp, #20]
 80029bc:	4683      	mov	fp, r0
 80029be:	b2e4      	uxtb	r4, r4
	uint8_t chTemp, chShow = 0;
 80029c0:	462e      	mov	r6, r5
	 	lcd_display_char(hwXpos + (chSize / 2) * i, hwYpos, chTemp + '0', chSize, hwColor); 
 80029c2:	ea4f 0953 	mov.w	r9, r3, lsr #1
 80029c6:	4688      	mov	r8, r1
	while(n --) result *= m;    
 80029c8:	2cff      	cmp	r4, #255	; 0xff
 80029ca:	d030      	beq.n	8002a2e <lcd_display_num+0x9a>
 80029cc:	4621      	mov	r1, r4
	uint32_t result = 1;
 80029ce:	2201      	movs	r2, #1
	while(n --) result *= m;    
 80029d0:	3901      	subs	r1, #1
 80029d2:	b2c9      	uxtb	r1, r1
 80029d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029d8:	29ff      	cmp	r1, #255	; 0xff
 80029da:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80029de:	d1f7      	bne.n	80029d0 <lcd_display_num+0x3c>
 80029e0:	fbb7 f2f2 	udiv	r2, r7, r2
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 80029e4:	fbaa 0102 	umull	r0, r1, sl, r2
 80029e8:	08c9      	lsrs	r1, r1, #3
 80029ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80029ee:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
 80029f2:	b2ca      	uxtb	r2, r1
		if(chShow == 0 && i < (chLen - 1)) {
 80029f4:	b92e      	cbnz	r6, 8002a02 <lcd_display_num+0x6e>
 80029f6:	9805      	ldr	r0, [sp, #20]
 80029f8:	3801      	subs	r0, #1
 80029fa:	42a8      	cmp	r0, r5
 80029fc:	dd01      	ble.n	8002a02 <lcd_display_num+0x6e>
			if(chTemp == 0) {
 80029fe:	b1c1      	cbz	r1, 8002a32 <lcd_display_num+0x9e>
 8002a00:	2601      	movs	r6, #1
	 	lcd_display_char(hwXpos + (chSize / 2) * i, hwYpos, chTemp + '0', chSize, hwColor); 
 8002a02:	9904      	ldr	r1, [sp, #16]
 8002a04:	9100      	str	r1, [sp, #0]
 8002a06:	3230      	adds	r2, #48	; 0x30
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	4658      	mov	r0, fp
 8002a0e:	9303      	str	r3, [sp, #12]
 8002a10:	f7ff ff6a 	bl	80028e8 <lcd_display_char>
 8002a14:	9b03      	ldr	r3, [sp, #12]
	for(i = 0; i < chLen; i ++) {
 8002a16:	3c01      	subs	r4, #1
 8002a18:	b2e4      	uxtb	r4, r4
 8002a1a:	44cb      	add	fp, r9
 8002a1c:	2cfe      	cmp	r4, #254	; 0xfe
 8002a1e:	fa1f fb8b 	uxth.w	fp, fp
 8002a22:	f105 0501 	add.w	r5, r5, #1
 8002a26:	d1cf      	bne.n	80029c8 <lcd_display_num+0x34>
} 
 8002a28:	b007      	add	sp, #28
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while(n --) result *= m;    
 8002a2e:	463a      	mov	r2, r7
 8002a30:	e7d8      	b.n	80029e4 <lcd_display_num+0x50>
				lcd_display_char(hwXpos + (chSize / 2) * i, hwYpos, ' ', chSize, hwColor);
 8002a32:	9a04      	ldr	r2, [sp, #16]
 8002a34:	9200      	str	r2, [sp, #0]
 8002a36:	4641      	mov	r1, r8
 8002a38:	2220      	movs	r2, #32
 8002a3a:	4658      	mov	r0, fp
 8002a3c:	9303      	str	r3, [sp, #12]
 8002a3e:	f7ff ff53 	bl	80028e8 <lcd_display_char>
				continue;
 8002a42:	9b03      	ldr	r3, [sp, #12]
 8002a44:	e7e7      	b.n	8002a16 <lcd_display_num+0x82>
 8002a46:	bf00      	nop
 8002a48:	cccccccd 	.word	0xcccccccd

08002a4c <lcd_display_string>:
{
 8002a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	4616      	mov	r6, r2
 8002a52:	b083      	sub	sp, #12
    while (*pchString != '\0') {       
 8002a54:	7812      	ldrb	r2, [r2, #0]
{
 8002a56:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    while (*pchString != '\0') {       
 8002a5a:	b352      	cbz	r2, 8002ab2 <lcd_display_string+0x66>
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 8002a5c:	ea4f 0853 	mov.w	r8, r3, lsr #1
 8002a60:	f1c8 0af0 	rsb	sl, r8, #240	; 0xf0
 8002a64:	4604      	mov	r4, r0
 8002a66:	460d      	mov	r5, r1
 8002a68:	461f      	mov	r7, r3
        hwXpos += chSize / 2;
 8002a6a:	fa1f f888 	uxth.w	r8, r8
			if (hwYpos > (LCD_HEIGHT - chSize)) {
 8002a6e:	f5c3 7ba0 	rsb	fp, r3, #320	; 0x140
 8002a72:	e00b      	b.n	8002a8c <lcd_display_string+0x40>
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 8002a74:	4620      	mov	r0, r4
 8002a76:	b294      	uxth	r4, r2
        lcd_display_char(hwXpos, hwYpos, (uint8_t)*pchString, chSize, hwColor);
 8002a78:	f8cd 9000 	str.w	r9, [sp]
 8002a7c:	7832      	ldrb	r2, [r6, #0]
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4629      	mov	r1, r5
 8002a82:	f7ff ff31 	bl	80028e8 <lcd_display_char>
    while (*pchString != '\0') {       
 8002a86:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a8a:	b193      	cbz	r3, 8002ab2 <lcd_display_string+0x66>
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 8002a8c:	4554      	cmp	r4, sl
			hwYpos += chSize;
 8002a8e:	eb05 0307 	add.w	r3, r5, r7
 8002a92:	eb08 0204 	add.w	r2, r8, r4
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 8002a96:	dded      	ble.n	8002a74 <lcd_display_string+0x28>
			hwYpos += chSize;
 8002a98:	b29d      	uxth	r5, r3
			if (hwYpos > (LCD_HEIGHT - chSize)) {
 8002a9a:	455d      	cmp	r5, fp
				lcd_clear_screen(0x00);
 8002a9c:	f04f 0000 	mov.w	r0, #0
			if (hwYpos > (LCD_HEIGHT - chSize)) {
 8002aa0:	dc01      	bgt.n	8002aa6 <lcd_display_string+0x5a>
 8002aa2:	4644      	mov	r4, r8
 8002aa4:	e7e8      	b.n	8002a78 <lcd_display_string+0x2c>
				hwYpos = hwXpos = 0;
 8002aa6:	4605      	mov	r5, r0
				lcd_clear_screen(0x00);
 8002aa8:	4644      	mov	r4, r8
 8002aaa:	f7ff fda5 	bl	80025f8 <lcd_clear_screen>
				hwYpos = hwXpos = 0;
 8002aae:	4628      	mov	r0, r5
 8002ab0:	e7e2      	b.n	8002a78 <lcd_display_string+0x2c>
}
 8002ab2:	b003      	add	sp, #12
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ab8 <lcd_draw_line>:
{
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int y = hwYpos1 - hwYpos0;
 8002abc:	eba3 0b01 	sub.w	fp, r3, r1
		int x = hwXpos1 - hwXpos0;
 8002ac0:	1a16      	subs	r6, r2, r0
{
 8002ac2:	b085      	sub	sp, #20
    int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 8002ac4:	f1bb 0f00 	cmp.w	fp, #0
 8002ac8:	bfb8      	it	lt
 8002aca:	f1cb 0b00 	rsblt	fp, fp, #0
    int dx = abs(x), sx = hwXpos0 < hwXpos1 ? 1 : -1;
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	bfb8      	it	lt
 8002ad2:	4276      	neglt	r6, r6
{
 8002ad4:	468a      	mov	sl, r1
 8002ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
		int x = hwXpos1 - hwXpos0;
 8002ada:	4611      	mov	r1, r2
{
 8002adc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 8002ae0:	9601      	str	r6, [sp, #4]
{
 8002ae2:	4605      	mov	r5, r0
    int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 8002ae4:	f1cb 0900 	rsb	r9, fp, #0
 8002ae8:	eba6 040b 	sub.w	r4, r6, fp
    int dx = abs(x), sx = hwXpos0 < hwXpos1 ? 1 : -1;
 8002aec:	4281      	cmp	r1, r0
 8002aee:	bf8c      	ite	hi
 8002af0:	f04f 0801 	movhi.w	r8, #1
 8002af4:	f04f 38ff 	movls.w	r8, #4294967295
    int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 8002af8:	4553      	cmp	r3, sl
 8002afa:	bf8c      	ite	hi
 8002afc:	2701      	movhi	r7, #1
 8002afe:	f04f 37ff 	movls.w	r7, #4294967295
        lcd_draw_point(hwXpos0, hwYpos0 , hwColor);
 8002b02:	4651      	mov	r1, sl
 8002b04:	4628      	mov	r0, r5
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	f7ff fed0 	bl	80028ac <lcd_draw_point>
        if (e2 >= dy) {     
 8002b0c:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 8002b10:	9a00      	ldr	r2, [sp, #0]
            err += dy; hwXpos0 += sx;
 8002b12:	eb05 0308 	add.w	r3, r5, r8
        e2 = 2 * err;
 8002b16:	ea4f 0144 	mov.w	r1, r4, lsl #1
            err += dx; hwYpos0 += sy;
 8002b1a:	eb0a 0007 	add.w	r0, sl, r7
        if (e2 >= dy) {     
 8002b1e:	dc08      	bgt.n	8002b32 <lcd_draw_line+0x7a>
            if (hwXpos0 == hwXpos1) break;
 8002b20:	9e02      	ldr	r6, [sp, #8]
 8002b22:	42b5      	cmp	r5, r6
 8002b24:	eba4 040b 	sub.w	r4, r4, fp
            err += dy; hwXpos0 += sx;
 8002b28:	b29d      	uxth	r5, r3
            if (hwXpos0 == hwXpos1) break;
 8002b2a:	d00a      	beq.n	8002b42 <lcd_draw_line+0x8a>
        if (e2 <= dx) {
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	428b      	cmp	r3, r1
 8002b30:	dbe7      	blt.n	8002b02 <lcd_draw_line+0x4a>
            if (hwYpos0 == hwYpos1) break;
 8002b32:	9b03      	ldr	r3, [sp, #12]
 8002b34:	459a      	cmp	sl, r3
 8002b36:	d004      	beq.n	8002b42 <lcd_draw_line+0x8a>
            err += dx; hwYpos0 += sy;
 8002b38:	9b01      	ldr	r3, [sp, #4]
 8002b3a:	fa1f fa80 	uxth.w	sl, r0
 8002b3e:	441c      	add	r4, r3
 8002b40:	e7df      	b.n	8002b02 <lcd_draw_line+0x4a>
}
 8002b42:	b005      	add	sp, #20
 8002b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b48 <lcd_draw_circle>:
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	b083      	sub	sp, #12
		int x = -hwRadius, y = 0, err = 2 - 2 * hwRadius, e2;
 8002b4e:	f1c2 0800 	rsb	r8, r2, #0
 8002b52:	f1c2 0601 	rsb	r6, r2, #1
{
 8002b56:	4682      	mov	sl, r0
 8002b58:	9100      	str	r1, [sp, #0]
 8002b5a:	461f      	mov	r7, r3
		int x = -hwRadius, y = 0, err = 2 - 2 * hwRadius, e2;
 8002b5c:	0076      	lsls	r6, r6, #1
 8002b5e:	fa1f f988 	uxth.w	r9, r8
 8002b62:	f04f 0b00 	mov.w	fp, #0
        lcd_draw_point(hwXpos - x, hwYpos + y, hwColor);
 8002b66:	9b00      	ldr	r3, [sp, #0]
 8002b68:	fa1f f48b 	uxth.w	r4, fp
 8002b6c:	ebaa 0509 	sub.w	r5, sl, r9
 8002b70:	18e1      	adds	r1, r4, r3
 8002b72:	b2ad      	uxth	r5, r5
 8002b74:	b289      	uxth	r1, r1
 8002b76:	4628      	mov	r0, r5
 8002b78:	463a      	mov	r2, r7
 8002b7a:	9101      	str	r1, [sp, #4]
 8002b7c:	f7ff fe96 	bl	80028ac <lcd_draw_point>
        lcd_draw_point(hwXpos + x, hwYpos + y, hwColor);
 8002b80:	eb09 000a 	add.w	r0, r9, sl
 8002b84:	9901      	ldr	r1, [sp, #4]
 8002b86:	b280      	uxth	r0, r0
 8002b88:	463a      	mov	r2, r7
 8002b8a:	9001      	str	r0, [sp, #4]
 8002b8c:	f7ff fe8e 	bl	80028ac <lcd_draw_point>
        lcd_draw_point(hwXpos + x, hwYpos - y, hwColor);
 8002b90:	9b00      	ldr	r3, [sp, #0]
 8002b92:	9801      	ldr	r0, [sp, #4]
 8002b94:	1b19      	subs	r1, r3, r4
 8002b96:	b289      	uxth	r1, r1
 8002b98:	463a      	mov	r2, r7
 8002b9a:	9101      	str	r1, [sp, #4]
 8002b9c:	f7ff fe86 	bl	80028ac <lcd_draw_point>
        lcd_draw_point(hwXpos - x, hwYpos - y, hwColor);
 8002ba0:	9901      	ldr	r1, [sp, #4]
 8002ba2:	463a      	mov	r2, r7
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	f7ff fe81 	bl	80028ac <lcd_draw_point>
        if (e2 <= y) {
 8002baa:	45b3      	cmp	fp, r6
 8002bac:	db19      	blt.n	8002be2 <lcd_draw_circle+0x9a>
            err += ++ y * 2 + 1;
 8002bae:	f10b 0b01 	add.w	fp, fp, #1
 8002bb2:	eb06 034b 	add.w	r3, r6, fp, lsl #1
            if(-x == y && e2 <= x) e2 = 0;
 8002bb6:	eb1b 0f08 	cmn.w	fp, r8
            err += ++ y * 2 + 1;
 8002bba:	f103 0301 	add.w	r3, r3, #1
            if(-x == y && e2 <= x) e2 = 0;
 8002bbe:	d012      	beq.n	8002be6 <lcd_draw_circle+0x9e>
        if(e2 > x) err += ++ x * 2 + 1;
 8002bc0:	45b0      	cmp	r8, r6
 8002bc2:	db01      	blt.n	8002bc8 <lcd_draw_circle+0x80>
{
 8002bc4:	461e      	mov	r6, r3
 8002bc6:	e7ce      	b.n	8002b66 <lcd_draw_circle+0x1e>
        if(e2 > x) err += ++ x * 2 + 1;
 8002bc8:	f108 0801 	add.w	r8, r8, #1
 8002bcc:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    } while(x <= 0);
 8002bd0:	f1b8 0f01 	cmp.w	r8, #1
        if(e2 > x) err += ++ x * 2 + 1;
 8002bd4:	f103 0301 	add.w	r3, r3, #1
    } while(x <= 0);
 8002bd8:	d009      	beq.n	8002bee <lcd_draw_circle+0xa6>
 8002bda:	fa1f f988 	uxth.w	r9, r8
{
 8002bde:	461e      	mov	r6, r3
 8002be0:	e7c1      	b.n	8002b66 <lcd_draw_circle+0x1e>
 8002be2:	4633      	mov	r3, r6
 8002be4:	e7ec      	b.n	8002bc0 <lcd_draw_circle+0x78>
            if(-x == y && e2 <= x) e2 = 0;
 8002be6:	45b0      	cmp	r8, r6
 8002be8:	dbee      	blt.n	8002bc8 <lcd_draw_circle+0x80>
 8002bea:	2600      	movs	r6, #0
 8002bec:	e7e8      	b.n	8002bc0 <lcd_draw_circle+0x78>
}
 8002bee:	b003      	add	sp, #12
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002bf4 <lcd_fill_rect>:
{
 8002bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf8:	f8bd a020 	ldrh.w	sl, [sp, #32]
	for(i = 0; i < hwHeight; i ++){
 8002bfc:	b1bb      	cbz	r3, 8002c2e <lcd_fill_rect+0x3a>
 8002bfe:	440b      	add	r3, r1
 8002c00:	1816      	adds	r6, r2, r0
 8002c02:	4681      	mov	r9, r0
 8002c04:	460d      	mov	r5, r1
 8002c06:	4690      	mov	r8, r2
 8002c08:	b29f      	uxth	r7, r3
 8002c0a:	b2b6      	uxth	r6, r6
		for(j = 0; j < hwWidth; j ++){
 8002c0c:	464c      	mov	r4, r9
 8002c0e:	f1b8 0f00 	cmp.w	r8, #0
 8002c12:	d008      	beq.n	8002c26 <lcd_fill_rect+0x32>
			lcd_draw_point(hwXpos + j, hwYpos + i, hwColor);
 8002c14:	4620      	mov	r0, r4
 8002c16:	3401      	adds	r4, #1
 8002c18:	4652      	mov	r2, sl
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	b2a4      	uxth	r4, r4
 8002c1e:	f7ff fe45 	bl	80028ac <lcd_draw_point>
		for(j = 0; j < hwWidth; j ++){
 8002c22:	42a6      	cmp	r6, r4
 8002c24:	d1f6      	bne.n	8002c14 <lcd_fill_rect+0x20>
	for(i = 0; i < hwHeight; i ++){
 8002c26:	3501      	adds	r5, #1
 8002c28:	b2ad      	uxth	r5, r5
 8002c2a:	42af      	cmp	r7, r5
 8002c2c:	d1ee      	bne.n	8002c0c <lcd_fill_rect+0x18>
}
 8002c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c32:	bf00      	nop

08002c34 <lcd_copy>:
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	9d04      	ldr	r5, [sp, #16]
 8002c38:	f8bd 6014 	ldrh.w	r6, [sp, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002c3c:	4c10      	ldr	r4, [pc, #64]	; (8002c80 <lcd_copy+0x4c>)
		lcd_set_window(x, y, xwindow, ywindow);
 8002c3e:	f7ff fd45 	bl	80026cc <lcd_set_window>
		lcd_write_byte(0x2C, LCD_CMD);
 8002c42:	2100      	movs	r1, #0
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	f7ff fb5f 	bl	8002308 <lcd_write_byte>
		HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c54:	f000 fefc 	bl	8003a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	f000 fef7 	bl	8003a50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002c62:	4632      	mov	r2, r6
 8002c64:	4629      	mov	r1, r5
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <lcd_copy+0x50>)
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6c:	f002 fce0 	bl	8005630 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002c70:	4620      	mov	r0, r4
 8002c72:	2201      	movs	r2, #1
}
 8002c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	f000 bee9 	b.w	8003a50 <HAL_GPIO_WritePin>
 8002c7e:	bf00      	nop
 8002c80:	48000400 	.word	0x48000400
 8002c84:	20000910 	.word	0x20000910

08002c88 <lcd_draw_image>:
void lcd_draw_image(uint8_t image){
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8c:	b083      	sub	sp, #12
	switch (image) {
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d04a      	beq.n	8002d28 <lcd_draw_image+0xa0>
 8002c92:	2801      	cmp	r0, #1
 8002c94:	d145      	bne.n	8002d22 <lcd_draw_image+0x9a>
 8002c96:	4e5c      	ldr	r6, [pc, #368]	; (8002e08 <lcd_draw_image+0x180>)
 8002c98:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002e24 <lcd_draw_image+0x19c>
 8002c9c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002e28 <lcd_draw_image+0x1a0>
 8002ca0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8002e2c <lcd_draw_image+0x1a4>
 8002ca4:	4f59      	ldr	r7, [pc, #356]	; (8002e0c <lcd_draw_image+0x184>)
					lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 8002ca6:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8002e14 <lcd_draw_image+0x18c>
	switch (image) {
 8002caa:	2400      	movs	r4, #0
				lcd_copy(0,60*i,320,60,&mainImg,sizeof(mainImg));
 8002cac:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 8002cb0:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002cb4:	0089      	lsls	r1, r1, #2
 8002cb6:	e9cd 6300 	strd	r6, r3, [sp]
 8002cba:	b289      	uxth	r1, r1
 8002cbc:	233c      	movs	r3, #60	; 0x3c
 8002cbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7ff ffb6 	bl	8002c34 <lcd_copy>
					lcd_copy(11, 181, 58, 58, &leftArrowImg, sizeof(leftArrowImg));
 8002cc8:	233a      	movs	r3, #58	; 0x3a
 8002cca:	f641 2548 	movw	r5, #6728	; 0x1a48
 8002cce:	461a      	mov	r2, r3
 8002cd0:	21b5      	movs	r1, #181	; 0xb5
 8002cd2:	200b      	movs	r0, #11
				if (i==0) {
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	d042      	beq.n	8002d5e <lcd_draw_image+0xd6>
				else if (i==1) {
 8002cd8:	2c01      	cmp	r4, #1
 8002cda:	f000 8087 	beq.w	8002dec <lcd_draw_image+0x164>
				else if (i==2) {
 8002cde:	2c02      	cmp	r4, #2
 8002ce0:	d061      	beq.n	8002da6 <lcd_draw_image+0x11e>
					lcd_copy(11, 181, 58, 58, &leftArrowImg, sizeof(leftArrowImg));
 8002ce2:	e9cd a500 	strd	sl, r5, [sp]
 8002ce6:	f7ff ffa5 	bl	8002c34 <lcd_copy>
					lcd_copy(91, 181, 58, 58, &playImg, sizeof(playImg));
 8002cea:	233a      	movs	r3, #58	; 0x3a
 8002cec:	461a      	mov	r2, r3
 8002cee:	21b5      	movs	r1, #181	; 0xb5
 8002cf0:	205b      	movs	r0, #91	; 0x5b
 8002cf2:	e9cd 9500 	strd	r9, r5, [sp]
 8002cf6:	f7ff ff9d 	bl	8002c34 <lcd_copy>
					lcd_copy(171, 181, 58, 58, &pauseImg, sizeof(pauseImg));
 8002cfa:	233a      	movs	r3, #58	; 0x3a
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	21b5      	movs	r1, #181	; 0xb5
 8002d00:	20ab      	movs	r0, #171	; 0xab
 8002d02:	e9cd 8500 	strd	r8, r5, [sp]
 8002d06:	f7ff ff95 	bl	8002c34 <lcd_copy>
					lcd_copy(251, 181, 58, 58, &rightArrowImg, sizeof(rightArrowImg));
 8002d0a:	233a      	movs	r3, #58	; 0x3a
 8002d0c:	e9cd 7500 	strd	r7, r5, [sp]
 8002d10:	461a      	mov	r2, r3
 8002d12:	21b5      	movs	r1, #181	; 0xb5
 8002d14:	20fb      	movs	r0, #251	; 0xfb
 8002d16:	f7ff ff8d 	bl	8002c34 <lcd_copy>
			for (int i = 0; i < 4; ++i) {
 8002d1a:	2c03      	cmp	r4, #3
 8002d1c:	d001      	beq.n	8002d22 <lcd_draw_image+0x9a>
 8002d1e:	3401      	adds	r4, #1
 8002d20:	e7c4      	b.n	8002cac <lcd_draw_image+0x24>
}
 8002d22:	b003      	add	sp, #12
 8002d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	4e37      	ldr	r6, [pc, #220]	; (8002e08 <lcd_draw_image+0x180>)
					lcd_copy(50, 60, 59, 58, &photoImg, sizeof(photoImg));
 8002d2a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002e30 <lcd_draw_image+0x1a8>
					lcd_copy(203, 60, 73, 58, &phonesImg, sizeof(phonesImg));
 8002d2e:	4f38      	ldr	r7, [pc, #224]	; (8002e10 <lcd_draw_image+0x188>)
					lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 8002d30:	4d38      	ldr	r5, [pc, #224]	; (8002e14 <lcd_draw_image+0x18c>)
	switch (image) {
 8002d32:	4604      	mov	r4, r0
				lcd_copy(0,60*i,320,60,&mainImg,sizeof(mainImg));
 8002d34:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 8002d38:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002d3c:	0089      	lsls	r1, r1, #2
 8002d3e:	e9cd 6300 	strd	r6, r3, [sp]
 8002d42:	b289      	uxth	r1, r1
 8002d44:	233c      	movs	r3, #60	; 0x3c
 8002d46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff ff72 	bl	8002c34 <lcd_copy>
				if (i==0) {
 8002d50:	b1ec      	cbz	r4, 8002d8e <lcd_draw_image+0x106>
				else if (i==1) {
 8002d52:	2c01      	cmp	r4, #1
 8002d54:	d035      	beq.n	8002dc2 <lcd_draw_image+0x13a>
			for (int i = 0; i < 4; ++i) {
 8002d56:	2c03      	cmp	r4, #3
 8002d58:	d0e3      	beq.n	8002d22 <lcd_draw_image+0x9a>
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	e7ea      	b.n	8002d34 <lcd_draw_image+0xac>
					lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 8002d5e:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 8002d62:	4621      	mov	r1, r4
 8002d64:	4620      	mov	r0, r4
 8002d66:	e9cd b300 	strd	fp, r3, [sp]
 8002d6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d6e:	2314      	movs	r3, #20
 8002d70:	f7ff ff60 	bl	8002c34 <lcd_copy>
					lcd_copy(5, 30, 24, 20, &backImg, sizeof(backImg));
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <lcd_draw_image+0x190>)
 8002d76:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8002d7a:	e9cd 3200 	strd	r3, r2, [sp]
 8002d7e:	211e      	movs	r1, #30
 8002d80:	2314      	movs	r3, #20
 8002d82:	2218      	movs	r2, #24
 8002d84:	2005      	movs	r0, #5
 8002d86:	f7ff ff55 	bl	8002c34 <lcd_copy>
 8002d8a:	3401      	adds	r4, #1
 8002d8c:	e78e      	b.n	8002cac <lcd_draw_image+0x24>
					lcd_copy(0, 0, 320, 20, &toolbarImg, sizeof(toolbarImg));
 8002d8e:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 8002d92:	e9cd 5300 	strd	r5, r3, [sp]
 8002d96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d9a:	2314      	movs	r3, #20
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff ff48 	bl	8002c34 <lcd_copy>
 8002da4:	e7d9      	b.n	8002d5a <lcd_draw_image+0xd2>
					lcd_copy(266, 120, 44, 44, &minusImg, sizeof(minusImg));
 8002da6:	491d      	ldr	r1, [pc, #116]	; (8002e1c <lcd_draw_image+0x194>)
 8002da8:	f44f 6272 	mov.w	r2, #3872	; 0xf20
 8002dac:	232c      	movs	r3, #44	; 0x2c
 8002dae:	e9cd 1200 	strd	r1, r2, [sp]
 8002db2:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8002db6:	461a      	mov	r2, r3
 8002db8:	2178      	movs	r1, #120	; 0x78
 8002dba:	f7ff ff3b 	bl	8002c34 <lcd_copy>
 8002dbe:	3401      	adds	r4, #1
 8002dc0:	e774      	b.n	8002cac <lcd_draw_image+0x24>
					lcd_copy(50, 60, 59, 58, &photoImg, sizeof(photoImg));
 8002dc2:	f641 23bc 	movw	r3, #6844	; 0x1abc
 8002dc6:	e9cd 8300 	strd	r8, r3, [sp]
 8002dca:	223b      	movs	r2, #59	; 0x3b
 8002dcc:	233a      	movs	r3, #58	; 0x3a
 8002dce:	213c      	movs	r1, #60	; 0x3c
 8002dd0:	2032      	movs	r0, #50	; 0x32
 8002dd2:	f7ff ff2f 	bl	8002c34 <lcd_copy>
					lcd_copy(203, 60, 73, 58, &phonesImg, sizeof(phonesImg));
 8002dd6:	f242 1314 	movw	r3, #8468	; 0x2114
 8002dda:	e9cd 7300 	strd	r7, r3, [sp]
 8002dde:	2249      	movs	r2, #73	; 0x49
 8002de0:	233a      	movs	r3, #58	; 0x3a
 8002de2:	213c      	movs	r1, #60	; 0x3c
 8002de4:	20cb      	movs	r0, #203	; 0xcb
 8002de6:	f7ff ff25 	bl	8002c34 <lcd_copy>
 8002dea:	e7b6      	b.n	8002d5a <lcd_draw_image+0xd2>
					lcd_copy(266, 60, 44, 44, &plusImg, sizeof(plusImg));
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <lcd_draw_image+0x198>)
 8002dee:	f44f 6272 	mov.w	r2, #3872	; 0xf20
 8002df2:	232c      	movs	r3, #44	; 0x2c
 8002df4:	e9cd 1200 	strd	r1, r2, [sp]
 8002df8:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	213c      	movs	r1, #60	; 0x3c
 8002e00:	f7ff ff18 	bl	8002c34 <lcd_copy>
 8002e04:	3401      	adds	r4, #1
 8002e06:	e751      	b.n	8002cac <lcd_draw_image+0x24>
 8002e08:	08024f14 	.word	0x08024f14
 8002e0c:	080373b4 	.word	0x080373b4
 8002e10:	08030e7c 	.word	0x08030e7c
 8002e14:	08038dfc 	.word	0x08038dfc
 8002e18:	0802310c 	.word	0x0802310c
 8002e1c:	0802e514 	.word	0x0802e514
 8002e20:	08036494 	.word	0x08036494
 8002e24:	080234cc 	.word	0x080234cc
 8002e28:	08034a4c 	.word	0x08034a4c
 8002e2c:	0802f434 	.word	0x0802f434
 8002e30:	08032f90 	.word	0x08032f90

08002e34 <setRotation>:
	if(ST7789V == lcd_id){
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <setRotation+0x10>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b52      	cmp	r3, #82	; 0x52
 8002e3a:	d000      	beq.n	8002e3e <setRotation+0xa>
}
 8002e3c:	4770      	bx	lr
 8002e3e:	f7ff ba8f 	b.w	8002360 <setRotation.part.0>
 8002e42:	bf00      	nop
 8002e44:	2000c458 	.word	0x2000c458

08002e48 <lcd_read_id>:
		}
    lcd_clear_screen(WHITE);
}

uint8_t lcd_read_id(void)
{
 8002e48:	b570      	push	{r4, r5, r6, lr}
	uint8_t reg = 0xDC;
	uint8_t tx_val = 0x00;
	uint8_t rx_val;
	__LCD_CS_CLR();
 8002e4a:	4d17      	ldr	r5, [pc, #92]	; (8002ea8 <lcd_read_id+0x60>)
	__LCD_DC_CLR();
	HAL_SPI_Transmit(&hspi1,&reg,1,0xff);
 8002e4c:	4e17      	ldr	r6, [pc, #92]	; (8002eac <lcd_read_id+0x64>)
{
 8002e4e:	b084      	sub	sp, #16
	uint8_t tx_val = 0x00;
 8002e50:	2400      	movs	r4, #0
	uint8_t reg = 0xDC;
 8002e52:	23dc      	movs	r3, #220	; 0xdc
	__LCD_CS_CLR();
 8002e54:	4628      	mov	r0, r5
 8002e56:	4622      	mov	r2, r4
 8002e58:	2140      	movs	r1, #64	; 0x40
	uint8_t reg = 0xDC;
 8002e5a:	f88d 300d 	strb.w	r3, [sp, #13]
	uint8_t tx_val = 0x00;
 8002e5e:	f88d 400e 	strb.w	r4, [sp, #14]
	__LCD_CS_CLR();
 8002e62:	f000 fdf5 	bl	8003a50 <HAL_GPIO_WritePin>
	__LCD_DC_CLR();
 8002e66:	4622      	mov	r2, r4
 8002e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e70:	f000 fdee 	bl	8003a50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&reg,1,0xff);
 8002e74:	f10d 010d 	add.w	r1, sp, #13
 8002e78:	4630      	mov	r0, r6
 8002e7a:	23ff      	movs	r3, #255	; 0xff
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f002 fbd7 	bl	8005630 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi1,&tx_val,&rx_val,1,0xff);
 8002e82:	23ff      	movs	r3, #255	; 0xff
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	f10d 020f 	add.w	r2, sp, #15
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f10d 010e 	add.w	r1, sp, #14
 8002e90:	4630      	mov	r0, r6
 8002e92:	f002 fcad 	bl	80057f0 <HAL_SPI_TransmitReceive>
	__LCD_CS_SET();
 8002e96:	4628      	mov	r0, r5
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2140      	movs	r1, #64	; 0x40
 8002e9c:	f000 fdd8 	bl	8003a50 <HAL_GPIO_WritePin>
	return rx_val;
}
 8002ea0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	20000910 	.word	0x20000910

08002eb0 <lcd_init>:
{
 8002eb0:	b508      	push	{r3, lr}
		__LCD_CS_SET();
 8002eb2:	48fc      	ldr	r0, [pc, #1008]	; (80032a4 <lcd_init+0x3f4>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	f000 fdca 	bl	8003a50 <HAL_GPIO_WritePin>
		__LCD_BKL_SET();
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	48fa      	ldr	r0, [pc, #1000]	; (80032a8 <lcd_init+0x3f8>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f000 fdc5 	bl	8003a50 <HAL_GPIO_WritePin>
		lcd_id = lcd_read_id();
 8002ec6:	f7ff ffbf 	bl	8002e48 <lcd_read_id>
 8002eca:	4bf8      	ldr	r3, [pc, #992]	; (80032ac <lcd_init+0x3fc>)
		if(ST7789V == lcd_id){
 8002ecc:	2852      	cmp	r0, #82	; 0x52
		lcd_id = lcd_read_id();
 8002ece:	7018      	strb	r0, [r3, #0]
			lcd_write_byte(0x11,LCD_CMD);
 8002ed0:	f04f 0100 	mov.w	r1, #0
		if(ST7789V == lcd_id){
 8002ed4:	f000 81ec 	beq.w	80032b0 <lcd_init+0x400>
	lcd_write_byte(chRegister, LCD_CMD);
 8002ed8:	20ea      	movs	r0, #234	; 0xea
 8002eda:	f7ff fa15 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff fa11 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	20eb      	movs	r0, #235	; 0xeb
 8002eea:	f7ff fa0d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2020      	movs	r0, #32
 8002ef2:	f7ff fa09 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	20ec      	movs	r0, #236	; 0xec
 8002efa:	f7ff fa05 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002efe:	2101      	movs	r1, #1
 8002f00:	200c      	movs	r0, #12
 8002f02:	f7ff fa01 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f06:	2100      	movs	r1, #0
 8002f08:	20ed      	movs	r0, #237	; 0xed
 8002f0a:	f7ff f9fd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	20c4      	movs	r0, #196	; 0xc4
 8002f12:	f7ff f9f9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f16:	2100      	movs	r1, #0
 8002f18:	20e8      	movs	r0, #232	; 0xe8
 8002f1a:	f7ff f9f5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f1e:	2101      	movs	r1, #1
 8002f20:	2038      	movs	r0, #56	; 0x38
 8002f22:	f7ff f9f1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f26:	2100      	movs	r1, #0
 8002f28:	20e9      	movs	r0, #233	; 0xe9
 8002f2a:	f7ff f9ed 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2010      	movs	r0, #16
 8002f32:	f7ff f9e9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f36:	2100      	movs	r1, #0
 8002f38:	20f1      	movs	r0, #241	; 0xf1
 8002f3a:	f7ff f9e5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4608      	mov	r0, r1
 8002f42:	f7ff f9e1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f46:	2100      	movs	r1, #0
 8002f48:	20f2      	movs	r0, #242	; 0xf2
 8002f4a:	f7ff f9dd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2010      	movs	r0, #16
 8002f52:	f7ff f9d9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f56:	2100      	movs	r1, #0
 8002f58:	2040      	movs	r0, #64	; 0x40
 8002f5a:	f7ff f9d5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4608      	mov	r0, r1
 8002f62:	f7ff f9d1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f66:	2100      	movs	r1, #0
 8002f68:	2041      	movs	r0, #65	; 0x41
 8002f6a:	f7ff f9cd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f6e:	2101      	movs	r1, #1
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff f9c9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f76:	2100      	movs	r1, #0
 8002f78:	2042      	movs	r0, #66	; 0x42
 8002f7a:	f7ff f9c5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f7e:	2101      	movs	r1, #1
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff f9c1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f86:	2100      	movs	r1, #0
 8002f88:	2043      	movs	r0, #67	; 0x43
 8002f8a:	f7ff f9bd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2010      	movs	r0, #16
 8002f92:	f7ff f9b9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002f96:	2100      	movs	r1, #0
 8002f98:	2044      	movs	r0, #68	; 0x44
 8002f9a:	f7ff f9b5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	200e      	movs	r0, #14
 8002fa2:	f7ff f9b1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2045      	movs	r0, #69	; 0x45
 8002faa:	f7ff f9ad 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002fae:	2101      	movs	r1, #1
 8002fb0:	2024      	movs	r0, #36	; 0x24
 8002fb2:	f7ff f9a9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2046      	movs	r0, #70	; 0x46
 8002fba:	f7ff f9a5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2004      	movs	r0, #4
 8002fc2:	f7ff f9a1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2047      	movs	r0, #71	; 0x47
 8002fca:	f7ff f99d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2050      	movs	r0, #80	; 0x50
 8002fd2:	f7ff f999 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2048      	movs	r0, #72	; 0x48
 8002fda:	f7ff f995 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	2002      	movs	r0, #2
 8002fe2:	f7ff f991 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2049      	movs	r0, #73	; 0x49
 8002fea:	f7ff f98d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2013      	movs	r0, #19
 8002ff2:	f7ff f989 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	204a      	movs	r0, #74	; 0x4a
 8002ffa:	f7ff f985 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8002ffe:	2101      	movs	r1, #1
 8003000:	2019      	movs	r0, #25
 8003002:	f7ff f981 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003006:	2100      	movs	r1, #0
 8003008:	204b      	movs	r0, #75	; 0x4b
 800300a:	f7ff f97d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800300e:	2101      	movs	r1, #1
 8003010:	2019      	movs	r0, #25
 8003012:	f7ff f979 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003016:	2100      	movs	r1, #0
 8003018:	204c      	movs	r0, #76	; 0x4c
 800301a:	f7ff f975 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800301e:	2101      	movs	r1, #1
 8003020:	2016      	movs	r0, #22
 8003022:	f7ff f971 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003026:	2100      	movs	r1, #0
 8003028:	2050      	movs	r0, #80	; 0x50
 800302a:	f7ff f96d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800302e:	2101      	movs	r1, #1
 8003030:	201b      	movs	r0, #27
 8003032:	f7ff f969 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003036:	2100      	movs	r1, #0
 8003038:	2051      	movs	r0, #81	; 0x51
 800303a:	f7ff f965 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800303e:	2101      	movs	r1, #1
 8003040:	2031      	movs	r0, #49	; 0x31
 8003042:	f7ff f961 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003046:	2100      	movs	r1, #0
 8003048:	2052      	movs	r0, #82	; 0x52
 800304a:	f7ff f95d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800304e:	2101      	movs	r1, #1
 8003050:	202f      	movs	r0, #47	; 0x2f
 8003052:	f7ff f959 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003056:	2100      	movs	r1, #0
 8003058:	2053      	movs	r0, #83	; 0x53
 800305a:	f7ff f955 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800305e:	2101      	movs	r1, #1
 8003060:	203f      	movs	r0, #63	; 0x3f
 8003062:	f7ff f951 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003066:	2100      	movs	r1, #0
 8003068:	2054      	movs	r0, #84	; 0x54
 800306a:	f7ff f94d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800306e:	2101      	movs	r1, #1
 8003070:	203f      	movs	r0, #63	; 0x3f
 8003072:	f7ff f949 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003076:	2100      	movs	r1, #0
 8003078:	2055      	movs	r0, #85	; 0x55
 800307a:	f7ff f945 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800307e:	2101      	movs	r1, #1
 8003080:	203e      	movs	r0, #62	; 0x3e
 8003082:	f7ff f941 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003086:	2100      	movs	r1, #0
 8003088:	2056      	movs	r0, #86	; 0x56
 800308a:	f7ff f93d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800308e:	2101      	movs	r1, #1
 8003090:	202f      	movs	r0, #47	; 0x2f
 8003092:	f7ff f939 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003096:	2100      	movs	r1, #0
 8003098:	2057      	movs	r0, #87	; 0x57
 800309a:	f7ff f935 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800309e:	2101      	movs	r1, #1
 80030a0:	207b      	movs	r0, #123	; 0x7b
 80030a2:	f7ff f931 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030a6:	2100      	movs	r1, #0
 80030a8:	2058      	movs	r0, #88	; 0x58
 80030aa:	f7ff f92d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030ae:	2101      	movs	r1, #1
 80030b0:	2009      	movs	r0, #9
 80030b2:	f7ff f929 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030b6:	2100      	movs	r1, #0
 80030b8:	2059      	movs	r0, #89	; 0x59
 80030ba:	f7ff f925 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030be:	2101      	movs	r1, #1
 80030c0:	2006      	movs	r0, #6
 80030c2:	f7ff f921 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030c6:	2100      	movs	r1, #0
 80030c8:	205a      	movs	r0, #90	; 0x5a
 80030ca:	f7ff f91d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030ce:	2101      	movs	r1, #1
 80030d0:	2006      	movs	r0, #6
 80030d2:	f7ff f919 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030d6:	2100      	movs	r1, #0
 80030d8:	205b      	movs	r0, #91	; 0x5b
 80030da:	f7ff f915 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030de:	2101      	movs	r1, #1
 80030e0:	200c      	movs	r0, #12
 80030e2:	f7ff f911 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030e6:	2100      	movs	r1, #0
 80030e8:	205c      	movs	r0, #92	; 0x5c
 80030ea:	f7ff f90d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030ee:	2101      	movs	r1, #1
 80030f0:	201d      	movs	r0, #29
 80030f2:	f7ff f909 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80030f6:	2100      	movs	r1, #0
 80030f8:	205d      	movs	r0, #93	; 0x5d
 80030fa:	f7ff f905 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80030fe:	2101      	movs	r1, #1
 8003100:	20cc      	movs	r0, #204	; 0xcc
 8003102:	f7ff f901 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003106:	2100      	movs	r1, #0
 8003108:	201b      	movs	r0, #27
 800310a:	f7ff f8fd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800310e:	2101      	movs	r1, #1
 8003110:	201b      	movs	r0, #27
 8003112:	f7ff f8f9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003116:	2100      	movs	r1, #0
 8003118:	201a      	movs	r0, #26
 800311a:	f7ff f8f5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800311e:	2101      	movs	r1, #1
 8003120:	4608      	mov	r0, r1
 8003122:	f7ff f8f1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003126:	2100      	movs	r1, #0
 8003128:	2024      	movs	r0, #36	; 0x24
 800312a:	f7ff f8ed 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800312e:	2101      	movs	r1, #1
 8003130:	202f      	movs	r0, #47	; 0x2f
 8003132:	f7ff f8e9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003136:	2100      	movs	r1, #0
 8003138:	2025      	movs	r0, #37	; 0x25
 800313a:	f7ff f8e5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800313e:	2101      	movs	r1, #1
 8003140:	2057      	movs	r0, #87	; 0x57
 8003142:	f7ff f8e1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003146:	2100      	movs	r1, #0
 8003148:	2023      	movs	r0, #35	; 0x23
 800314a:	f7ff f8dd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800314e:	2101      	movs	r1, #1
 8003150:	2088      	movs	r0, #136	; 0x88
 8003152:	f7ff f8d9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003156:	2100      	movs	r1, #0
 8003158:	2018      	movs	r0, #24
 800315a:	f7ff f8d5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800315e:	2101      	movs	r1, #1
 8003160:	2034      	movs	r0, #52	; 0x34
 8003162:	f7ff f8d1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003166:	2100      	movs	r1, #0
 8003168:	2019      	movs	r0, #25
 800316a:	f7ff f8cd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800316e:	2101      	movs	r1, #1
 8003170:	4608      	mov	r0, r1
 8003172:	f7ff f8c9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003176:	2100      	movs	r1, #0
 8003178:	2001      	movs	r0, #1
 800317a:	f7ff f8c5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800317e:	2101      	movs	r1, #1
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff f8c1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003186:	2100      	movs	r1, #0
 8003188:	201f      	movs	r0, #31
 800318a:	f7ff f8bd 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800318e:	2101      	movs	r1, #1
 8003190:	2088      	movs	r0, #136	; 0x88
 8003192:	f7ff f8b9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003196:	2100      	movs	r1, #0
 8003198:	201f      	movs	r0, #31
 800319a:	f7ff f8b5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800319e:	2101      	movs	r1, #1
 80031a0:	2080      	movs	r0, #128	; 0x80
 80031a2:	f7ff f8b1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031a6:	2100      	movs	r1, #0
 80031a8:	201f      	movs	r0, #31
 80031aa:	f7ff f8ad 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031ae:	2101      	movs	r1, #1
 80031b0:	2090      	movs	r0, #144	; 0x90
 80031b2:	f7ff f8a9 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031b6:	2100      	movs	r1, #0
 80031b8:	201f      	movs	r0, #31
 80031ba:	f7ff f8a5 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031be:	2101      	movs	r1, #1
 80031c0:	20d0      	movs	r0, #208	; 0xd0
 80031c2:	f7ff f8a1 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031c6:	2100      	movs	r1, #0
 80031c8:	2017      	movs	r0, #23
 80031ca:	f7ff f89d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031ce:	2101      	movs	r1, #1
 80031d0:	2005      	movs	r0, #5
 80031d2:	f7ff f899 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031d6:	2100      	movs	r1, #0
 80031d8:	2036      	movs	r0, #54	; 0x36
 80031da:	f7ff f895 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031de:	2101      	movs	r1, #1
 80031e0:	2002      	movs	r0, #2
 80031e2:	f7ff f891 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031e6:	2100      	movs	r1, #0
 80031e8:	2028      	movs	r0, #40	; 0x28
 80031ea:	f7ff f88d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031ee:	2101      	movs	r1, #1
 80031f0:	2038      	movs	r0, #56	; 0x38
 80031f2:	f7ff f889 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80031f6:	2100      	movs	r1, #0
 80031f8:	2028      	movs	r0, #40	; 0x28
 80031fa:	f7ff f885 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80031fe:	2101      	movs	r1, #1
 8003200:	203f      	movs	r0, #63	; 0x3f
 8003202:	f7ff f881 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003206:	2100      	movs	r1, #0
 8003208:	2016      	movs	r0, #22
 800320a:	f7ff f87d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800320e:	2101      	movs	r1, #1
 8003210:	2018      	movs	r0, #24
 8003212:	f7ff f879 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003216:	2100      	movs	r1, #0
 8003218:	2002      	movs	r0, #2
 800321a:	f7ff f875 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800321e:	2101      	movs	r1, #1
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff f871 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003226:	2100      	movs	r1, #0
 8003228:	2003      	movs	r0, #3
 800322a:	f7ff f86d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800322e:	2101      	movs	r1, #1
 8003230:	2000      	movs	r0, #0
 8003232:	f7ff f869 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003236:	2100      	movs	r1, #0
 8003238:	2004      	movs	r0, #4
 800323a:	f7ff f865 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800323e:	2101      	movs	r1, #1
 8003240:	2000      	movs	r0, #0
 8003242:	f7ff f861 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003246:	2100      	movs	r1, #0
 8003248:	2005      	movs	r0, #5
 800324a:	f7ff f85d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800324e:	2101      	movs	r1, #1
 8003250:	20ef      	movs	r0, #239	; 0xef
 8003252:	f7ff f859 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003256:	2100      	movs	r1, #0
 8003258:	2006      	movs	r0, #6
 800325a:	f7ff f855 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800325e:	2101      	movs	r1, #1
 8003260:	2000      	movs	r0, #0
 8003262:	f7ff f851 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003266:	2100      	movs	r1, #0
 8003268:	2007      	movs	r0, #7
 800326a:	f7ff f84d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800326e:	2101      	movs	r1, #1
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff f849 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003276:	2100      	movs	r1, #0
 8003278:	2008      	movs	r0, #8
 800327a:	f7ff f845 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800327e:	2101      	movs	r1, #1
 8003280:	4608      	mov	r0, r1
 8003282:	f7ff f841 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003286:	2100      	movs	r1, #0
 8003288:	2009      	movs	r0, #9
 800328a:	f7ff f83d 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800328e:	203f      	movs	r0, #63	; 0x3f
 8003290:	2101      	movs	r1, #1
 8003292:	f7ff f839 	bl	8002308 <lcd_write_byte>
}
 8003296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lcd_clear_screen(WHITE);
 800329a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800329e:	f7ff b9ab 	b.w	80025f8 <lcd_clear_screen>
 80032a2:	bf00      	nop
 80032a4:	48000400 	.word	0x48000400
 80032a8:	48000800 	.word	0x48000800
 80032ac:	2000c458 	.word	0x2000c458
			lcd_write_byte(0x11,LCD_CMD);
 80032b0:	2011      	movs	r0, #17
 80032b2:	f7ff f829 	bl	8002308 <lcd_write_byte>
			HAL_Delay(100);
 80032b6:	2064      	movs	r0, #100	; 0x64
 80032b8:	f000 f93e 	bl	8003538 <HAL_Delay>
	lcd_write_byte(chRegister, LCD_CMD);
 80032bc:	2100      	movs	r1, #0
 80032be:	2036      	movs	r0, #54	; 0x36
 80032c0:	f7ff f822 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80032c4:	2101      	movs	r1, #1
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff f81e 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 80032cc:	2100      	movs	r1, #0
 80032ce:	203a      	movs	r0, #58	; 0x3a
 80032d0:	f7ff f81a 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80032d4:	2101      	movs	r1, #1
 80032d6:	2055      	movs	r0, #85	; 0x55
 80032d8:	f7ff f816 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xb2,LCD_CMD);
 80032dc:	2100      	movs	r1, #0
 80032de:	20b2      	movs	r0, #178	; 0xb2
 80032e0:	f7ff f812 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0c,LCD_DATA);
 80032e4:	2101      	movs	r1, #1
 80032e6:	200c      	movs	r0, #12
 80032e8:	f7ff f80e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0c,LCD_DATA);
 80032ec:	2101      	movs	r1, #1
 80032ee:	200c      	movs	r0, #12
 80032f0:	f7ff f80a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 80032f4:	2101      	movs	r1, #1
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7ff f806 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x33,LCD_DATA);
 80032fc:	2101      	movs	r1, #1
 80032fe:	2033      	movs	r0, #51	; 0x33
 8003300:	f7ff f802 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x33,LCD_DATA);
 8003304:	2101      	movs	r1, #1
 8003306:	2033      	movs	r0, #51	; 0x33
 8003308:	f7fe fffe 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800330c:	2100      	movs	r1, #0
 800330e:	20b7      	movs	r0, #183	; 0xb7
 8003310:	f7fe fffa 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003314:	2101      	movs	r1, #1
 8003316:	2035      	movs	r0, #53	; 0x35
 8003318:	f7fe fff6 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800331c:	2100      	movs	r1, #0
 800331e:	20bb      	movs	r0, #187	; 0xbb
 8003320:	f7fe fff2 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003324:	2101      	movs	r1, #1
 8003326:	2028      	movs	r0, #40	; 0x28
 8003328:	f7fe ffee 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800332c:	2100      	movs	r1, #0
 800332e:	20c0      	movs	r0, #192	; 0xc0
 8003330:	f7fe ffea 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003334:	2101      	movs	r1, #1
 8003336:	203c      	movs	r0, #60	; 0x3c
 8003338:	f7fe ffe6 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800333c:	2100      	movs	r1, #0
 800333e:	20c2      	movs	r0, #194	; 0xc2
 8003340:	f7fe ffe2 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003344:	2101      	movs	r1, #1
 8003346:	4608      	mov	r0, r1
 8003348:	f7fe ffde 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800334c:	2100      	movs	r1, #0
 800334e:	20c3      	movs	r0, #195	; 0xc3
 8003350:	f7fe ffda 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003354:	2101      	movs	r1, #1
 8003356:	200b      	movs	r0, #11
 8003358:	f7fe ffd6 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800335c:	2100      	movs	r1, #0
 800335e:	20c4      	movs	r0, #196	; 0xc4
 8003360:	f7fe ffd2 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003364:	2101      	movs	r1, #1
 8003366:	2020      	movs	r0, #32
 8003368:	f7fe ffce 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 800336c:	2100      	movs	r1, #0
 800336e:	20c6      	movs	r0, #198	; 0xc6
 8003370:	f7fe ffca 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8003374:	2101      	movs	r1, #1
 8003376:	200f      	movs	r0, #15
 8003378:	f7fe ffc6 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xD0,LCD_CMD);
 800337c:	2100      	movs	r1, #0
 800337e:	20d0      	movs	r0, #208	; 0xd0
 8003380:	f7fe ffc2 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xa4,LCD_DATA);
 8003384:	2101      	movs	r1, #1
 8003386:	20a4      	movs	r0, #164	; 0xa4
 8003388:	f7fe ffbe 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xa1,LCD_DATA);
 800338c:	2101      	movs	r1, #1
 800338e:	20a1      	movs	r0, #161	; 0xa1
 8003390:	f7fe ffba 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xe0,LCD_CMD);
 8003394:	2100      	movs	r1, #0
 8003396:	20e0      	movs	r0, #224	; 0xe0
 8003398:	f7fe ffb6 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xd0,LCD_DATA);
 800339c:	2101      	movs	r1, #1
 800339e:	20d0      	movs	r0, #208	; 0xd0
 80033a0:	f7fe ffb2 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x01,LCD_DATA);
 80033a4:	2101      	movs	r1, #1
 80033a6:	4608      	mov	r0, r1
 80033a8:	f7fe ffae 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x08,LCD_DATA);
 80033ac:	2101      	movs	r1, #1
 80033ae:	2008      	movs	r0, #8
 80033b0:	f7fe ffaa 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0f,LCD_DATA);
 80033b4:	2101      	movs	r1, #1
 80033b6:	200f      	movs	r0, #15
 80033b8:	f7fe ffa6 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x11,LCD_DATA);
 80033bc:	2101      	movs	r1, #1
 80033be:	2011      	movs	r0, #17
 80033c0:	f7fe ffa2 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x2a,LCD_DATA);
 80033c4:	2101      	movs	r1, #1
 80033c6:	202a      	movs	r0, #42	; 0x2a
 80033c8:	f7fe ff9e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x36,LCD_DATA);
 80033cc:	2101      	movs	r1, #1
 80033ce:	2036      	movs	r0, #54	; 0x36
 80033d0:	f7fe ff9a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x55,LCD_DATA);
 80033d4:	2101      	movs	r1, #1
 80033d6:	2055      	movs	r0, #85	; 0x55
 80033d8:	f7fe ff96 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x44,LCD_DATA);
 80033dc:	2101      	movs	r1, #1
 80033de:	2044      	movs	r0, #68	; 0x44
 80033e0:	f7fe ff92 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x3a,LCD_DATA);
 80033e4:	2101      	movs	r1, #1
 80033e6:	203a      	movs	r0, #58	; 0x3a
 80033e8:	f7fe ff8e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0b,LCD_DATA);
 80033ec:	2101      	movs	r1, #1
 80033ee:	200b      	movs	r0, #11
 80033f0:	f7fe ff8a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x06,LCD_DATA);
 80033f4:	2101      	movs	r1, #1
 80033f6:	2006      	movs	r0, #6
 80033f8:	f7fe ff86 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x11,LCD_DATA);
 80033fc:	2101      	movs	r1, #1
 80033fe:	2011      	movs	r0, #17
 8003400:	f7fe ff82 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x20,LCD_DATA);
 8003404:	2101      	movs	r1, #1
 8003406:	2020      	movs	r0, #32
 8003408:	f7fe ff7e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xe1,LCD_CMD);
 800340c:	2100      	movs	r1, #0
 800340e:	20e1      	movs	r0, #225	; 0xe1
 8003410:	f7fe ff7a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0xd0,LCD_DATA);
 8003414:	2101      	movs	r1, #1
 8003416:	20d0      	movs	r0, #208	; 0xd0
 8003418:	f7fe ff76 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x02,LCD_DATA);
 800341c:	2101      	movs	r1, #1
 800341e:	2002      	movs	r0, #2
 8003420:	f7fe ff72 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x07,LCD_DATA);
 8003424:	2101      	movs	r1, #1
 8003426:	2007      	movs	r0, #7
 8003428:	f7fe ff6e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0a,LCD_DATA);
 800342c:	2101      	movs	r1, #1
 800342e:	200a      	movs	r0, #10
 8003430:	f7fe ff6a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x0b,LCD_DATA);
 8003434:	2101      	movs	r1, #1
 8003436:	200b      	movs	r0, #11
 8003438:	f7fe ff66 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x18,LCD_DATA);
 800343c:	2101      	movs	r1, #1
 800343e:	2018      	movs	r0, #24
 8003440:	f7fe ff62 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x34,LCD_DATA);
 8003444:	2101      	movs	r1, #1
 8003446:	2034      	movs	r0, #52	; 0x34
 8003448:	f7fe ff5e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x43,LCD_DATA);
 800344c:	2101      	movs	r1, #1
 800344e:	2043      	movs	r0, #67	; 0x43
 8003450:	f7fe ff5a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x4a,LCD_DATA);
 8003454:	2101      	movs	r1, #1
 8003456:	204a      	movs	r0, #74	; 0x4a
 8003458:	f7fe ff56 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x2b,LCD_DATA);
 800345c:	2101      	movs	r1, #1
 800345e:	202b      	movs	r0, #43	; 0x2b
 8003460:	f7fe ff52 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x1b,LCD_DATA);
 8003464:	2101      	movs	r1, #1
 8003466:	201b      	movs	r0, #27
 8003468:	f7fe ff4e 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x1c,LCD_DATA);
 800346c:	2101      	movs	r1, #1
 800346e:	201c      	movs	r0, #28
 8003470:	f7fe ff4a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x22,LCD_DATA);
 8003474:	2101      	movs	r1, #1
 8003476:	2022      	movs	r0, #34	; 0x22
 8003478:	f7fe ff46 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x1f,LCD_DATA);
 800347c:	2101      	movs	r1, #1
 800347e:	201f      	movs	r0, #31
 8003480:	f7fe ff42 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chRegister, LCD_CMD);
 8003484:	2100      	movs	r1, #0
 8003486:	2055      	movs	r0, #85	; 0x55
 8003488:	f7fe ff3e 	bl	8002308 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 800348c:	2101      	movs	r1, #1
 800348e:	20b0      	movs	r0, #176	; 0xb0
 8003490:	f7fe ff3a 	bl	8002308 <lcd_write_byte>
			lcd_write_byte(0x29,LCD_CMD);
 8003494:	2029      	movs	r0, #41	; 0x29
 8003496:	2100      	movs	r1, #0
 8003498:	f7fe ff36 	bl	8002308 <lcd_write_byte>
}
 800349c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lcd_clear_screen(WHITE);
 80034a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80034a4:	f7ff b8a8 	b.w	80025f8 <lcd_clear_screen>

080034a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_InitTick+0x3c>)
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_InitTick+0x40>)
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
{
 80034b2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034b8:	fbb0 f0f2 	udiv	r0, r0, r2
 80034bc:	fbb3 f0f0 	udiv	r0, r3, r0
 80034c0:	f000 f8ba 	bl	8003638 <HAL_SYSTICK_Config>
 80034c4:	b908      	cbnz	r0, 80034ca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c6:	2d0f      	cmp	r5, #15
 80034c8:	d901      	bls.n	80034ce <HAL_InitTick+0x26>
    return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80034cc:	bd38      	pop	{r3, r4, r5, pc}
 80034ce:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034d0:	4602      	mov	r2, r0
 80034d2:	4629      	mov	r1, r5
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f000 f854 	bl	8003584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_InitTick+0x44>)
 80034de:	4620      	mov	r0, r4
 80034e0:	601d      	str	r5, [r3, #0]
}
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	20000078 	.word	0x20000078
 80034e8:	20000074 	.word	0x20000074
 80034ec:	2000007c 	.word	0x2000007c

080034f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_Init+0x20>)
{
 80034f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f043 0310 	orr.w	r3, r3, #16
 80034fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 f82d 	bl	800355c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003502:	2000      	movs	r0, #0
 8003504:	f7ff ffd0 	bl	80034a8 <HAL_InitTick>
  HAL_MspInit();
 8003508:	f7fe f91c 	bl	8001744 <HAL_MspInit>
}
 800350c:	2000      	movs	r0, #0
 800350e:	bd08      	pop	{r3, pc}
 8003510:	40022000 	.word	0x40022000

08003514 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_IncTick+0x10>)
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_IncTick+0x14>)
 8003518:	6811      	ldr	r1, [r2, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	440b      	add	r3, r1
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000c45c 	.word	0x2000c45c
 8003528:	20000078 	.word	0x20000078

0800352c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <HAL_GetTick+0x8>)
 800352e:	6818      	ldr	r0, [r3, #0]
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	2000c45c 	.word	0x2000c45c

08003538 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff fff6 	bl	800352c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003540:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003542:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003544:	d002      	beq.n	800354c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_Delay+0x20>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800354c:	f7ff ffee 	bl	800352c <HAL_GetTick>
 8003550:	1b43      	subs	r3, r0, r5
 8003552:	42a3      	cmp	r3, r4
 8003554:	d3fa      	bcc.n	800354c <HAL_Delay+0x14>
  {
  }
}
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	20000078 	.word	0x20000078

0800355c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4908      	ldr	r1, [pc, #32]	; (8003580 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800355e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003562:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003564:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8003568:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800356a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003578:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800357c:	60cb      	str	r3, [r1, #12]
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_NVIC_SetPriority+0x68>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358e:	f1c3 0507 	rsb	r5, r3, #7
 8003592:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003594:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	bf28      	it	cs
 800359a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359c:	2c06      	cmp	r4, #6
 800359e:	d919      	bls.n	80035d4 <HAL_NVIC_SetPriority+0x50>
 80035a0:	3b03      	subs	r3, #3
 80035a2:	f04f 34ff 	mov.w	r4, #4294967295
 80035a6:	409c      	lsls	r4, r3
 80035a8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 34ff 	mov.w	r4, #4294967295
 80035b0:	40ac      	lsls	r4, r5
 80035b2:	ea21 0104 	bic.w	r1, r1, r4
 80035b6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80035b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ba:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80035be:	db0c      	blt.n	80035da <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035c8:	0109      	lsls	r1, r1, #4
 80035ca:	b2c9      	uxtb	r1, r1
 80035cc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035d0:	bc30      	pop	{r4, r5}
 80035d2:	4770      	bx	lr
 80035d4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	4613      	mov	r3, r2
 80035d8:	e7e8      	b.n	80035ac <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_NVIC_SetPriority+0x6c>)
 80035dc:	f000 000f 	and.w	r0, r0, #15
 80035e0:	0109      	lsls	r1, r1, #4
 80035e2:	4403      	add	r3, r0
 80035e4:	b2c9      	uxtb	r1, r1
 80035e6:	7619      	strb	r1, [r3, #24]
 80035e8:	bc30      	pop	{r4, r5}
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	e000ecfc 	.word	0xe000ecfc

080035f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035f4:	2800      	cmp	r0, #0
 80035f6:	db07      	blt.n	8003608 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f8:	f000 011f 	and.w	r1, r0, #31
 80035fc:	4a03      	ldr	r2, [pc, #12]	; (800360c <HAL_NVIC_EnableIRQ+0x18>)
 80035fe:	0940      	lsrs	r0, r0, #5
 8003600:	2301      	movs	r3, #1
 8003602:	408b      	lsls	r3, r1
 8003604:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003610:	2800      	cmp	r0, #0
 8003612:	db0d      	blt.n	8003630 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003614:	0943      	lsrs	r3, r0, #5
 8003616:	4907      	ldr	r1, [pc, #28]	; (8003634 <HAL_NVIC_DisableIRQ+0x24>)
 8003618:	3320      	adds	r3, #32
 800361a:	2201      	movs	r2, #1
 800361c:	f000 001f 	and.w	r0, r0, #31
 8003620:	fa02 f000 	lsl.w	r0, r2, r0
 8003624:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800362c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003638:	3801      	subs	r0, #1
 800363a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800363e:	d20e      	bcs.n	800365e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003642:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	4c08      	ldr	r4, [pc, #32]	; (8003668 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003646:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	20f0      	movs	r0, #240	; 0xf0
 800364a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800364e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003650:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003652:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8003656:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	6019      	str	r1, [r3, #0]
 800365c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2001      	movs	r0, #1
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000e010 	.word	0xe000e010
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800366c:	2800      	cmp	r0, #0
 800366e:	d032      	beq.n	80036d6 <HAL_DMA_Init+0x6a>
{ 
 8003670:	b430      	push	{r4, r5}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003672:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003676:	e9d0 5103 	ldrd	r5, r1, [r0, #12]
 800367a:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 800367c:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	2402      	movs	r4, #2
  tmp = hdma->Instance->CCR;
 8003680:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003682:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003688:	e9d3 4505 	ldrd	r4, r5, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	4322      	orrs	r2, r4
  tmp = hdma->Instance->CCR;
 8003690:	6801      	ldr	r1, [r0, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8003692:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003694:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003696:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003698:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800369c:	4c0f      	ldr	r4, [pc, #60]	; (80036dc <HAL_DMA_Init+0x70>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800369e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80036a2:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a4:	42a0      	cmp	r0, r4
  hdma->Instance->CCR = tmp;  
 80036a6:	6002      	str	r2, [r0, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a8:	d910      	bls.n	80036cc <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036aa:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_DMA_Init+0x74>)
 80036ac:	490d      	ldr	r1, [pc, #52]	; (80036e4 <HAL_DMA_Init+0x78>)
    hdma->DmaBaseAddress = DMA2;
 80036ae:	4c0e      	ldr	r4, [pc, #56]	; (80036e8 <HAL_DMA_Init+0x7c>)
 80036b0:	63dc      	str	r4, [r3, #60]	; 0x3c
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036b2:	4402      	add	r2, r0
 80036b4:	fba1 1202 	umull	r1, r2, r1, r2
 80036b8:	0912      	lsrs	r2, r2, #4
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->Lock = HAL_UNLOCKED;
 80036be:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80036c4:	841a      	strh	r2, [r3, #32]
}  
 80036c6:	bc30      	pop	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	6398      	str	r0, [r3, #56]	; 0x38
}  
 80036ca:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_DMA_Init+0x80>)
 80036ce:	4905      	ldr	r1, [pc, #20]	; (80036e4 <HAL_DMA_Init+0x78>)
    hdma->DmaBaseAddress = DMA1;
 80036d0:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
 80036d4:	e7ec      	b.n	80036b0 <HAL_DMA_Init+0x44>
    return HAL_ERROR;
 80036d6:	2001      	movs	r0, #1
}  
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40020407 	.word	0x40020407
 80036e0:	bffdfbf8 	.word	0xbffdfbf8
 80036e4:	cccccccd 	.word	0xcccccccd
 80036e8:	40020400 	.word	0x40020400
 80036ec:	bffdfff8 	.word	0xbffdfff8

080036f0 <HAL_DMA_Start_IT>:
{
 80036f0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80036f2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80036f6:	2c01      	cmp	r4, #1
 80036f8:	d039      	beq.n	800376e <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80036fa:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80036fe:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003700:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003702:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003706:	d005      	beq.n	8003714 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003708:	2300      	movs	r3, #0
 800370a:	f880 3020 	strb.w	r3, [r0, #32]
} 
 800370e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8003710:	2002      	movs	r0, #2
} 
 8003712:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003714:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003718:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 800371a:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371e:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003720:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003722:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003724:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003728:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800372a:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800372e:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003730:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003732:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003734:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8003736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003738:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 800373a:	bf0b      	itete	eq
 800373c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800373e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003740:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003742:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003744:	b153      	cbz	r3, 800375c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	f043 030e 	orr.w	r3, r3, #14
 800374c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003756:	2000      	movs	r0, #0
} 
 8003758:	bcf0      	pop	{r4, r5, r6, r7}
 800375a:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f043 030a 	orr.w	r3, r3, #10
 8003762:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	e7ef      	b.n	800374e <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 800376e:	2002      	movs	r0, #2
} 
 8003770:	bcf0      	pop	{r4, r5, r6, r7}
 8003772:	4770      	bx	lr

08003774 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003774:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003778:	2a02      	cmp	r2, #2
{
 800377a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377c:	d006      	beq.n	800378c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377e:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003780:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003782:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003784:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003788:	2001      	movs	r0, #1
}
 800378a:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800378c:	6802      	ldr	r2, [r0, #0]
{
 800378e:	b430      	push	{r4, r5}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003790:	6c04      	ldr	r4, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003792:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003794:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003796:	f020 000e 	bic.w	r0, r0, #14
 800379a:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800379c:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800379e:	2101      	movs	r1, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037a0:	f020 0001 	bic.w	r0, r0, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037a4:	40a1      	lsls	r1, r4
  __HAL_UNLOCK(hdma);
 80037a6:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037aa:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037ac:	6069      	str	r1, [r5, #4]
  __HAL_UNLOCK(hdma);
 80037ae:	841c      	strh	r4, [r3, #32]
  return HAL_OK;
 80037b0:	2000      	movs	r0, #0
}
 80037b2:	bc30      	pop	{r4, r5}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <HAL_DMA_IRQHandler>:
{
 80037b8:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037ba:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 80037be:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80037c2:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037c4:	4093      	lsls	r3, r2
 80037c6:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 80037c8:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_IRQHandler+0x32>
 80037cc:	f015 0f04 	tst.w	r5, #4
 80037d0:	d00b      	beq.n	80037ea <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	0692      	lsls	r2, r2, #26
 80037d6:	d403      	bmi.n	80037e0 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80037e2:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	b1ca      	cbz	r2, 800381a <HAL_DMA_IRQHandler+0x62>
}  
 80037e6:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 80037e8:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80037ea:	2302      	movs	r3, #2
 80037ec:	4093      	lsls	r3, r2
 80037ee:	420b      	tst	r3, r1
 80037f0:	d015      	beq.n	800381e <HAL_DMA_IRQHandler+0x66>
 80037f2:	f015 0f02 	tst.w	r5, #2
 80037f6:	d012      	beq.n	800381e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	0692      	lsls	r2, r2, #26
 80037fc:	d406      	bmi.n	800380c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80037fe:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003800:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003802:	f022 020a 	bic.w	r2, r2, #10
 8003806:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003808:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 800380c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800380e:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8003810:	2300      	movs	r3, #0
 8003812:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8003816:	2a00      	cmp	r2, #0
 8003818:	d1e5      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x2e>
}  
 800381a:	bc70      	pop	{r4, r5, r6}
 800381c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800381e:	2308      	movs	r3, #8
 8003820:	4093      	lsls	r3, r2
 8003822:	420b      	tst	r3, r1
 8003824:	d0f9      	beq.n	800381a <HAL_DMA_IRQHandler+0x62>
 8003826:	072b      	lsls	r3, r5, #28
 8003828:	d5f7      	bpl.n	800381a <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800382a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 800382c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800382e:	f023 030e 	bic.w	r3, r3, #14
 8003832:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003834:	2301      	movs	r3, #1
 8003836:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800383a:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800383e:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003840:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8003842:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8003844:	2900      	cmp	r1, #0
 8003846:	d0e8      	beq.n	800381a <HAL_DMA_IRQHandler+0x62>
}  
 8003848:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800384a:	4708      	bx	r1

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003850:	680c      	ldr	r4, [r1, #0]
{
 8003852:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003854:	2c00      	cmp	r4, #0
 8003856:	f000 8084 	beq.w	8003962 <HAL_GPIO_Init+0x116>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385a:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8003a40 <HAL_GPIO_Init+0x1f4>
  uint32_t position = 0x00u;
 800385e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003860:	f04f 0a01 	mov.w	sl, #1
 8003864:	4688      	mov	r8, r1
 8003866:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent != 0x00u)
 800386a:	ea1c 0904 	ands.w	r9, ip, r4
 800386e:	d074      	beq.n	800395a <HAL_GPIO_Init+0x10e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003874:	f005 0203 	and.w	r2, r5, #3
 8003878:	1e51      	subs	r1, r2, #1
 800387a:	2901      	cmp	r1, #1
 800387c:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8003880:	d972      	bls.n	8003968 <HAL_GPIO_Init+0x11c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003882:	2a03      	cmp	r2, #3
 8003884:	f040 80b1 	bne.w	80039ea <HAL_GPIO_Init+0x19e>
 8003888:	40ba      	lsls	r2, r7
 800388a:	43d1      	mvns	r1, r2
 800388c:	9100      	str	r1, [sp, #0]
      temp = GPIOx->MODER;
 800388e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003890:	9900      	ldr	r1, [sp, #0]
 8003892:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003894:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003896:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800389a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800389c:	d05d      	beq.n	800395a <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389e:	4961      	ldr	r1, [pc, #388]	; (8003a24 <HAL_GPIO_Init+0x1d8>)
 80038a0:	698a      	ldr	r2, [r1, #24]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	618a      	str	r2, [r1, #24]
 80038a8:	698a      	ldr	r2, [r1, #24]
 80038aa:	f023 0603 	bic.w	r6, r3, #3
 80038ae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80038b2:	f002 0201 	and.w	r2, r2, #1
 80038b6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80038ba:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038bc:	f003 0103 	and.w	r1, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80038c2:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038c4:	0089      	lsls	r1, r1, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	408a      	lsls	r2, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ce:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d2:	d01b      	beq.n	800390c <HAL_GPIO_Init+0xc0>
 80038d4:	4f54      	ldr	r7, [pc, #336]	; (8003a28 <HAL_GPIO_Init+0x1dc>)
 80038d6:	42b8      	cmp	r0, r7
 80038d8:	f000 8091 	beq.w	80039fe <HAL_GPIO_Init+0x1b2>
 80038dc:	4f53      	ldr	r7, [pc, #332]	; (8003a2c <HAL_GPIO_Init+0x1e0>)
 80038de:	42b8      	cmp	r0, r7
 80038e0:	f000 8091 	beq.w	8003a06 <HAL_GPIO_Init+0x1ba>
 80038e4:	4f52      	ldr	r7, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x1e4>)
 80038e6:	42b8      	cmp	r0, r7
 80038e8:	f000 8084 	beq.w	80039f4 <HAL_GPIO_Init+0x1a8>
 80038ec:	4f51      	ldr	r7, [pc, #324]	; (8003a34 <HAL_GPIO_Init+0x1e8>)
 80038ee:	42b8      	cmp	r0, r7
 80038f0:	f000 808e 	beq.w	8003a10 <HAL_GPIO_Init+0x1c4>
 80038f4:	4f50      	ldr	r7, [pc, #320]	; (8003a38 <HAL_GPIO_Init+0x1ec>)
 80038f6:	42b8      	cmp	r0, r7
 80038f8:	f000 808f 	beq.w	8003a1a <HAL_GPIO_Init+0x1ce>
 80038fc:	4f4f      	ldr	r7, [pc, #316]	; (8003a3c <HAL_GPIO_Init+0x1f0>)
 80038fe:	42b8      	cmp	r0, r7
 8003900:	bf0c      	ite	eq
 8003902:	2706      	moveq	r7, #6
 8003904:	2707      	movne	r7, #7
 8003906:	fa07 f101 	lsl.w	r1, r7, r1
 800390a:	430a      	orrs	r2, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800390c:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 800390e:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 8003912:	ea6f 0609 	mvn.w	r6, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003916:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8003918:	bf54      	ite	pl
 800391a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800391c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 8003920:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR;
 8003924:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003928:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 800392a:	bf54      	ite	pl
 800392c:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 800392e:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->EMR = temp;
 8003932:	f8cb 1004 	str.w	r1, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003936:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800393a:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 800393c:	bf54      	ite	pl
 800393e:	4031      	andpl	r1, r6
        {
          temp |= iocurrent;
 8003940:	ea49 0101 	orrmi.w	r1, r9, r1
        }
        EXTI->RTSR = temp;
 8003944:	f8cb 1008 	str.w	r1, [fp, #8]

        temp = EXTI->FTSR;
 8003948:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800394c:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 800394e:	bf54      	ite	pl
 8003950:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003952:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR = temp;
 8003956:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 800395a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800395c:	fa34 f203 	lsrs.w	r2, r4, r3
 8003960:	d181      	bne.n	8003866 <HAL_GPIO_Init+0x1a>
  }
}
 8003962:	b005      	add	sp, #20
 8003964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003968:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800396a:	2103      	movs	r1, #3
 800396c:	40b9      	lsls	r1, r7
 800396e:	ea26 0e01 	bic.w	lr, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003972:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003976:	40be      	lsls	r6, r7
 8003978:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 800397c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800397e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003982:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003986:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800398a:	409e      	lsls	r6, r3
 800398c:	ea46 060c 	orr.w	r6, r6, ip
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003990:	43c9      	mvns	r1, r1
 8003992:	9100      	str	r1, [sp, #0]
        GPIOx->OTYPER = temp;
 8003994:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003996:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003998:	9900      	ldr	r1, [sp, #0]
 800399a:	ea06 0c01 	and.w	ip, r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800399e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80039a2:	40be      	lsls	r6, r7
 80039a4:	ea46 060c 	orr.w	r6, r6, ip
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80039aa:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ac:	d001      	beq.n	80039b2 <HAL_GPIO_Init+0x166>
 80039ae:	40ba      	lsls	r2, r7
 80039b0:	e76d      	b.n	800388e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3u];
 80039b2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80039b6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ba:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80039be:	f8de 1020 	ldr.w	r1, [lr, #32]
 80039c2:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80039c8:	210f      	movs	r1, #15
 80039ca:	fa01 f60c 	lsl.w	r6, r1, ip
 80039ce:	9901      	ldr	r1, [sp, #4]
 80039d0:	ea21 0606 	bic.w	r6, r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d4:	f8d8 1010 	ldr.w	r1, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039d8:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039da:	fa01 f60c 	lsl.w	r6, r1, ip
 80039de:	9901      	ldr	r1, [sp, #4]
 80039e0:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 80039e2:	40ba      	lsls	r2, r7
 80039e4:	f8ce 6020 	str.w	r6, [lr, #32]
 80039e8:	e751      	b.n	800388e <HAL_GPIO_Init+0x42>
 80039ea:	2103      	movs	r1, #3
 80039ec:	40b9      	lsls	r1, r7
 80039ee:	43c9      	mvns	r1, r1
 80039f0:	9100      	str	r1, [sp, #0]
 80039f2:	e7d0      	b.n	8003996 <HAL_GPIO_Init+0x14a>
 80039f4:	2703      	movs	r7, #3
 80039f6:	fa07 f101 	lsl.w	r1, r7, r1
 80039fa:	430a      	orrs	r2, r1
 80039fc:	e786      	b.n	800390c <HAL_GPIO_Init+0xc0>
 80039fe:	fa0a f101 	lsl.w	r1, sl, r1
 8003a02:	430a      	orrs	r2, r1
 8003a04:	e782      	b.n	800390c <HAL_GPIO_Init+0xc0>
 8003a06:	2702      	movs	r7, #2
 8003a08:	fa07 f101 	lsl.w	r1, r7, r1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	e77d      	b.n	800390c <HAL_GPIO_Init+0xc0>
 8003a10:	2704      	movs	r7, #4
 8003a12:	fa07 f101 	lsl.w	r1, r7, r1
 8003a16:	430a      	orrs	r2, r1
 8003a18:	e778      	b.n	800390c <HAL_GPIO_Init+0xc0>
 8003a1a:	2705      	movs	r7, #5
 8003a1c:	fa07 f101 	lsl.w	r1, r7, r1
 8003a20:	430a      	orrs	r2, r1
 8003a22:	e773      	b.n	800390c <HAL_GPIO_Init+0xc0>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	48000400 	.word	0x48000400
 8003a2c:	48000800 	.word	0x48000800
 8003a30:	48000c00 	.word	0x48000c00
 8003a34:	48001000 	.word	0x48001000
 8003a38:	48001400 	.word	0x48001400
 8003a3c:	48001800 	.word	0x48001800
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a44:	6903      	ldr	r3, [r0, #16]
 8003a46:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a48:	bf14      	ite	ne
 8003a4a:	2001      	movne	r0, #1
 8003a4c:	2000      	moveq	r0, #0
 8003a4e:	4770      	bx	lr

08003a50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a50:	b10a      	cbz	r2, 8003a56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a52:	6181      	str	r1, [r0, #24]
 8003a54:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a56:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003a5e:	6951      	ldr	r1, [r2, #20]
 8003a60:	4201      	tst	r1, r0
 8003a62:	d100      	bne.n	8003a66 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003a64:	4770      	bx	lr
{
 8003a66:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a68:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a6a:	f7fd fbc3 	bl	80011f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a6e:	bd08      	pop	{r3, pc}
 8003a70:	40010400 	.word	0x40010400

08003a74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a76:	6804      	ldr	r4, [r0, #0]
{
 8003a78:	4606      	mov	r6, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7a:	69a0      	ldr	r0, [r4, #24]
 8003a7c:	f010 0010 	ands.w	r0, r0, #16
 8003a80:	d031      	beq.n	8003ae6 <I2C_IsAcknowledgeFailed+0x72>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	460d      	mov	r5, r1
 8003a88:	4617      	mov	r7, r2
 8003a8a:	d408      	bmi.n	8003a9e <I2C_IsAcknowledgeFailed+0x2a>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a8c:	6863      	ldr	r3, [r4, #4]
 8003a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a92:	6063      	str	r3, [r4, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a94:	69a3      	ldr	r3, [r4, #24]
 8003a96:	0699      	lsls	r1, r3, #26
 8003a98:	d404      	bmi.n	8003aa4 <I2C_IsAcknowledgeFailed+0x30>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a9a:	1c68      	adds	r0, r5, #1
 8003a9c:	d124      	bne.n	8003ae8 <I2C_IsAcknowledgeFailed+0x74>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9e:	69a3      	ldr	r3, [r4, #24]
 8003aa0:	0699      	lsls	r1, r3, #26
 8003aa2:	d5fa      	bpl.n	8003a9a <I2C_IsAcknowledgeFailed+0x26>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa8:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aaa:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003aac:	69a3      	ldr	r3, [r4, #24]
 8003aae:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8003ab0:	bf44      	itt	mi
 8003ab2:	2300      	movmi	r3, #0
 8003ab4:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab6:	69a3      	ldr	r3, [r4, #24]
 8003ab8:	07db      	lsls	r3, r3, #31
 8003aba:	d403      	bmi.n	8003ac4 <I2C_IsAcknowledgeFailed+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003abc:	69a3      	ldr	r3, [r4, #24]
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <I2C_IsAcknowledgeFailed+0x8c>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003acc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad6:	6473      	str	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41

    return HAL_ERROR;
 8003ae0:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
  }
  return HAL_OK;
}
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff fd20 	bl	800352c <HAL_GetTick>
 8003aec:	1bc0      	subs	r0, r0, r7
 8003aee:	4285      	cmp	r5, r0
 8003af0:	d302      	bcc.n	8003af8 <I2C_IsAcknowledgeFailed+0x84>
 8003af2:	b10d      	cbz	r5, 8003af8 <I2C_IsAcknowledgeFailed+0x84>
 8003af4:	6834      	ldr	r4, [r6, #0]
 8003af6:	e7d2      	b.n	8003a9e <I2C_IsAcknowledgeFailed+0x2a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	430b      	orrs	r3, r1
 8003afe:	e7e9      	b.n	8003ad4 <I2C_IsAcknowledgeFailed+0x60>
 8003b00:	fe00e800 	.word	0xfe00e800

08003b04 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	460d      	mov	r5, r1
 8003b0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0c:	e004      	b.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	f7ff ffb1 	bl	8003a74 <I2C_IsAcknowledgeFailed>
 8003b12:	b950      	cbnz	r0, 8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	1c6a      	adds	r2, r5, #1
 8003b16:	d10a      	bne.n	8003b2e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	079b      	lsls	r3, r3, #30
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	4632      	mov	r2, r6
 8003b20:	4629      	mov	r1, r5
 8003b22:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b24:	d5f3      	bpl.n	8003b0e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b2a:	2001      	movs	r0, #1
}
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7ff fcfd 	bl	800352c <HAL_GetTick>
 8003b32:	1b80      	subs	r0, r0, r6
 8003b34:	42a8      	cmp	r0, r5
 8003b36:	d801      	bhi.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	d1ed      	bne.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003b46:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003b52:	2001      	movs	r0, #1
}
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
 8003b56:	bf00      	nop

08003b58 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b60:	e008      	b.n	8003b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	f7ff ff87 	bl	8003a74 <I2C_IsAcknowledgeFailed>
 8003b66:	b9d8      	cbnz	r0, 8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7ff fce0 	bl	800352c <HAL_GetTick>
 8003b6c:	1b80      	subs	r0, r0, r6
 8003b6e:	42a0      	cmp	r0, r4
 8003b70:	d809      	bhi.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003b72:	b144      	cbz	r4, 8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	069b      	lsls	r3, r3, #26
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b80:	d5ef      	bpl.n	8003b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8003b82:	2000      	movs	r0, #0
}
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b86:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003b90:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003b9c:	2001      	movs	r0, #1
}
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003ba0:	2001      	movs	r0, #1
}
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}

08003ba4 <I2C_WaitOnFlagUntilTimeout>:
{
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	4680      	mov	r8, r0
 8003baa:	460f      	mov	r7, r1
 8003bac:	4616      	mov	r6, r2
 8003bae:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb4:	e001      	b.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	1c6a      	adds	r2, r5, #1
 8003bb8:	d10a      	bne.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bba:	699c      	ldr	r4, [r3, #24]
 8003bbc:	ea37 0204 	bics.w	r2, r7, r4
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2401      	moveq	r4, #1
 8003bc4:	2400      	movne	r4, #0
 8003bc6:	42b4      	cmp	r4, r6
 8003bc8:	d0f5      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8003bca:	2000      	movs	r0, #0
}
 8003bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7ff fcac 	bl	800352c <HAL_GetTick>
 8003bd4:	9b06      	ldr	r3, [sp, #24]
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	42a8      	cmp	r0, r5
 8003bda:	d801      	bhi.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	d1e7      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	430b      	orrs	r3, r1
 8003bea:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003bee:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8003bf6:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
        return HAL_ERROR;
 8003bfc:	e7e6      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0x28>
 8003bfe:	bf00      	nop

08003c00 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d04f      	beq.n	8003ca4 <HAL_I2C_Init+0xa4>
{
 8003c04:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d042      	beq.n	8003c9a <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c16:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	2224      	movs	r2, #36	; 0x24
 8003c1a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003c1e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c20:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003c22:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003c2a:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c2c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c30:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c36:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c38:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	d02a      	beq.n	8003c92 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c40:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c42:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c44:	bf04      	itt	eq
 8003c46:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003c4a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c4c:	6859      	ldr	r1, [r3, #4]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c4e:	69a5      	ldr	r5, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c50:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c54:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003c58:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003c5c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5e:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c60:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c62:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c64:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c68:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c6a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c6e:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c70:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c72:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c74:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003c76:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8003c7a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8003c80:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c82:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c88:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8003c8e:	4610      	mov	r0, r2
}
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c96:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c98:	e7d8      	b.n	8003c4c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8003c9a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003c9e:	f7fd f857 	bl	8000d50 <HAL_I2C_MspInit>
 8003ca2:	e7b7      	b.n	8003c14 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003ca4:	2001      	movs	r0, #1
}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_Master_Transmit>:
{
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cae:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8003cb2:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb4:	2820      	cmp	r0, #32
{
 8003cb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb8:	f040 8097 	bne.w	8003dea <HAL_I2C_Master_Transmit+0x142>
 8003cbc:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003cbe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f000 8091 	beq.w	8003dea <HAL_I2C_Master_Transmit+0x142>
 8003cc8:	f04f 0a01 	mov.w	sl, #1
 8003ccc:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003cd0:	460f      	mov	r7, r1
 8003cd2:	4690      	mov	r8, r2
 8003cd4:	f7ff fc2a 	bl	800352c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cd8:	4652      	mov	r2, sl
    tickstart = HAL_GetTick();
 8003cda:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cdc:	9000      	str	r0, [sp, #0]
 8003cde:	2319      	movs	r3, #25
 8003ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff ff5d 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d179      	bne.n	8003de2 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cee:	2321      	movs	r3, #33	; 0x21
 8003cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003cfc:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003d02:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8003d0a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	d871      	bhi.n	8003df2 <HAL_I2C_Master_Transmit+0x14a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d0e:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003d10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8003d12:	4946      	ldr	r1, [pc, #280]	; (8003e2c <HAL_I2C_Master_Transmit+0x184>)
 8003d14:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003d16:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8003d18:	4019      	ands	r1, r3
 8003d1a:	fa5f fc82 	uxtb.w	ip, r2
 8003d1e:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8003d22:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003d26:	430b      	orrs	r3, r1
 8003d28:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 8003d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 8003d30:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8003d32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003d36:	6043      	str	r3, [r0, #4]
    while (hi2c->XferCount > 0U)
 8003d38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d03c      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x112>
  MODIFY_REG(hi2c->Instance->CR2,
 8003d40:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003e38 <HAL_I2C_Master_Transmit+0x190>
 8003d44:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003e3c <HAL_I2C_Master_Transmit+0x194>
 8003d48:	e003      	b.n	8003d52 <HAL_I2C_Master_Transmit+0xaa>
    while (hi2c->XferCount > 0U)
 8003d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d033      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x112>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	462a      	mov	r2, r5
 8003d54:	4631      	mov	r1, r6
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff fed4 	bl	8003b04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d140      	bne.n	8003de2 <HAL_I2C_Master_Transmit+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d6e:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d78:	3a01      	subs	r2, #1
 8003d7a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d7c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003d7e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0e2      	beq.n	8003d4a <HAL_I2C_Master_Transmit+0xa2>
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d1e0      	bne.n	8003d4a <HAL_I2C_Master_Transmit+0xa2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d88:	9500      	str	r5, [sp, #0]
 8003d8a:	4633      	mov	r3, r6
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f7ff ff08 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d94:	22ff      	movs	r2, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	bb20      	cbnz	r0, 8003de2 <HAL_I2C_Master_Transmit+0x13a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d936      	bls.n	8003e0e <HAL_I2C_Master_Transmit+0x166>
  MODIFY_REG(hi2c->Instance->CR2,
 8003da0:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8003da4:	684b      	ldr	r3, [r1, #4]
 8003da6:	ea03 0308 	and.w	r3, r3, r8
 8003daa:	433b      	orrs	r3, r7
 8003dac:	ea43 0309 	orr.w	r3, r3, r9
 8003db0:	604b      	str	r3, [r1, #4]
    while (hi2c->XferCount > 0U)
 8003db2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cb      	bne.n	8003d52 <HAL_I2C_Master_Transmit+0xaa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7ff feca 	bl	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc4:	b968      	cbnz	r0, 8003de2 <HAL_I2C_Master_Transmit+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003dc8:	4d19      	ldr	r5, [pc, #100]	; (8003e30 <HAL_I2C_Master_Transmit+0x188>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dca:	2120      	movs	r1, #32
 8003dcc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	402a      	ands	r2, r5
 8003dd2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003dd8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ddc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003de0:	e000      	b.n	8003de4 <HAL_I2C_Master_Transmit+0x13c>
      return HAL_ERROR;
 8003de2:	2001      	movs	r0, #1
}
 8003de4:	b002      	add	sp, #8
 8003de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8003dea:	2002      	movs	r0, #2
}
 8003dec:	b002      	add	sp, #8
 8003dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 8003df2:	6821      	ldr	r1, [r4, #0]
 8003df4:	480d      	ldr	r0, [pc, #52]	; (8003e2c <HAL_I2C_Master_Transmit+0x184>)
 8003df6:	684b      	ldr	r3, [r1, #4]
 8003df8:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_I2C_Master_Transmit+0x18c>)
 8003dfa:	4003      	ands	r3, r0
 8003dfc:	f3c7 0009 	ubfx	r0, r7, #0, #10
 8003e00:	4303      	orrs	r3, r0
 8003e02:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e04:	23ff      	movs	r3, #255	; 0xff
 8003e06:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8003e08:	4607      	mov	r7, r0
 8003e0a:	604a      	str	r2, [r1, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003e0c:	e794      	b.n	8003d38 <HAL_I2C_Master_Transmit+0x90>
          hi2c->XferSize = hi2c->XferCount;
 8003e0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8003e10:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003e12:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8003e14:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003e16:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8003e1e:	ea02 0208 	and.w	r2, r2, r8
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e28:	604b      	str	r3, [r1, #4]
}
 8003e2a:	e78e      	b.n	8003d4a <HAL_I2C_Master_Transmit+0xa2>
 8003e2c:	fc009800 	.word	0xfc009800
 8003e30:	fe00e800 	.word	0xfe00e800
 8003e34:	81ff2000 	.word	0x81ff2000
 8003e38:	fc009c00 	.word	0xfc009c00
 8003e3c:	01ff0000 	.word	0x01ff0000

08003e40 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003e44:	2a20      	cmp	r2, #32
 8003e46:	d121      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 8003e48:	b430      	push	{r4, r5}
 8003e4a:	b2d4      	uxtb	r4, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003e50:	2a01      	cmp	r2, #1
 8003e52:	4603      	mov	r3, r0
 8003e54:	d01c      	beq.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e56:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	2024      	movs	r0, #36	; 0x24
 8003e5a:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003e5e:	6810      	ldr	r0, [r2, #0]
 8003e60:	f020 0001 	bic.w	r0, r0, #1
 8003e64:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e66:	6810      	ldr	r0, [r2, #0]
 8003e68:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003e6c:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6e:	6810      	ldr	r0, [r2, #0]
 8003e70:	4301      	orrs	r1, r0
 8003e72:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e74:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e76:	2500      	movs	r5, #0
    __HAL_I2C_ENABLE(hi2c);
 8003e78:	f041 0101 	orr.w	r1, r1, #1
 8003e7c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003e82:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40

    return HAL_OK;
 8003e86:	4628      	mov	r0, r5
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003e88:	bc30      	pop	{r4, r5}
 8003e8a:	4770      	bx	lr
    return HAL_BUSY;
 8003e8c:	2002      	movs	r0, #2
}
 8003e8e:	4770      	bx	lr
    return HAL_BUSY;
 8003e90:	2002      	movs	r0, #2
}
 8003e92:	bc30      	pop	{r4, r5}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003e9c:	2a20      	cmp	r2, #32
 8003e9e:	d120      	bne.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 8003ea0:	b430      	push	{r4, r5}
 8003ea2:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	4603      	mov	r3, r0
 8003eac:	d01b      	beq.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eae:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	2024      	movs	r0, #36	; 0x24
 8003eb2:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003eb6:	6810      	ldr	r0, [r2, #0]
 8003eb8:	f020 0001 	bic.w	r0, r0, #1
 8003ebc:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ebe:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ec0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ec4:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eca:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8003ece:	f041 0101 	orr.w	r1, r1, #1
 8003ed2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003ed8:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40

    return HAL_OK;
 8003edc:	4620      	mov	r0, r4
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003ede:	bc30      	pop	{r4, r5}
 8003ee0:	4770      	bx	lr
    return HAL_BUSY;
 8003ee2:	2002      	movs	r0, #2
}
 8003ee4:	4770      	bx	lr
    return HAL_BUSY;
 8003ee6:	2002      	movs	r0, #2
}
 8003ee8:	bc30      	pop	{r4, r5}
 8003eea:	4770      	bx	lr

08003eec <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_I2CEx_EnableFastModePlus+0x24>)

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003eee:	4909      	ldr	r1, [pc, #36]	; (8003f14 <HAL_I2CEx_EnableFastModePlus+0x28>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	699b      	ldr	r3, [r3, #24]
{
 8003efa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003f04:	680b      	ldr	r3, [r1, #0]
 8003f06:	4318      	orrs	r0, r3
 8003f08:	6008      	str	r0, [r1, #0]
}
 8003f0a:	b002      	add	sp, #8
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40010000 	.word	0x40010000

08003f18 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	460e      	mov	r6, r1
 8003f20:	4615      	mov	r5, r2
 8003f22:	461f      	mov	r7, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f24:	f7ff fb02 	bl	800352c <HAL_GetTick>
 8003f28:	4681      	mov	r9, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f2e:	e001      	b.n	8003f34 <I2S_WaitFlagStateUntilTimeout+0x1c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	1c7a      	adds	r2, r7, #1
 8003f32:	d10a      	bne.n	8003f4a <I2S_WaitFlagStateUntilTimeout+0x32>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003f34:	689c      	ldr	r4, [r3, #8]
 8003f36:	ea36 0204 	bics.w	r2, r6, r4
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2401      	moveq	r4, #1
 8003f3e:	2400      	movne	r4, #0
 8003f40:	42ac      	cmp	r4, r5
 8003f42:	d1f5      	bne.n	8003f30 <I2S_WaitFlagStateUntilTimeout+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003f44:	2000      	movs	r0, #0
}
 8003f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003f4a:	f7ff faef 	bl	800352c <HAL_GetTick>
 8003f4e:	eba0 0009 	sub.w	r0, r0, r9
 8003f52:	42b8      	cmp	r0, r7
 8003f54:	d3e9      	bcc.n	8003f2a <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8003f56:	2201      	movs	r2, #1
        __HAL_UNLOCK(hi2s);
 8003f58:	2300      	movs	r3, #0
        hi2s->State = HAL_I2S_STATE_READY;
 8003f5a:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        return HAL_TIMEOUT;
 8003f5e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hi2s);
 8003f60:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_TIMEOUT;
 8003f64:	e7ef      	b.n	8003f46 <I2S_WaitFlagStateUntilTimeout+0x2e>
 8003f66:	bf00      	nop

08003f68 <HAL_I2S_Init>:
  if (hi2s == NULL)
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f000 809f 	beq.w	80040ac <HAL_I2S_Init+0x144>
{
 8003f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003f74:	b097      	sub	sp, #92	; 0x5c
 8003f76:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d07f      	beq.n	8004080 <HAL_I2S_Init+0x118>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f80:	6821      	ldr	r1, [r4, #0]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f82:	6963      	ldr	r3, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f84:	2202      	movs	r2, #2
 8003f86:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f8a:	69c8      	ldr	r0, [r1, #28]
 8003f8c:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8003f90:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f94:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f96:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8003f98:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f9a:	d06f      	beq.n	800407c <HAL_I2S_Init+0x114>
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f9c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      packetlength = 32U;
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2510      	moveq	r5, #16
 8003fa6:	2520      	movne	r5, #32
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fa8:	2b20      	cmp	r3, #32
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003faa:	69e3      	ldr	r3, [r4, #28]
      packetlength = packetlength * 2U;
 8003fac:	bf98      	it	ls
 8003fae:	006d      	lslls	r5, r5, #1
    rccperiphclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003fb4:	2b01      	cmp	r3, #1
    rccperiphclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003fb6:	9200      	str	r2, [sp, #0]
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8003fb8:	d069      	beq.n	800408e <HAL_I2S_Init+0x126>
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8003fba:	2300      	movs	r3, #0
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 8003fbc:	4668      	mov	r0, sp
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8003fbe:	930c      	str	r3, [sp, #48]	; 0x30
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 8003fc0:	f001 f874 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
      i2sclk = HAL_RCC_GetSysClockFreq();
 8003fc4:	f000 ff52 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fc8:	6922      	ldr	r2, [r4, #16]
 8003fca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003fce:	d069      	beq.n	80040a4 <HAL_I2S_Init+0x13c>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fd0:	fbb0 f0f5 	udiv	r0, r0, r5
    tmp = tmp / 10U;
 8003fd4:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_I2S_Init+0x14c>)
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fda:	0043      	lsls	r3, r0, #1
 8003fdc:	6960      	ldr	r0, [r4, #20]
 8003fde:	fbb3 f3f0 	udiv	r3, r3, r0
 8003fe2:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8003fe4:	fba1 1303 	umull	r1, r3, r1, r3
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003fe8:	0919      	lsrs	r1, r3, #4
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003fea:	1e88      	subs	r0, r1, #2
 8003fec:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003fee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ff2:	d83c      	bhi.n	800406e <HAL_I2S_Init+0x106>
 8003ff4:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003ff8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ffa:	68e6      	ldr	r6, [r4, #12]
 8003ffc:	69a5      	ldr	r5, [r4, #24]
 8003ffe:	4f2e      	ldr	r7, [pc, #184]	; (80040b8 <HAL_I2S_Init+0x150>)
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004000:	4313      	orrs	r3, r2
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004002:	e9d4 c001 	ldrd	ip, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004006:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004008:	69cb      	ldr	r3, [r1, #28]
 800400a:	ea4c 0200 	orr.w	r2, ip, r0
 800400e:	403b      	ands	r3, r7
 8004010:	4313      	orrs	r3, r2
 8004012:	4333      	orrs	r3, r6
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004014:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004016:	432b      	orrs	r3, r5
 8004018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800401c:	2a01      	cmp	r2, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800401e:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004020:	d11e      	bne.n	8004060 <HAL_I2S_Init+0xf8>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004022:	4a26      	ldr	r2, [pc, #152]	; (80040bc <HAL_I2S_Init+0x154>)
 8004024:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <HAL_I2S_Init+0x158>)
 8004026:	4291      	cmp	r1, r2
 8004028:	bf0c      	ite	eq
 800402a:	4619      	moveq	r1, r3
 800402c:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004030:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_I2S_Init+0x15c>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004032:	69cb      	ldr	r3, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004034:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004036:	401f      	ands	r7, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004038:	f43c 7200 	bics.w	r2, ip, #512	; 0x200
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800403c:	f04f 0202 	mov.w	r2, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004040:	61cf      	str	r7, [r1, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004042:	ea40 0006 	orr.w	r0, r0, r6
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004046:	620a      	str	r2, [r1, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004048:	bf0c      	ite	eq
 800404a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800404e:	2300      	movne	r3, #0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004050:	69ca      	ldr	r2, [r1, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004052:	4303      	orrs	r3, r0
 8004054:	432b      	orrs	r3, r5
 8004056:	4313      	orrs	r3, r2
 8004058:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800405a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405e:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004060:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8004062:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004064:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004066:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800406a:	b017      	add	sp, #92	; 0x5c
 800406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800406e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8004070:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004072:	f043 0310 	orr.w	r3, r3, #16
 8004076:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004078:	b017      	add	sp, #92	; 0x5c
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	e7bc      	b.n	8003ffa <HAL_I2S_Init+0x92>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_I2S_Init+0x160>)
    hi2s->Lock = HAL_UNLOCKED;
 8004082:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004086:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8004088:	f7fc fed4 	bl	8000e34 <HAL_I2S_MspInit>
 800408c:	e778      	b.n	8003f80 <HAL_I2S_Init+0x18>
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_EXT;
 800408e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 8004092:	4668      	mov	r0, sp
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_EXT;
 8004094:	930c      	str	r3, [sp, #48]	; 0x30
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 8004096:	f001 f809 	bl	80050ac <HAL_RCCEx_PeriphCLKConfig>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800409a:	6922      	ldr	r2, [r4, #16]
      i2sclk = EXTERNAL_CLOCK_VALUE;
 800409c:	480b      	ldr	r0, [pc, #44]	; (80040cc <HAL_I2S_Init+0x164>)
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800409e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80040a2:	d195      	bne.n	8003fd0 <HAL_I2S_Init+0x68>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	b11b      	cbz	r3, 80040b0 <HAL_I2S_Init+0x148>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040a8:	00ad      	lsls	r5, r5, #2
 80040aa:	e791      	b.n	8003fd0 <HAL_I2S_Init+0x68>
    return HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
}
 80040ae:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040b0:	00ed      	lsls	r5, r5, #3
 80040b2:	e78d      	b.n	8003fd0 <HAL_I2S_Init+0x68>
 80040b4:	cccccccd 	.word	0xcccccccd
 80040b8:	fffff040 	.word	0xfffff040
 80040bc:	40003800 	.word	0x40003800
 80040c0:	40003400 	.word	0x40003400
 80040c4:	0800463d 	.word	0x0800463d
 80040c8:	08004509 	.word	0x08004509
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0U))
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d03f      	beq.n	8004154 <HAL_I2S_Transmit_DMA+0x84>
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d03d      	beq.n	8004154 <HAL_I2S_Transmit_DMA+0x84>
{
 80040d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2s);
 80040da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80040de:	2b01      	cmp	r3, #1
 80040e0:	4604      	mov	r4, r0
 80040e2:	d03e      	beq.n	8004162 <HAL_I2S_Transmit_DMA+0x92>
 80040e4:	2301      	movs	r3, #1
 80040e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 80040ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d139      	bne.n	8004166 <HAL_I2S_Transmit_DMA+0x96>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80040f2:	2003      	movs	r0, #3
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040f4:	2300      	movs	r3, #0
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80040f6:	6825      	ldr	r5, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80040f8:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040fc:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80040fe:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 8004100:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004102:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004106:	4283      	cmp	r3, r0
 8004108:	d026      	beq.n	8004158 <HAL_I2S_Transmit_DMA+0x88>
 800410a:	2b05      	cmp	r3, #5
 800410c:	d024      	beq.n	8004158 <HAL_I2S_Transmit_DMA+0x88>
    hi2s->TxXferSize = Size;
 800410e:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004110:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004112:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_I2S_Transmit_DMA+0xb8>)
                                 hi2s->TxXferSize))
 8004116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004118:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_I2S_Transmit_DMA+0xbc>)
 800411c:	6282      	str	r2, [r0, #40]	; 0x28
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_I2S_Transmit_DMA+0xc0>)
 8004120:	6302      	str	r2, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004122:	b29b      	uxth	r3, r3
 8004124:	f105 020c 	add.w	r2, r5, #12
 8004128:	f7ff fae2 	bl	80036f0 <HAL_DMA_Start_IT>
 800412c:	bb00      	cbnz	r0, 8004170 <HAL_I2S_Transmit_DMA+0xa0>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	0551      	lsls	r1, r2, #21
 8004134:	d403      	bmi.n	800413e <HAL_I2S_Transmit_DMA+0x6e>
    __HAL_I2S_ENABLE(hi2s);
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800413c:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	0792      	lsls	r2, r2, #30
 8004142:	d403      	bmi.n	800414c <HAL_I2S_Transmit_DMA+0x7c>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	f042 0202 	orr.w	r2, r2, #2
 800414a:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 800414c:	2300      	movs	r3, #0
 800414e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004152:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 8004154:	2001      	movs	r0, #1
}
 8004156:	4770      	bx	lr
    hi2s->TxXferSize = (Size << 1U);
 8004158:	0053      	lsls	r3, r2, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800415e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004160:	e7d7      	b.n	8004112 <HAL_I2S_Transmit_DMA+0x42>
  __HAL_LOCK(hi2s);
 8004162:	2002      	movs	r0, #2
}
 8004164:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hi2s);
 8004166:	2300      	movs	r3, #0
 8004168:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 800416c:	2002      	movs	r0, #2
}
 800416e:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004170:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004172:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004174:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 8004178:	2100      	movs	r1, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800417a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800417c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8004180:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004184:	4610      	mov	r0, r2
}
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	080044d5 	.word	0x080044d5
 800418c:	080044e1 	.word	0x080044e1
 8004190:	08004611 	.word	0x08004611

08004194 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8004194:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004198:	2b01      	cmp	r3, #1
 800419a:	d03e      	beq.n	800421a <HAL_I2S_DMAPause+0x86>
 800419c:	2301      	movs	r3, #1
 800419e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d00c      	beq.n	80041c4 <HAL_I2S_DMAPause+0x30>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80041aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d012      	beq.n	80041d8 <HAL_I2S_DMAPause+0x44>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80041b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d018      	beq.n	80041ec <HAL_I2S_DMAPause+0x58>
  __HAL_UNLOCK(hi2s);
 80041ba:	2300      	movs	r3, #0
 80041bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80041c0:	4618      	mov	r0, r3
}
 80041c2:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	6853      	ldr	r3, [r2, #4]
 80041c8:	f023 0302 	bic.w	r3, r3, #2
 80041cc:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 80041ce:	2300      	movs	r3, #0
 80041d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80041d4:	4618      	mov	r0, r3
}
 80041d6:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	6853      	ldr	r3, [r2, #4]
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 80041e2:	2300      	movs	r3, #0
 80041e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80041e8:	4618      	mov	r0, r3
}
 80041ea:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041ec:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_I2S_DMAPause+0x8c>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041f0:	6851      	ldr	r1, [r2, #4]
{
 80041f2:	b410      	push	{r4}
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041f4:	4c0b      	ldr	r4, [pc, #44]	; (8004224 <HAL_I2S_DMAPause+0x90>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041f6:	f021 0103 	bic.w	r1, r1, #3
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041fa:	42a2      	cmp	r2, r4
 80041fc:	bf18      	it	ne
 80041fe:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004202:	6051      	str	r1, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	f022 0203 	bic.w	r2, r2, #3
 800420a:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 800420c:	2300      	movs	r3, #0
 800420e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004212:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8004216:	4618      	mov	r0, r3
}
 8004218:	4770      	bx	lr
  __HAL_LOCK(hi2s);
 800421a:	2002      	movs	r0, #2
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40003400 	.word	0x40003400
 8004224:	40003800 	.word	0x40003800

08004228 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8004228:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800422c:	2b01      	cmp	r3, #1
 800422e:	d04c      	beq.n	80042ca <HAL_I2S_DMAResume+0xa2>
 8004230:	2301      	movs	r3, #1
 8004232:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004236:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800423a:	2b03      	cmp	r3, #3
 800423c:	d014      	beq.n	8004268 <HAL_I2S_DMAResume+0x40>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800423e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004242:	2b04      	cmp	r3, #4
 8004244:	d016      	beq.n	8004274 <HAL_I2S_DMAResume+0x4c>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004246:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800424a:	2b05      	cmp	r3, #5
 800424c:	d018      	beq.n	8004280 <HAL_I2S_DMAResume+0x58>
 800424e:	6803      	ldr	r3, [r0, #0]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	0552      	lsls	r2, r2, #21
 8004254:	d403      	bmi.n	800425e <HAL_I2S_DMAResume+0x36>
    __HAL_I2S_ENABLE(hi2s);
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800425c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 800425e:	2300      	movs	r3, #0
 8004260:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8004264:	4618      	mov	r0, r3
}
 8004266:	4770      	bx	lr
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	f042 0202 	orr.w	r2, r2, #2
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	e7ed      	b.n	8004250 <HAL_I2S_DMAResume+0x28>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004274:	6803      	ldr	r3, [r0, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e7e7      	b.n	8004250 <HAL_I2S_DMAResume+0x28>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004280:	6803      	ldr	r3, [r0, #0]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004282:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <HAL_I2S_DMAResume+0xa8>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004284:	6859      	ldr	r1, [r3, #4]
{
 8004286:	b410      	push	{r4}
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004288:	4c12      	ldr	r4, [pc, #72]	; (80042d4 <HAL_I2S_DMAResume+0xac>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800428a:	f041 0103 	orr.w	r1, r1, #3
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800428e:	42a3      	cmp	r3, r4
 8004290:	bf18      	it	ne
 8004292:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004296:	6059      	str	r1, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004298:	6851      	ldr	r1, [r2, #4]
 800429a:	f041 0103 	orr.w	r1, r1, #3
 800429e:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80042a0:	69d1      	ldr	r1, [r2, #28]
 80042a2:	054c      	lsls	r4, r1, #21
 80042a4:	d403      	bmi.n	80042ae <HAL_I2S_DMAResume+0x86>
      __HAL_I2SEXT_ENABLE(hi2s);
 80042a6:	69d1      	ldr	r1, [r2, #28]
 80042a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80042ac:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	0551      	lsls	r1, r2, #21
 80042b2:	d403      	bmi.n	80042bc <HAL_I2S_DMAResume+0x94>
    __HAL_I2S_ENABLE(hi2s);
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80042c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80042c6:	4618      	mov	r0, r3
}
 80042c8:	4770      	bx	lr
  __HAL_LOCK(hi2s);
 80042ca:	2002      	movs	r0, #2
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40003400 	.word	0x40003400
 80042d4:	40003800 	.word	0x40003800

080042d8 <HAL_I2S_DMAStop>:
{
 80042d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042dc:	6843      	ldr	r3, [r0, #4]
 80042de:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 80042e2:	b085      	sub	sp, #20
 80042e4:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042e6:	d004      	beq.n	80042f2 <HAL_I2S_DMAStop+0x1a>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d066      	beq.n	80043bc <HAL_I2S_DMAStop+0xe4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ee:	2500      	movs	r5, #0
 80042f0:	e034      	b.n	800435c <HAL_I2S_DMAStop+0x84>
    if (hi2s->hdmatx != NULL)
 80042f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80042f4:	b118      	cbz	r0, 80042fe <HAL_I2S_DMAStop+0x26>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80042f6:	f7ff fa3d 	bl	8003774 <HAL_DMA_Abort>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d17f      	bne.n	80043fe <HAL_I2S_DMAStop+0x126>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042fe:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004300:	2364      	movs	r3, #100	; 0x64
 8004302:	2201      	movs	r2, #1
 8004304:	2102      	movs	r1, #2
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff fe06 	bl	8003f18 <I2S_WaitFlagStateUntilTimeout>
 800430c:	b130      	cbz	r0, 800431c <HAL_I2S_DMAStop+0x44>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800430e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004310:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004312:	4313      	orrs	r3, r2
 8004314:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 8004316:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8004318:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800431c:	2364      	movs	r3, #100	; 0x64
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fdf8 	bl	8003f18 <I2S_WaitFlagStateUntilTimeout>
 8004328:	b130      	cbz	r0, 8004338 <HAL_I2S_DMAStop+0x60>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800432a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800432c:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800432e:	4313      	orrs	r3, r2
 8004330:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode   = HAL_ERROR;
 8004332:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 8004334:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800433c:	2100      	movs	r1, #0
    __HAL_I2S_DISABLE(hi2s);
 800433e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004342:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004344:	9100      	str	r1, [sp, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	9200      	str	r2, [sp, #0]
 800434a:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	f022 0202 	bic.w	r2, r2, #2
 8004352:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004354:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004358:	2a05      	cmp	r2, #5
 800435a:	d006      	beq.n	800436a <HAL_I2S_DMAStop+0x92>
  hi2s->State = HAL_I2S_STATE_READY;
 800435c:	2301      	movs	r3, #1
}
 800435e:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8004360:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8004364:	b005      	add	sp, #20
 8004366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (hi2s->hdmarx != NULL)
 800436a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800436c:	b128      	cbz	r0, 800437a <HAL_I2S_DMAStop+0xa2>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800436e:	f7ff fa01 	bl	8003774 <HAL_DMA_Abort>
 8004372:	2800      	cmp	r0, #0
 8004374:	f040 808c 	bne.w	8004490 <HAL_I2S_DMAStop+0x1b8>
 8004378:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE(hi2s);
 800437a:	4854      	ldr	r0, [pc, #336]	; (80044cc <HAL_I2S_DMAStop+0x1f4>)
 800437c:	4a54      	ldr	r2, [pc, #336]	; (80044d0 <HAL_I2S_DMAStop+0x1f8>)
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800437e:	6861      	ldr	r1, [r4, #4]
      __HAL_I2SEXT_DISABLE(hi2s);
 8004380:	4283      	cmp	r3, r0
 8004382:	bf0c      	ite	eq
 8004384:	4613      	moveq	r3, r2
 8004386:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800438a:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE(hi2s);
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8004394:	9001      	str	r0, [sp, #4]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	9201      	str	r2, [sp, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80043a8:	bb39      	cbnz	r1, 80043fa <HAL_I2S_DMAStop+0x122>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80043aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80043ac:	2201      	movs	r2, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80043ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b2:	6463      	str	r3, [r4, #68]	; 0x44
      errorcode = HAL_ERROR;
 80043b4:	4615      	mov	r5, r2
      hi2s->State = HAL_I2S_STATE_READY;
 80043b6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      errorcode = HAL_ERROR;
 80043ba:	e7cf      	b.n	800435c <HAL_I2S_DMAStop+0x84>
    if (hi2s->hdmarx != NULL)
 80043bc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80043be:	b118      	cbz	r0, 80043c8 <HAL_I2S_DMAStop+0xf0>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80043c0:	f7ff f9d8 	bl	8003774 <HAL_DMA_Abort>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d17b      	bne.n	80044c0 <HAL_I2S_DMAStop+0x1e8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043c8:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80043ca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d01b      	beq.n	800440a <HAL_I2S_DMAStop+0x132>
 80043d2:	6823      	ldr	r3, [r4, #0]
    __HAL_I2S_DISABLE(hi2s);
 80043d4:	69da      	ldr	r2, [r3, #28]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80043d6:	6861      	ldr	r1, [r4, #4]
    __HAL_I2S_DISABLE(hi2s);
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043dc:	2000      	movs	r0, #0
    __HAL_I2S_DISABLE(hi2s);
 80043de:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043e0:	9003      	str	r0, [sp, #12]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	9203      	str	r2, [sp, #12]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80043ec:	685a      	ldr	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80043ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80043f8:	d0d7      	beq.n	80043aa <HAL_I2S_DMAStop+0xd2>
      READ_REG((hi2s->Instance)->DR);
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	e7ae      	b.n	800435c <HAL_I2S_DMAStop+0x84>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004406:	2501      	movs	r5, #1
 8004408:	e77a      	b.n	8004300 <HAL_I2S_DMAStop+0x28>
      if (hi2s->hdmatx != NULL)
 800440a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800440c:	b138      	cbz	r0, 800441e <HAL_I2S_DMAStop+0x146>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800440e:	f7ff f9b1 	bl	8003774 <HAL_DMA_Abort>
 8004412:	b120      	cbz	r0, 800441e <HAL_I2S_DMAStop+0x146>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004414:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004416:	f043 0308 	orr.w	r3, r3, #8
 800441a:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 800441c:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 800441e:	f7ff f885 	bl	800352c <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004422:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80044cc <HAL_I2S_DMAStop+0x1f4>
 8004426:	4f2a      	ldr	r7, [pc, #168]	; (80044d0 <HAL_I2S_DMAStop+0x1f8>)
      tickstart = HAL_GetTick();
 8004428:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 800442a:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800442e:	e004      	b.n	800443a <HAL_I2S_DMAStop+0x162>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004430:	f7ff f87c 	bl	800352c <HAL_GetTick>
 8004434:	1b80      	subs	r0, r0, r6
 8004436:	2864      	cmp	r0, #100	; 0x64
 8004438:	d83a      	bhi.n	80044b0 <HAL_I2S_DMAStop+0x1d8>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	4543      	cmp	r3, r8
 800443e:	bf0c      	ite	eq
 8004440:	463a      	moveq	r2, r7
 8004442:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	0792      	lsls	r2, r2, #30
 800444a:	d5f1      	bpl.n	8004430 <HAL_I2S_DMAStop+0x158>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800444c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80044cc <HAL_I2S_DMAStop+0x1f4>
 8004450:	4f1f      	ldr	r7, [pc, #124]	; (80044d0 <HAL_I2S_DMAStop+0x1f8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8004452:	f04f 0901 	mov.w	r9, #1
 8004456:	e005      	b.n	8004464 <HAL_I2S_DMAStop+0x18c>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004458:	f7ff f868 	bl	800352c <HAL_GetTick>
 800445c:	1b80      	subs	r0, r0, r6
 800445e:	2864      	cmp	r0, #100	; 0x64
 8004460:	d81d      	bhi.n	800449e <HAL_I2S_DMAStop+0x1c6>
 8004462:	6823      	ldr	r3, [r4, #0]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004464:	4543      	cmp	r3, r8
 8004466:	bf0c      	ite	eq
 8004468:	4639      	moveq	r1, r7
 800446a:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
 800446e:	688a      	ldr	r2, [r1, #8]
 8004470:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8004474:	d1f0      	bne.n	8004458 <HAL_I2S_DMAStop+0x180>
      __HAL_I2SEXT_DISABLE(hi2s);
 8004476:	69c8      	ldr	r0, [r1, #28]
 8004478:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800447c:	61c8      	str	r0, [r1, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800447e:	9202      	str	r2, [sp, #8]
 8004480:	688a      	ldr	r2, [r1, #8]
 8004482:	9202      	str	r2, [sp, #8]
 8004484:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004486:	684a      	ldr	r2, [r1, #4]
 8004488:	f022 0202 	bic.w	r2, r2, #2
 800448c:	604a      	str	r2, [r1, #4]
 800448e:	e7a1      	b.n	80043d4 <HAL_I2S_DMAStop+0xfc>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004490:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f042 0208 	orr.w	r2, r2, #8
 8004498:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 800449a:	2501      	movs	r5, #1
 800449c:	e76d      	b.n	800437a <HAL_I2S_DMAStop+0xa2>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800449e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	6462      	str	r2, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 80044a8:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 80044aa:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80044ae:	e7d9      	b.n	8004464 <HAL_I2S_DMAStop+0x18c>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80044b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 80044b8:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 80044ba:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80044be:	e7bc      	b.n	800443a <HAL_I2S_DMAStop+0x162>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80044c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 80044c8:	2501      	movs	r5, #1
 80044ca:	e77e      	b.n	80043ca <HAL_I2S_DMAStop+0xf2>
 80044cc:	40003800 	.word	0x40003800
 80044d0:	40003400 	.word	0x40003400

080044d4 <I2S_DMATxHalfCplt>:
{
 80044d4:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80044d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80044d8:	f7fc fe64 	bl	80011a4 <HAL_I2S_TxHalfCpltCallback>
}
 80044dc:	bd08      	pop	{r3, pc}
 80044de:	bf00      	nop

080044e0 <I2S_DMATxCplt>:
  if (hdma->Init.Mode == DMA_NORMAL)
 80044e0:	6983      	ldr	r3, [r0, #24]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80044e4:	b510      	push	{r4, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 80044e6:	b943      	cbnz	r3, 80044fa <I2S_DMATxCplt+0x1a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80044ec:	2401      	movs	r4, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80044ee:	f022 0202 	bic.w	r2, r2, #2
 80044f2:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 80044f4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80044f6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80044fa:	f7fc fe59 	bl	80011b0 <HAL_I2S_TxCpltCallback>
}
 80044fe:	bd10      	pop	{r4, pc}

08004500 <HAL_I2S_RxCpltCallback>:
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop

08004504 <HAL_I2S_ErrorCallback>:
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <I2S_IRQHandler>:
{
 8004508:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800450a:	6803      	ldr	r3, [r0, #0]
{
 800450c:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004512:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004516:	2a04      	cmp	r2, #4
{
 8004518:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800451a:	d005      	beq.n	8004528 <I2S_IRQHandler+0x20>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800451c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004520:	2b03      	cmp	r3, #3
 8004522:	d031      	beq.n	8004588 <I2S_IRQHandler+0x80>
}
 8004524:	b004      	add	sp, #16
 8004526:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004528:	9a01      	ldr	r2, [sp, #4]
 800452a:	07d1      	lsls	r1, r2, #31
 800452c:	d50f      	bpl.n	800454e <I2S_IRQHandler+0x46>
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	0652      	lsls	r2, r2, #25
 8004532:	d50c      	bpl.n	800454e <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004534:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 800453c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 800453e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004540:	3a01      	subs	r2, #1
 8004542:	b292      	uxth	r2, r2
 8004544:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8004546:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8004548:	b292      	uxth	r2, r2
 800454a:	2a00      	cmp	r2, #0
 800454c:	d04a      	beq.n	80045e4 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	0659      	lsls	r1, r3, #25
 8004552:	d5e3      	bpl.n	800451c <I2S_IRQHandler+0x14>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d5df      	bpl.n	800451c <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800455c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800455e:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004560:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004564:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004566:	9102      	str	r1, [sp, #8]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	9202      	str	r2, [sp, #8]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8004570:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004572:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8004574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004578:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800457a:	f043 0302 	orr.w	r3, r3, #2
 800457e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004580:	4620      	mov	r0, r4
 8004582:	f7ff ffbf 	bl	8004504 <HAL_I2S_ErrorCallback>
 8004586:	e7c9      	b.n	800451c <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004588:	9b01      	ldr	r3, [sp, #4]
 800458a:	079b      	lsls	r3, r3, #30
 800458c:	d50f      	bpl.n	80045ae <I2S_IRQHandler+0xa6>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	0610      	lsls	r0, r2, #24
 8004594:	d50b      	bpl.n	80045ae <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004596:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004598:	f831 2b02 	ldrh.w	r2, [r1], #2
 800459c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800459e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 80045a0:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80045a2:	3a01      	subs	r2, #1
 80045a4:	b292      	uxth	r2, r2
 80045a6:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80045a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045aa:	b292      	uxth	r2, r2
 80045ac:	b322      	cbz	r2, 80045f8 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045ae:	9b01      	ldr	r3, [sp, #4]
 80045b0:	0719      	lsls	r1, r3, #28
 80045b2:	d5b7      	bpl.n	8004524 <I2S_IRQHandler+0x1c>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	0692      	lsls	r2, r2, #26
 80045ba:	d5b3      	bpl.n	8004524 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045bc:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045be:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045c6:	9103      	str	r1, [sp, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80045cc:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045ce:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80045dc:	4620      	mov	r0, r4
 80045de:	f7ff ff91 	bl	8004504 <HAL_I2S_ErrorCallback>
}
 80045e2:	e79f      	b.n	8004524 <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e4:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80045e6:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ec:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80045ee:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80045f2:	f7ff ff85 	bl	8004500 <HAL_I2S_RxCpltCallback>
 80045f6:	e7aa      	b.n	800454e <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f8:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80045fa:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004600:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8004602:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8004604:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8004608:	f7fc fdd2 	bl	80011b0 <HAL_I2S_TxCpltCallback>
 800460c:	e7cf      	b.n	80045ae <I2S_IRQHandler+0xa6>
 800460e:	bf00      	nop

08004610 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004610:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004612:	6801      	ldr	r1, [r0, #0]
 8004614:	684b      	ldr	r3, [r1, #4]
{
 8004616:	b510      	push	{r4, lr}
  hi2s->TxXferCount = 0U;
 8004618:	2200      	movs	r2, #0
  hi2s->State = HAL_I2S_STATE_READY;
 800461a:	2401      	movs	r4, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8004622:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004624:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8004626:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800462a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8004632:	f7ff ff67 	bl	8004504 <HAL_I2S_ErrorCallback>
}
 8004636:	bd10      	pop	{r4, pc}

08004638 <HAL_I2SEx_TxRxCpltCallback>:
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800463c:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800463e:	4a92      	ldr	r2, [pc, #584]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004640:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004642:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004644:	68a9      	ldr	r1, [r5, #8]
{
 8004646:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004648:	4295      	cmp	r5, r2
 800464a:	bf18      	it	ne
 800464c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004650:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004656:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004658:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800465a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004660:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8004664:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004666:	d075      	beq.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004668:	9a01      	ldr	r2, [sp, #4]
 800466a:	0791      	lsls	r1, r2, #30
 800466c:	d51a      	bpl.n	80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 800466e:	9a03      	ldr	r2, [sp, #12]
 8004670:	0612      	lsls	r2, r2, #24
 8004672:	d517      	bpl.n	80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004674:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004676:	1c91      	adds	r1, r2, #2
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	6241      	str	r1, [r0, #36]	; 0x24
 800467c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800467e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004680:	3a01      	subs	r2, #1
 8004682:	b292      	uxth	r2, r2
 8004684:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004686:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004688:	b292      	uxth	r2, r2
 800468a:	b95a      	cbnz	r2, 80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004692:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004694:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8004696:	b29b      	uxth	r3, r3
 8004698:	b923      	cbnz	r3, 80046a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800469a:	2301      	movs	r3, #1
 800469c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046a0:	f7ff ffca 	bl	8004638 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046a4:	9b00      	ldr	r3, [sp, #0]
 80046a6:	07db      	lsls	r3, r3, #31
 80046a8:	d51c      	bpl.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 80046aa:	9b02      	ldr	r3, [sp, #8]
 80046ac:	065d      	lsls	r5, r3, #25
 80046ae:	d519      	bpl.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80046b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	1c98      	adds	r0, r3, #2
 80046b6:	68d1      	ldr	r1, [r2, #12]
 80046b8:	62e0      	str	r0, [r4, #44]	; 0x2c
 80046ba:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80046bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	b963      	cbnz	r3, 80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ca:	6853      	ldr	r3, [r2, #4]
 80046cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80046d0:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80046d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	b92b      	cbnz	r3, 80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046d8:	2301      	movs	r3, #1
 80046da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046de:	4620      	mov	r0, r4
 80046e0:	f7ff ffaa 	bl	8004638 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046e4:	9b00      	ldr	r3, [sp, #0]
 80046e6:	0658      	lsls	r0, r3, #25
 80046e8:	d51b      	bpl.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 80046ea:	9b02      	ldr	r3, [sp, #8]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	d518      	bpl.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f0:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046f2:	4865      	ldr	r0, [pc, #404]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f4:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046f6:	4b65      	ldr	r3, [pc, #404]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f8:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046fc:	4282      	cmp	r2, r0
 80046fe:	bf18      	it	ne
 8004700:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004704:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004706:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800470a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800470e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8004710:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fef1 	bl	8004504 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	071a      	lsls	r2, r3, #28
 8004726:	d56e      	bpl.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	069b      	lsls	r3, r3, #26
 800472c:	d56b      	bpl.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	4955      	ldr	r1, [pc, #340]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8004732:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8004734:	428a      	cmp	r2, r1
 8004736:	bf18      	it	ne
 8004738:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 800473c:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8004744:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004746:	6853      	ldr	r3, [r2, #4]
 8004748:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800474c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800474e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8004752:	e04e      	b.n	80047f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004754:	9b00      	ldr	r3, [sp, #0]
 8004756:	079a      	lsls	r2, r3, #30
 8004758:	d502      	bpl.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800475a:	9b02      	ldr	r3, [sp, #8]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	d454      	bmi.n	800480a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	07d8      	lsls	r0, r3, #31
 8004764:	d502      	bpl.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	0659      	lsls	r1, r3, #25
 800476a:	d469      	bmi.n	8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800476c:	9b01      	ldr	r3, [sp, #4]
 800476e:	065a      	lsls	r2, r3, #25
 8004770:	d522      	bpl.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	069b      	lsls	r3, r3, #26
 8004776:	d51f      	bpl.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	4943      	ldr	r1, [pc, #268]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 800477c:	4a43      	ldr	r2, [pc, #268]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800477e:	428b      	cmp	r3, r1
 8004780:	bf18      	it	ne
 8004782:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004786:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004788:	6851      	ldr	r1, [r2, #4]
 800478a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800478e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004796:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004798:	9004      	str	r0, [sp, #16]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	9204      	str	r2, [sp, #16]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80047a2:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047a4:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80047a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7ff fea6 	bl	8004504 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047b8:	9b00      	ldr	r3, [sp, #0]
 80047ba:	071d      	lsls	r5, r3, #28
 80047bc:	d523      	bpl.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80047be:	9b02      	ldr	r3, [sp, #8]
 80047c0:	0698      	lsls	r0, r3, #26
 80047c2:	d520      	bpl.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c4:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047c6:	4830      	ldr	r0, [pc, #192]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c8:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ca:	4a30      	ldr	r2, [pc, #192]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047cc:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d0:	4283      	cmp	r3, r0
 80047d2:	bf18      	it	ne
 80047d4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d8:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047da:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047dc:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047de:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80047e2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047e4:	9005      	str	r0, [sp, #20]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047ec:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80047ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80047f4:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80047fc:	b007      	add	sp, #28
 80047fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8004802:	f7ff be7f 	b.w	8004504 <HAL_I2S_ErrorCallback>
}
 8004806:	b007      	add	sp, #28
 8004808:	bd30      	pop	{r4, r5, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800480a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	6242      	str	r2, [r0, #36]	; 0x24
 8004812:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 8004814:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004816:	3b01      	subs	r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800481c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d19d      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004824:	686b      	ldr	r3, [r5, #4]
 8004826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800482a:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 800482c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d195      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8004834:	2301      	movs	r3, #1
 8004836:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800483a:	f7ff fefd 	bl	8004638 <HAL_I2SEx_TxRxCpltCallback>
 800483e:	e78f      	b.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004840:	6820      	ldr	r0, [r4, #0]
 8004842:	4911      	ldr	r1, [pc, #68]	; (8004888 <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>)
 8004844:	4a11      	ldr	r2, [pc, #68]	; (800488c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8004846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004848:	4288      	cmp	r0, r1
 800484a:	bf18      	it	ne
 800484c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8004850:	1c98      	adds	r0, r3, #2
 8004852:	68d1      	ldr	r1, [r2, #12]
 8004854:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004856:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8004858:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004860:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d181      	bne.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004868:	6853      	ldr	r3, [r2, #4]
 800486a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800486e:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8004870:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f af79 	bne.w	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800487a:	2301      	movs	r3, #1
 800487c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff fed9 	bl	8004638 <HAL_I2SEx_TxRxCpltCallback>
 8004886:	e771      	b.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8004888:	40003800 	.word	0x40003800
 800488c:	40003400 	.word	0x40003400

08004890 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004890:	2800      	cmp	r0, #0
 8004892:	f000 827f 	beq.w	8004d94 <HAL_RCC_OscConfig+0x504>
{
 8004896:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	6803      	ldr	r3, [r0, #0]
 800489c:	07df      	lsls	r7, r3, #31
{
 800489e:	b083      	sub	sp, #12
 80048a0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	d53d      	bpl.n	8004920 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048a4:	49c1      	ldr	r1, [pc, #772]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 80048a6:	684a      	ldr	r2, [r1, #4]
 80048a8:	f002 020c 	and.w	r2, r2, #12
 80048ac:	2a04      	cmp	r2, #4
 80048ae:	f000 815f 	beq.w	8004b70 <HAL_RCC_OscConfig+0x2e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048b2:	684a      	ldr	r2, [r1, #4]
 80048b4:	f002 020c 	and.w	r2, r2, #12
 80048b8:	2a08      	cmp	r2, #8
 80048ba:	f000 8152 	beq.w	8004b62 <HAL_RCC_OscConfig+0x2d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048be:	6863      	ldr	r3, [r4, #4]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	f000 816b 	beq.w	8004b9e <HAL_RCC_OscConfig+0x30e>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 819a 	beq.w	8004c02 <HAL_RCC_OscConfig+0x372>
 80048ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d2:	f000 82bc 	beq.w	8004e4e <HAL_RCC_OscConfig+0x5be>
 80048d6:	4bb5      	ldr	r3, [pc, #724]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048e6:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe fe20 	bl	800352c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ec:	4faf      	ldr	r7, [pc, #700]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80048ee:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f4:	2601      	movs	r6, #1
 80048f6:	e005      	b.n	8004904 <HAL_RCC_OscConfig+0x74>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fe fe18 	bl	800352c <HAL_GetTick>
 80048fc:	1b40      	subs	r0, r0, r5
 80048fe:	2864      	cmp	r0, #100	; 0x64
 8004900:	f200 817b 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004904:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	fa98 f3a8 	rbit	r3, r8
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	fa06 f303 	lsl.w	r3, r6, r3
 800491a:	4213      	tst	r3, r2
 800491c:	d0ec      	beq.n	80048f8 <HAL_RCC_OscConfig+0x68>
 800491e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004920:	079e      	lsls	r6, r3, #30
 8004922:	d542      	bpl.n	80049aa <HAL_RCC_OscConfig+0x11a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004924:	4aa1      	ldr	r2, [pc, #644]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 8004926:	6851      	ldr	r1, [r2, #4]
 8004928:	f011 0f0c 	tst.w	r1, #12
 800492c:	f000 80cf 	beq.w	8004ace <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004930:	6851      	ldr	r1, [r2, #4]
 8004932:	f001 010c 	and.w	r1, r1, #12
 8004936:	2908      	cmp	r1, #8
 8004938:	f000 80c2 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x230>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	68e2      	ldr	r2, [r4, #12]
 800493e:	2a00      	cmp	r2, #0
 8004940:	f000 81b8 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x424>
 8004944:	2201      	movs	r2, #1
 8004946:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004952:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004956:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 800495a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800495c:	f7fe fde6 	bl	800352c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	4e92      	ldr	r6, [pc, #584]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8004962:	4605      	mov	r5, r0
 8004964:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004968:	e005      	b.n	8004976 <HAL_RCC_OscConfig+0xe6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496a:	f7fe fddf 	bl	800352c <HAL_GetTick>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	2802      	cmp	r0, #2
 8004972:	f200 8142 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004976:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	6832      	ldr	r2, [r6, #0]
 800497c:	fa98 f3a8 	rbit	r3, r8
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa07 f303 	lsl.w	r3, r7, r3
 800498c:	4213      	tst	r3, r2
 800498e:	d0ec      	beq.n	800496a <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	6831      	ldr	r1, [r6, #0]
 8004992:	22f8      	movs	r2, #248	; 0xf8
 8004994:	fa92 f2a2 	rbit	r2, r2
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	fab2 f282 	clz	r2, r2
 800499e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80049a2:	4093      	lsls	r3, r2
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049aa:	071d      	lsls	r5, r3, #28
 80049ac:	d421      	bmi.n	80049f2 <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ae:	0758      	lsls	r0, r3, #29
 80049b0:	d54e      	bpl.n	8004a50 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b2:	4b7e      	ldr	r3, [pc, #504]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	00d1      	lsls	r1, r2, #3
 80049b8:	f140 80c7 	bpl.w	8004b4a <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 80049bc:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	4d7b      	ldr	r5, [pc, #492]	; (8004bb0 <HAL_RCC_OscConfig+0x320>)
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	05da      	lsls	r2, r3, #23
 80049c6:	f140 8108 	bpl.w	8004bda <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ca:	68a3      	ldr	r3, [r4, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	f000 8197 	beq.w	8004d00 <HAL_RCC_OscConfig+0x470>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8138 	beq.w	8004c48 <HAL_RCC_OscConfig+0x3b8>
 80049d8:	2b05      	cmp	r3, #5
 80049da:	4b74      	ldr	r3, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	f000 81d1 	beq.w	8004d84 <HAL_RCC_OscConfig+0x4f4>
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	621a      	str	r2, [r3, #32]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	621a      	str	r2, [r3, #32]
 80049f0:	e18b      	b.n	8004d0a <HAL_RCC_OscConfig+0x47a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f2:	6962      	ldr	r2, [r4, #20]
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	f000 8081 	beq.w	8004afc <HAL_RCC_OscConfig+0x26c>
 80049fa:	2201      	movs	r2, #1
 80049fc:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8004a00:	4b6c      	ldr	r3, [pc, #432]	; (8004bb4 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4f6a      	ldr	r7, [pc, #424]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8004a04:	fab1 f181 	clz	r1, r1
 8004a08:	440b      	add	r3, r1
 8004a0a:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0c:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004a10:	f7fe fd8c 	bl	800352c <HAL_GetTick>
 8004a14:	f04f 0802 	mov.w	r8, #2
 8004a18:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e005      	b.n	8004a28 <HAL_RCC_OscConfig+0x198>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fd86 	bl	800352c <HAL_GetTick>
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	2802      	cmp	r0, #2
 8004a24:	f200 80e9 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004a28:	fa98 f3a8 	rbit	r3, r8
 8004a2c:	fa98 f3a8 	rbit	r3, r8
 8004a30:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	fa98 f3a8 	rbit	r3, r8
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	fa06 f303 	lsl.w	r3, r6, r3
 8004a46:	4213      	tst	r3, r2
 8004a48:	d0e8      	beq.n	8004a1c <HAL_RCC_OscConfig+0x18c>
 8004a4a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4c:	0758      	lsls	r0, r3, #29
 8004a4e:	d4b0      	bmi.n	80049b2 <HAL_RCC_OscConfig+0x122>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a50:	69a0      	ldr	r0, [r4, #24]
 8004a52:	b388      	cbz	r0, 8004ab8 <HAL_RCC_OscConfig+0x228>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a54:	4d55      	ldr	r5, [pc, #340]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 8004a56:	686b      	ldr	r3, [r5, #4]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f000 8179 	beq.w	8004d54 <HAL_RCC_OscConfig+0x4c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	2802      	cmp	r0, #2
 8004a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a68:	f000 8196 	beq.w	8004d98 <HAL_RCC_OscConfig+0x508>
 8004a6c:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	fab3 f383 	clz	r3, r3
 8004a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fe fd53 	bl	800352c <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a86:	462c      	mov	r4, r5
 8004a88:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8004a8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8e:	2601      	movs	r6, #1
 8004a90:	e005      	b.n	8004a9e <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fe fd4b 	bl	800352c <HAL_GetTick>
 8004a96:	1b40      	subs	r0, r0, r5
 8004a98:	2802      	cmp	r0, #2
 8004a9a:	f200 80ae 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004a9e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	fa97 f3a7 	rbit	r3, r7
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa06 f303 	lsl.w	r3, r6, r3
 8004ab4:	4213      	tst	r3, r2
 8004ab6:	d1ec      	bne.n	8004a92 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }

  return HAL_OK;
 8004ab8:	2000      	movs	r0, #0
}
 8004aba:	b003      	add	sp, #12
 8004abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ac0:	6852      	ldr	r2, [r2, #4]
 8004ac2:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8004ac6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004aca:	f47f af37 	bne.w	800493c <HAL_RCC_OscConfig+0xac>
 8004ace:	2202      	movs	r2, #2
 8004ad0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad4:	4935      	ldr	r1, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 8004ad6:	6808      	ldr	r0, [r1, #0]
 8004ad8:	fa92 f2a2 	rbit	r2, r2
 8004adc:	fab2 f282 	clz	r2, r2
 8004ae0:	f002 021f 	and.w	r2, r2, #31
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aea:	4202      	tst	r2, r0
 8004aec:	d064      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x328>
 8004aee:	68e2      	ldr	r2, [r4, #12]
 8004af0:	428a      	cmp	r2, r1
 8004af2:	d061      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x328>
        return HAL_ERROR;
 8004af4:	2001      	movs	r0, #1
}
 8004af6:	b003      	add	sp, #12
 8004af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004afc:	2501      	movs	r5, #1
 8004afe:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8004b02:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <HAL_RCC_OscConfig+0x324>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b04:	4f29      	ldr	r7, [pc, #164]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8004b06:	fab1 f181 	clz	r1, r1
 8004b0a:	440b      	add	r3, r1
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	f04f 0802 	mov.w	r8, #2
 8004b12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004b14:	f7fe fd0a 	bl	800352c <HAL_GetTick>
 8004b18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1a:	e004      	b.n	8004b26 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fe fd06 	bl	800352c <HAL_GetTick>
 8004b20:	1b80      	subs	r0, r0, r6
 8004b22:	2802      	cmp	r0, #2
 8004b24:	d869      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004b26:	fa98 f3a8 	rbit	r3, r8
 8004b2a:	fa98 f3a8 	rbit	r3, r8
 8004b2e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	fa98 f3a8 	rbit	r3, r8
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa05 f303 	lsl.w	r3, r5, r3
 8004b44:	4213      	tst	r3, r2
 8004b46:	d1e9      	bne.n	8004b1c <HAL_RCC_OscConfig+0x28c>
 8004b48:	e77f      	b.n	8004a4a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b50:	61da      	str	r2, [r3, #28]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b5c:	f04f 0801 	mov.w	r8, #1
 8004b60:	e72e      	b.n	80049c0 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b62:	684a      	ldr	r2, [r1, #4]
 8004b64:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8004b68:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b6c:	f47f aea7 	bne.w	80048be <HAL_RCC_OscConfig+0x2e>
 8004b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b74:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 8004b7a:	6808      	ldr	r0, [r1, #0]
 8004b7c:	fa92 f2a2 	rbit	r2, r2
 8004b80:	fab2 f282 	clz	r2, r2
 8004b84:	f002 021f 	and.w	r2, r2, #31
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8e:	4202      	tst	r2, r0
 8004b90:	f43f aec6 	beq.w	8004920 <HAL_RCC_OscConfig+0x90>
 8004b94:	6862      	ldr	r2, [r4, #4]
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	f47f aec2 	bne.w	8004920 <HAL_RCC_OscConfig+0x90>
 8004b9c:	e7aa      	b.n	8004af4 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9e:	4a03      	ldr	r2, [pc, #12]	; (8004bac <HAL_RCC_OscConfig+0x31c>)
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	e69e      	b.n	80048e8 <HAL_RCC_OscConfig+0x58>
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	10908120 	.word	0x10908120
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb8:	4dab      	ldr	r5, [pc, #684]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
 8004bba:	21f8      	movs	r1, #248	; 0xf8
 8004bbc:	6828      	ldr	r0, [r5, #0]
 8004bbe:	fa91 f1a1 	rbit	r1, r1
 8004bc2:	6922      	ldr	r2, [r4, #16]
 8004bc4:	fab1 f181 	clz	r1, r1
 8004bc8:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8004bcc:	408a      	lsls	r2, r1
 8004bce:	4302      	orrs	r2, r0
 8004bd0:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd2:	071d      	lsls	r5, r3, #28
 8004bd4:	f57f aeeb 	bpl.w	80049ae <HAL_RCC_OscConfig+0x11e>
 8004bd8:	e70b      	b.n	80049f2 <HAL_RCC_OscConfig+0x162>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004be2:	f7fe fca3 	bl	800352c <HAL_GetTick>
 8004be6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	05db      	lsls	r3, r3, #23
 8004bec:	f53f aeed 	bmi.w	80049ca <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fe fc9c 	bl	800352c <HAL_GetTick>
 8004bf4:	1b80      	subs	r0, r0, r6
 8004bf6:	2864      	cmp	r0, #100	; 0x64
 8004bf8:	d9f6      	bls.n	8004be8 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
}
 8004bfc:	b003      	add	sp, #12
 8004bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c02:	4d99      	ldr	r5, [pc, #612]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c14:	f7fe fc8a 	bl	800352c <HAL_GetTick>
 8004c18:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8004c1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	2701      	movs	r7, #1
 8004c20:	e004      	b.n	8004c2c <HAL_RCC_OscConfig+0x39c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c22:	f7fe fc83 	bl	800352c <HAL_GetTick>
 8004c26:	1b80      	subs	r0, r0, r6
 8004c28:	2864      	cmp	r0, #100	; 0x64
 8004c2a:	d8e6      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004c2c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c30:	682a      	ldr	r2, [r5, #0]
 8004c32:	fa98 f3a8 	rbit	r3, r8
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	fa07 f303 	lsl.w	r3, r7, r3
 8004c42:	4213      	tst	r3, r2
 8004c44:	d1ed      	bne.n	8004c22 <HAL_RCC_OscConfig+0x392>
 8004c46:	e66a      	b.n	800491e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	4d87      	ldr	r5, [pc, #540]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
 8004c4a:	6a2b      	ldr	r3, [r5, #32]
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	622b      	str	r3, [r5, #32]
 8004c52:	6a2b      	ldr	r3, [r5, #32]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004c5a:	f7fe fc67 	bl	800352c <HAL_GetTick>
 8004c5e:	f04f 0902 	mov.w	r9, #2
 8004c62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c64:	2701      	movs	r7, #1
 8004c66:	e013      	b.n	8004c90 <HAL_RCC_OscConfig+0x400>
 8004c68:	fa99 f3a9 	rbit	r3, r9
 8004c6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004c6e:	fa99 f3a9 	rbit	r3, r9
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	fa07 f303 	lsl.w	r3, r7, r3
 8004c7e:	4213      	tst	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fe fc53 	bl	800352c <HAL_GetTick>
 8004c86:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c8a:	1b80      	subs	r0, r0, r6
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	d8b4      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004c90:	fa99 f3a9 	rbit	r3, r9
 8004c94:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0e5      	beq.n	8004c68 <HAL_RCC_OscConfig+0x3d8>
 8004c9c:	6a2a      	ldr	r2, [r5, #32]
 8004c9e:	e7e6      	b.n	8004c6e <HAL_RCC_OscConfig+0x3de>
    if(pwrclkchanged == SET)
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	f43f aed4 	beq.w	8004a50 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4a6f      	ldr	r2, [pc, #444]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
 8004caa:	69d3      	ldr	r3, [r2, #28]
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	61d3      	str	r3, [r2, #28]
 8004cb2:	e6cd      	b.n	8004a50 <HAL_RCC_OscConfig+0x1c0>
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cc6:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc8:	4f67      	ldr	r7, [pc, #412]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_HSI_DISABLE();
 8004cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ccc:	f7fe fc2e 	bl	800352c <HAL_GetTick>
 8004cd0:	f04f 0802 	mov.w	r8, #2
 8004cd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	e004      	b.n	8004ce2 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fc28 	bl	800352c <HAL_GetTick>
 8004cdc:	1b80      	subs	r0, r0, r6
 8004cde:	2802      	cmp	r0, #2
 8004ce0:	d88b      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004ce2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	fa98 f3a8 	rbit	r3, r8
 8004cec:	fab3 f383 	clz	r3, r3
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	fa05 f303 	lsl.w	r3, r5, r3
 8004cf8:	4213      	tst	r3, r2
 8004cfa:	d1ed      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x448>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	e654      	b.n	80049aa <HAL_RCC_OscConfig+0x11a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d00:	4a59      	ldr	r2, [pc, #356]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
 8004d02:	6a13      	ldr	r3, [r2, #32]
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fc0f 	bl	800352c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	4f56      	ldr	r7, [pc, #344]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8004d10:	4605      	mov	r5, r0
 8004d12:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	2601      	movs	r6, #1
 8004d18:	e014      	b.n	8004d44 <HAL_RCC_OscConfig+0x4b4>
 8004d1a:	fa99 f3a9 	rbit	r3, r9
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	fa99 f3a9 	rbit	r3, r9
 8004d24:	fab3 f383 	clz	r3, r3
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa06 f303 	lsl.w	r3, r6, r3
 8004d30:	4213      	tst	r3, r2
 8004d32:	d1b5      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fe fbfa 	bl	800352c <HAL_GetTick>
 8004d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	f63f af5b 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004d44:	fa99 f3a9 	rbit	r3, r9
 8004d48:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0e4      	beq.n	8004d1a <HAL_RCC_OscConfig+0x48a>
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	e7e5      	b.n	8004d20 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d54:	2801      	cmp	r0, #1
 8004d56:	f43f aeb0 	beq.w	8004aba <HAL_RCC_OscConfig+0x22a>
        pll_config = RCC->CFGR;
 8004d5a:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d5c:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8004d5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d60:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8004d64:	4288      	cmp	r0, r1
 8004d66:	f47f aec5 	bne.w	8004af4 <HAL_RCC_OscConfig+0x264>
 8004d6a:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d6c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d70:	428a      	cmp	r2, r1
 8004d72:	f47f aebf 	bne.w	8004af4 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d76:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004d78:	f003 030f 	and.w	r3, r3, #15
        return HAL_ERROR;
 8004d7c:	1a18      	subs	r0, r3, r0
 8004d7e:	bf18      	it	ne
 8004d80:	2001      	movne	r0, #1
 8004d82:	e69a      	b.n	8004aba <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	f042 0204 	orr.w	r2, r2, #4
 8004d88:	621a      	str	r2, [r3, #32]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	621a      	str	r2, [r3, #32]
 8004d92:	e7ba      	b.n	8004d0a <HAL_RCC_OscConfig+0x47a>
    return HAL_ERROR;
 8004d94:	2001      	movs	r0, #1
}
 8004d96:	4770      	bx	lr
 8004d98:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004dae:	f7fe fbbd 	bl	800352c <HAL_GetTick>
 8004db2:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8004db6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db8:	2701      	movs	r7, #1
 8004dba:	e005      	b.n	8004dc8 <HAL_RCC_OscConfig+0x538>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbc:	f7fe fbb6 	bl	800352c <HAL_GetTick>
 8004dc0:	1b80      	subs	r0, r0, r6
 8004dc2:	2802      	cmp	r0, #2
 8004dc4:	f63f af19 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004dc8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	682a      	ldr	r2, [r5, #0]
 8004dce:	fa98 f3a8 	rbit	r3, r8
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	fa07 f303 	lsl.w	r3, r7, r3
 8004dde:	4213      	tst	r3, r2
 8004de0:	d1ec      	bne.n	8004dbc <HAL_RCC_OscConfig+0x52c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004de4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004de6:	f023 030f 	bic.w	r3, r3, #15
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004dee:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8004df2:	686a      	ldr	r2, [r5, #4]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	606b      	str	r3, [r5, #4]
 8004dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e02:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e12:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e14:	4e14      	ldr	r6, [pc, #80]	; (8004e68 <HAL_RCC_OscConfig+0x5d8>)
        __HAL_RCC_PLL_ENABLE();
 8004e16:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8004e18:	f7fe fb88 	bl	800352c <HAL_GetTick>
 8004e1c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8004e20:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e22:	2501      	movs	r5, #1
 8004e24:	e005      	b.n	8004e32 <HAL_RCC_OscConfig+0x5a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fe fb81 	bl	800352c <HAL_GetTick>
 8004e2a:	1b00      	subs	r0, r0, r4
 8004e2c:	2802      	cmp	r0, #2
 8004e2e:	f63f aee4 	bhi.w	8004bfa <HAL_RCC_OscConfig+0x36a>
 8004e32:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e36:	6832      	ldr	r2, [r6, #0]
 8004e38:	fa98 f3a8 	rbit	r3, r8
 8004e3c:	fab3 f383 	clz	r3, r3
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	fa05 f303 	lsl.w	r3, r5, r3
 8004e48:	4213      	tst	r3, r2
 8004e4a:	d0ec      	beq.n	8004e26 <HAL_RCC_OscConfig+0x596>
 8004e4c:	e634      	b.n	8004ab8 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e52:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e53f      	b.n	80048e8 <HAL_RCC_OscConfig+0x58>
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004e6c:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8004e6e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e70:	f003 010c 	and.w	r1, r3, #12
 8004e74:	2908      	cmp	r1, #8
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e78:	4810      	ldr	r0, [pc, #64]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004e7a:	4770      	bx	lr
{
 8004e7c:	b430      	push	{r4, r5}
 8004e7e:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8004e82:	fa90 f0a0 	rbit	r0, r0
 8004e86:	210f      	movs	r1, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e8a:	fab0 f080 	clz	r0, r0
 8004e8e:	fa91 f1a1 	rbit	r1, r1
 8004e92:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e96:	40c3      	lsrs	r3, r0
 8004e98:	4809      	ldr	r0, [pc, #36]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e9a:	4d0a      	ldr	r5, [pc, #40]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e9c:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e9e:	4c07      	ldr	r4, [pc, #28]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ea0:	fab1 f181 	clz	r1, r1
 8004ea4:	f002 030f 	and.w	r3, r2, #15
 8004ea8:	40cb      	lsrs	r3, r1
 8004eaa:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004eb0:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eb2:	fb00 f003 	mul.w	r0, r0, r3
}
 8004eb6:	4770      	bx	lr
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	0803bffc 	.word	0x0803bffc
 8004ec4:	0803c00c 	.word	0x0803c00c

08004ec8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	f000 809f 	beq.w	800500c <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ece:	4a5a      	ldr	r2, [pc, #360]	; (8005038 <HAL_RCC_ClockConfig+0x170>)
 8004ed0:	6813      	ldr	r3, [r2, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	428b      	cmp	r3, r1
{
 8004ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004edc:	460d      	mov	r5, r1
 8004ede:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	d20c      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eec:	6813      	ldr	r3, [r2, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	428b      	cmp	r3, r1
 8004ef4:	d002      	beq.n	8004efc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004ef6:	2001      	movs	r0, #1
}
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	0798      	lsls	r0, r3, #30
 8004f00:	d506      	bpl.n	8004f10 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f02:	494e      	ldr	r1, [pc, #312]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004f04:	68a0      	ldr	r0, [r4, #8]
 8004f06:	684a      	ldr	r2, [r1, #4]
 8004f08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f0c:	4302      	orrs	r2, r0
 8004f0e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f10:	07d9      	lsls	r1, r3, #31
 8004f12:	d52c      	bpl.n	8004f6e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	2901      	cmp	r1, #1
 8004f18:	d07a      	beq.n	8005010 <HAL_RCC_ClockConfig+0x148>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1a:	2902      	cmp	r1, #2
 8004f1c:	d064      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x120>
 8004f1e:	2202      	movs	r2, #2
 8004f20:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f24:	4b45      	ldr	r3, [pc, #276]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	fa92 f2a2 	rbit	r2, r2
 8004f2c:	fab2 f282 	clz	r2, r2
 8004f30:	f002 021f 	and.w	r2, r2, #31
 8004f34:	2301      	movs	r3, #1
 8004f36:	fa03 f202 	lsl.w	r2, r3, r2
 8004f3a:	4202      	tst	r2, r0
 8004f3c:	d0db      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4e3f      	ldr	r6, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004f40:	6873      	ldr	r3, [r6, #4]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	430b      	orrs	r3, r1
 8004f48:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004f4a:	f7fe faef 	bl	800352c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004f52:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f54:	e004      	b.n	8004f60 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f56:	f7fe fae9 	bl	800352c <HAL_GetTick>
 8004f5a:	1bc0      	subs	r0, r0, r7
 8004f5c:	4540      	cmp	r0, r8
 8004f5e:	d868      	bhi.n	8005032 <HAL_RCC_ClockConfig+0x16a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f60:	6873      	ldr	r3, [r6, #4]
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f6c:	d1f3      	bne.n	8004f56 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6e:	4a32      	ldr	r2, [pc, #200]	; (8005038 <HAL_RCC_ClockConfig+0x170>)
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	d909      	bls.n	8004f8e <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	432b      	orrs	r3, r5
 8004f82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	d1b3      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	075a      	lsls	r2, r3, #29
 8004f92:	d506      	bpl.n	8004fa2 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f94:	4929      	ldr	r1, [pc, #164]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004f96:	68e0      	ldr	r0, [r4, #12]
 8004f98:	684a      	ldr	r2, [r1, #4]
 8004f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9e:	4302      	orrs	r2, r0
 8004fa0:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	071b      	lsls	r3, r3, #28
 8004fa4:	d507      	bpl.n	8004fb6 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa6:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004fa8:	6921      	ldr	r1, [r4, #16]
 8004faa:	6853      	ldr	r3, [r2, #4]
 8004fac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004fb0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004fb4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fb6:	f7ff ff59 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
 8004fba:	4a20      	ldr	r2, [pc, #128]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	6852      	ldr	r2, [r2, #4]
 8004fc0:	21f0      	movs	r1, #240	; 0xf0
 8004fc2:	fa91 f1a1 	rbit	r1, r1
 8004fc6:	fab1 f181 	clz	r1, r1
 8004fca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004fce:	40ca      	lsrs	r2, r1
 8004fd0:	491b      	ldr	r1, [pc, #108]	; (8005040 <HAL_RCC_ClockConfig+0x178>)
  HAL_InitTick (uwTickPrio);
 8004fd2:	481c      	ldr	r0, [pc, #112]	; (8005044 <HAL_RCC_ClockConfig+0x17c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fd4:	5c89      	ldrb	r1, [r1, r2]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (uwTickPrio);
 8004fd8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fda:	40cb      	lsrs	r3, r1
 8004fdc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004fde:	f7fe fa63 	bl	80034a8 <HAL_InitTick>
  return HAL_OK;
 8004fe2:	2000      	movs	r0, #0
}
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fec:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 8004ff2:	6810      	ldr	r0, [r2, #0]
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	fab3 f383 	clz	r3, r3
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2201      	movs	r2, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	4203      	tst	r3, r0
 8005008:	d199      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x76>
 800500a:	e774      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800500c:	2001      	movs	r0, #1
}
 800500e:	4770      	bx	lr
 8005010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005014:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <HAL_RCC_ClockConfig+0x174>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa92 f2a2 	rbit	r2, r2
 8005020:	fab2 f282 	clz	r2, r2
 8005024:	f002 021f 	and.w	r2, r2, #31
 8005028:	fa01 f202 	lsl.w	r2, r1, r2
 800502c:	421a      	tst	r2, r3
 800502e:	d186      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x76>
 8005030:	e761      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005032:	2003      	movs	r0, #3
 8005034:	e760      	b.n	8004ef8 <HAL_RCC_ClockConfig+0x30>
 8005036:	bf00      	nop
 8005038:	40022000 	.word	0x40022000
 800503c:	40021000 	.word	0x40021000
 8005040:	08022690 	.word	0x08022690
 8005044:	2000007c 	.word	0x2000007c
 8005048:	20000074 	.word	0x20000074

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x24>)
 800504e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	fa92 f2a2 	rbit	r2, r2
 8005058:	fab2 f282 	clz	r2, r2
 800505c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005060:	4904      	ldr	r1, [pc, #16]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005062:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	6810      	ldr	r0, [r2, #0]
}    
 800506a:	40d8      	lsrs	r0, r3
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	080226a0 	.word	0x080226a0
 8005078:	20000074 	.word	0x20000074

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	fa92 f2a2 	rbit	r2, r2
 8005088:	fab2 f282 	clz	r2, r2
 800508c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005090:	4904      	ldr	r1, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005092:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	6810      	ldr	r0, [r2, #0]
} 
 800509a:	40d8      	lsrs	r0, r3
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	080226a0 	.word	0x080226a0
 80050a8:	20000074 	.word	0x20000074

080050ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b0:	6803      	ldr	r3, [r0, #0]
 80050b2:	03d9      	lsls	r1, r3, #15
{
 80050b4:	b083      	sub	sp, #12
 80050b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b8:	d53d      	bpl.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ba:	4ba1      	ldr	r3, [pc, #644]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	00d2      	lsls	r2, r2, #3
 80050c0:	f140 80f6 	bpl.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	4d9f      	ldr	r5, [pc, #636]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	05df      	lsls	r7, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80050ca:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ce:	f140 80ff 	bpl.w	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d2:	4d9b      	ldr	r5, [pc, #620]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050d4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80050da:	d01f      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x70>
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d01b      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e6:	6a29      	ldr	r1, [r5, #32]
 80050e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ec:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80050f0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f4:	f8df c250 	ldr.w	ip, [pc, #592]	; 8005348 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80050f8:	fab2 f282 	clz	r2, r2
 80050fc:	4462      	add	r2, ip
 80050fe:	0092      	lsls	r2, r2, #2
 8005100:	2701      	movs	r7, #1
 8005102:	6017      	str	r7, [r2, #0]
 8005104:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005108:	fab3 f383 	clz	r3, r3
 800510c:	4463      	add	r3, ip
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005112:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005114:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8005116:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005118:	f100 80ee 	bmi.w	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800511c:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800511e:	4a88      	ldr	r2, [pc, #544]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005120:	6a13      	ldr	r3, [r2, #32]
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	430b      	orrs	r3, r1
 8005128:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800512a:	b11e      	cbz	r6, 8005134 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	69d3      	ldr	r3, [r2, #28]
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005132:	61d3      	str	r3, [r2, #28]
 8005134:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005136:	07da      	lsls	r2, r3, #31
 8005138:	d506      	bpl.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800513a:	4981      	ldr	r1, [pc, #516]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800513c:	68a0      	ldr	r0, [r4, #8]
 800513e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005140:	f022 0203 	bic.w	r2, r2, #3
 8005144:	4302      	orrs	r2, r0
 8005146:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005148:	079f      	lsls	r7, r3, #30
 800514a:	d506      	bpl.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800514c:	497c      	ldr	r1, [pc, #496]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800514e:	68e0      	ldr	r0, [r4, #12]
 8005150:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005152:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005156:	4302      	orrs	r2, r0
 8005158:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800515a:	075e      	lsls	r6, r3, #29
 800515c:	d506      	bpl.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800515e:	4978      	ldr	r1, [pc, #480]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005160:	6920      	ldr	r0, [r4, #16]
 8005162:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005164:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005168:	4302      	orrs	r2, r0
 800516a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516c:	069d      	lsls	r5, r3, #26
 800516e:	d506      	bpl.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005170:	4973      	ldr	r1, [pc, #460]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005172:	69e0      	ldr	r0, [r4, #28]
 8005174:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005176:	f022 0210 	bic.w	r2, r2, #16
 800517a:	4302      	orrs	r2, r0
 800517c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800517e:	0398      	lsls	r0, r3, #14
 8005180:	d506      	bpl.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005182:	496f      	ldr	r1, [pc, #444]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005184:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005186:	684a      	ldr	r2, [r1, #4]
 8005188:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800518c:	4302      	orrs	r2, r0
 800518e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005190:	0659      	lsls	r1, r3, #25
 8005192:	d506      	bpl.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005194:	496a      	ldr	r1, [pc, #424]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005196:	6a20      	ldr	r0, [r4, #32]
 8005198:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800519a:	f022 0220 	bic.w	r2, r2, #32
 800519e:	4302      	orrs	r2, r0
 80051a0:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051a2:	035a      	lsls	r2, r3, #13
 80051a4:	d506      	bpl.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a6:	4966      	ldr	r1, [pc, #408]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051aa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80051ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b0:	4302      	orrs	r2, r0
 80051b2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b4:	071f      	lsls	r7, r3, #28
 80051b6:	d506      	bpl.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051b8:	4961      	ldr	r1, [pc, #388]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051ba:	6960      	ldr	r0, [r4, #20]
 80051bc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80051be:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80051c2:	4302      	orrs	r2, r0
 80051c4:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051c6:	06de      	lsls	r6, r3, #27
 80051c8:	d506      	bpl.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ca:	495d      	ldr	r1, [pc, #372]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051cc:	69a0      	ldr	r0, [r4, #24]
 80051ce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80051d0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80051d4:	4302      	orrs	r2, r0
 80051d6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051d8:	059d      	lsls	r5, r3, #22
 80051da:	d506      	bpl.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051dc:	4958      	ldr	r1, [pc, #352]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80051e0:	684a      	ldr	r2, [r1, #4]
 80051e2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80051e6:	4302      	orrs	r2, r0
 80051e8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051ea:	0618      	lsls	r0, r3, #24
 80051ec:	d506      	bpl.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051ee:	4954      	ldr	r1, [pc, #336]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80051f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80051f4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80051f8:	4302      	orrs	r2, r0
 80051fa:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80051fc:	05d9      	lsls	r1, r3, #23
 80051fe:	d506      	bpl.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005200:	494f      	ldr	r1, [pc, #316]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005204:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005206:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800520a:	4302      	orrs	r2, r0
 800520c:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800520e:	04da      	lsls	r2, r3, #19
 8005210:	d506      	bpl.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005212:	494b      	ldr	r1, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005214:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005216:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800521c:	4302      	orrs	r2, r0
 800521e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005220:	049f      	lsls	r7, r3, #18
 8005222:	d506      	bpl.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005224:	4946      	ldr	r1, [pc, #280]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005226:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005228:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800522a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800522e:	4302      	orrs	r2, r0
 8005230:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005232:	02de      	lsls	r6, r3, #11
 8005234:	d506      	bpl.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005236:	4942      	ldr	r1, [pc, #264]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005238:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800523a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800523c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005240:	4302      	orrs	r2, r0
 8005242:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005244:	029d      	lsls	r5, r3, #10
 8005246:	d506      	bpl.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005248:	493d      	ldr	r1, [pc, #244]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800524a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800524c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800524e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005252:	4302      	orrs	r2, r0
 8005254:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005256:	0258      	lsls	r0, r3, #9
 8005258:	d506      	bpl.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800525a:	4939      	ldr	r1, [pc, #228]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800525c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800525e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005264:	4302      	orrs	r2, r0
 8005266:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005268:	0219      	lsls	r1, r3, #8
 800526a:	d506      	bpl.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800526c:	4934      	ldr	r1, [pc, #208]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800526e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005270:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005276:	4302      	orrs	r2, r0
 8005278:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800527a:	01da      	lsls	r2, r3, #7
 800527c:	d506      	bpl.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800527e:	4930      	ldr	r1, [pc, #192]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005280:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005282:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005288:	4302      	orrs	r2, r0
 800528a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800528c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005290:	d103      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005292:	4618      	mov	r0, r3
}
 8005294:	b003      	add	sp, #12
 8005296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800529a:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800529c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800529e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80052a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052a4:	430b      	orrs	r3, r1
  return HAL_OK;
 80052a6:	2000      	movs	r0, #0
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80052a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80052aa:	b003      	add	sp, #12
 80052ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b2:	4d24      	ldr	r5, [pc, #144]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052b8:	61da      	str	r2, [r3, #28]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	05df      	lsls	r7, r3, #23
      pwrclkchanged = SET;
 80052c8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	f53f af01 	bmi.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80052d8:	f7fe f928 	bl	800352c <HAL_GetTick>
 80052dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	05d8      	lsls	r0, r3, #23
 80052e2:	f53f aef6 	bmi.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fe f921 	bl	800352c <HAL_GetTick>
 80052ea:	1bc0      	subs	r0, r0, r7
 80052ec:	2864      	cmp	r0, #100	; 0x64
 80052ee:	d9f6      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x232>
          return HAL_TIMEOUT;
 80052f0:	2003      	movs	r0, #3
}
 80052f2:	b003      	add	sp, #12
 80052f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80052f8:	f7fe f918 	bl	800352c <HAL_GetTick>
 80052fc:	f04f 0902 	mov.w	r9, #2
 8005300:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	e015      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005304:	fa99 f3a9 	rbit	r3, r9
 8005308:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800530a:	fa99 f3a9 	rbit	r3, r9
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	fa07 f303 	lsl.w	r3, r7, r3
 800531a:	4213      	tst	r3, r2
 800531c:	f47f aefe 	bne.w	800511c <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fe f904 	bl	800352c <HAL_GetTick>
 8005324:	f241 3388 	movw	r3, #5000	; 0x1388
 8005328:	eba0 0008 	sub.w	r0, r0, r8
 800532c:	4298      	cmp	r0, r3
 800532e:	d8df      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005330:	fa99 f3a9 	rbit	r3, r9
 8005334:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0e3      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800533c:	6a2a      	ldr	r2, [r5, #32]
 800533e:	e7e4      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005340:	40021000 	.word	0x40021000
 8005344:	40007000 	.word	0x40007000
 8005348:	10908100 	.word	0x10908100

0800534c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b083      	sub	sp, #12
 8005350:	460c      	mov	r4, r1
 8005352:	4617      	mov	r7, r2
 8005354:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005356:	f7fe f8e9 	bl	800352c <HAL_GetTick>
 800535a:	4427      	add	r7, r4
 800535c:	1a3d      	subs	r5, r7, r0
  tmp_tickstart = HAL_GetTick();
 800535e:	f7fe f8e5 	bl	800352c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005362:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800536a:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800536e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005370:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005372:	6832      	ldr	r2, [r6, #0]
 8005374:	e001      	b.n	800537a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005376:	1c63      	adds	r3, r4, #1
 8005378:	d106      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537a:	6893      	ldr	r3, [r2, #8]
 800537c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005380:	d1f9      	bne.n	8005376 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 8005382:	4618      	mov	r0, r3
}
 8005384:	b003      	add	sp, #12
 8005386:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005388:	f7fe f8d0 	bl	800352c <HAL_GetTick>
 800538c:	1bc0      	subs	r0, r0, r7
 800538e:	42a8      	cmp	r0, r5
 8005390:	d208      	bcs.n	80053a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if(count == 0U)
 8005392:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005394:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005396:	2a00      	cmp	r2, #0
      count--;
 8005398:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800539c:	bf08      	it	eq
 800539e:	2500      	moveq	r5, #0
      count--;
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	e7e6      	b.n	8005372 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a4:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053a8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053aa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053b2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b4:	d014      	beq.n	80053e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80053b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80053bc:	d007      	beq.n	80053ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 80053be:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80053c0:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80053c2:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80053c6:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 80053ca:	2003      	movs	r0, #3
 80053cc:	e7da      	b.n	8005384 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e7ee      	b.n	80053be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e0:	68b2      	ldr	r2, [r6, #8]
 80053e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80053e6:	d002      	beq.n	80053ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80053ec:	d1e3      	bne.n	80053b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e7de      	b.n	80053b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 80053f8:	20000074 	.word	0x20000074

080053fc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80053fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005400:	b083      	sub	sp, #12
 8005402:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005404:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005406:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005408:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800540c:	4606      	mov	r6, r0
 800540e:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005410:	f7fe f88c 	bl	800352c <HAL_GetTick>
 8005414:	44a8      	add	r8, r5
 8005416:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800541a:	f7fe f887 	bl	800352c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800541e:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005420:	f8d6 8000 	ldr.w	r8, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800542a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800542e:	0d1b      	lsrs	r3, r3, #20
 8005430:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8005434:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005436:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005438:	4642      	mov	r2, r8
 800543a:	e001      	b.n	8005440 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800543c:	1c6b      	adds	r3, r5, #1
 800543e:	d10e      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 8005440:	6893      	ldr	r3, [r2, #8]
 8005442:	4023      	ands	r3, r4
 8005444:	d01d      	beq.n	8005482 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005446:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800544a:	d1f7      	bne.n	800543c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 800544c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005456:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800545a:	1c6b      	adds	r3, r5, #1
 800545c:	d0f0      	beq.n	8005440 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800545e:	f7fe f865 	bl	800352c <HAL_GetTick>
 8005462:	eba0 0009 	sub.w	r0, r0, r9
 8005466:	42b8      	cmp	r0, r7
 8005468:	d20f      	bcs.n	800548a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800546a:	9a01      	ldr	r2, [sp, #4]
      {
        tmp_timeout = 0U;
      }      
      count--;
 800546c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800546e:	2a00      	cmp	r2, #0
      count--;
 8005470:	f103 33ff 	add.w	r3, r3, #4294967295
 8005474:	6832      	ldr	r2, [r6, #0]
 8005476:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8005478:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 800547a:	bf08      	it	eq
 800547c:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 800547e:	4023      	ands	r3, r4
 8005480:	d1e1      	bne.n	8005446 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 8005482:	4618      	mov	r0, r3
}
 8005484:	b003      	add	sp, #12
 8005486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548a:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800548e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005498:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549a:	d014      	beq.n	80054c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800549e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80054a2:	d007      	beq.n	80054b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 80054a4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80054a6:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80054a8:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80054ac:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80054b0:	2003      	movs	r0, #3
 80054b2:	e7e7      	b.n	8005484 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e7ee      	b.n	80054a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c6:	68b2      	ldr	r2, [r6, #8]
 80054c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80054cc:	d002      	beq.n	80054d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80054d2:	d1e3      	bne.n	800549c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	e7de      	b.n	800549c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 80054de:	bf00      	nop
 80054e0:	20000074 	.word	0x20000074

080054e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054e6:	4613      	mov	r3, r2
{
 80054e8:	460d      	mov	r5, r1
 80054ea:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054ec:	460a      	mov	r2, r1
 80054ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80054f2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f4:	f7ff ff82 	bl	80053fc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80054f8:	b970      	cbnz	r0, 8005518 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054fa:	4632      	mov	r2, r6
 80054fc:	4629      	mov	r1, r5
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff ff24 	bl	800534c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005504:	b940      	cbnz	r0, 8005518 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005506:	4633      	mov	r3, r6
 8005508:	462a      	mov	r2, r5
 800550a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff ff74 	bl	80053fc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005514:	b900      	cbnz	r0, 8005518 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005516:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005518:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005520:	2003      	movs	r0, #3
}
 8005522:	bd70      	pop	{r4, r5, r6, pc}

08005524 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005524:	2800      	cmp	r0, #0
 8005526:	d07f      	beq.n	8005628 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005528:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005532:	f1bc 0f00 	cmp.w	ip, #0
 8005536:	d05c      	beq.n	80055f2 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005538:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800553e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005542:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005544:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005548:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800554a:	2b00      	cmp	r3, #0
 800554c:	d05e      	beq.n	800560c <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 800554e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005550:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005552:	2302      	movs	r3, #2
 8005554:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005558:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800555a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005564:	d94c      	bls.n	8005600 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005566:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800556a:	d15f      	bne.n	800562c <HAL_SPI_Init+0x108>
 800556c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800556e:	2700      	movs	r7, #0
 8005570:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005574:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8005578:	6925      	ldr	r5, [r4, #16]
 800557a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800557e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8005582:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005586:	4333      	orrs	r3, r6
 8005588:	f005 0502 	and.w	r5, r5, #2
 800558c:	432b      	orrs	r3, r5
 800558e:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005590:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005594:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005598:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800559a:	432b      	orrs	r3, r5
 800559c:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055a0:	f002 0208 	and.w	r2, r2, #8
 80055a4:	ea42 0208 	orr.w	r2, r2, r8
 80055a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ac:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055b0:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b4:	ea43 030e 	orr.w	r3, r3, lr
 80055b8:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055bc:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c0:	4333      	orrs	r3, r6
 80055c2:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055c6:	f00c 0c10 	and.w	ip, ip, #16
 80055ca:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ce:	432b      	orrs	r3, r5
 80055d0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055d2:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055d8:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055da:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055dc:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80055e2:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055e4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e6:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055e8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 80055ec:	4610      	mov	r0, r2
}
 80055ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055f2:	6843      	ldr	r3, [r0, #4]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f8:	d0a1      	beq.n	800553e <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055fa:	f8c0 c01c 	str.w	ip, [r0, #28]
 80055fe:	e79e      	b.n	800553e <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005600:	d00c      	beq.n	800561c <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005602:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005606:	2000      	movs	r0, #0
 8005608:	62a0      	str	r0, [r4, #40]	; 0x28
 800560a:	e7b3      	b.n	8005574 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 800560c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005610:	4620      	mov	r0, r4
 8005612:	f7fc f863 	bl	80016dc <HAL_SPI_MspInit>
 8005616:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800561a:	e798      	b.n	800554e <HAL_SPI_Init+0x2a>
 800561c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800561e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8005622:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8005626:	e7a5      	b.n	8005574 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8005628:	2001      	movs	r0, #1
}
 800562a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800562c:	2700      	movs	r7, #0
 800562e:	e7ea      	b.n	8005606 <HAL_SPI_Init+0xe2>

08005630 <HAL_SPI_Transmit>:
{
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005636:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800563a:	2801      	cmp	r0, #1
{
 800563c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800563e:	d060      	beq.n	8005702 <HAL_SPI_Transmit+0xd2>
 8005640:	461d      	mov	r5, r3
 8005642:	2301      	movs	r3, #1
 8005644:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005648:	4688      	mov	r8, r1
 800564a:	4617      	mov	r7, r2
 800564c:	f7fd ff6e 	bl	800352c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005650:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005654:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005656:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005658:	b2d8      	uxtb	r0, r3
 800565a:	d009      	beq.n	8005670 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800565c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800565e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005660:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005662:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005666:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800566a:	b002      	add	sp, #8
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8005670:	f1b8 0f00 	cmp.w	r8, #0
 8005674:	d0f3      	beq.n	800565e <HAL_SPI_Transmit+0x2e>
 8005676:	2f00      	cmp	r7, #0
 8005678:	d0f1      	beq.n	800565e <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800567c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005680:	2303      	movs	r3, #3
 8005682:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005686:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8005690:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005694:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005696:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 800569a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800569c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800569e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    __HAL_SPI_DISABLE(hspi);
 80056a2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	d056      	beq.n	8005754 <HAL_SPI_Transmit+0x124>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	0652      	lsls	r2, r2, #25
 80056aa:	d403      	bmi.n	80056b4 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b4:	68e2      	ldr	r2, [r4, #12]
 80056b6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ba:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056bc:	d925      	bls.n	800570a <HAL_SPI_Transmit+0xda>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	2a00      	cmp	r2, #0
 80056c0:	d051      	beq.n	8005766 <HAL_SPI_Transmit+0x136>
 80056c2:	2f01      	cmp	r7, #1
 80056c4:	d04f      	beq.n	8005766 <HAL_SPI_Transmit+0x136>
    while (hspi->TxXferCount > 0U)
 80056c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80056c8:	b292      	uxth	r2, r2
 80056ca:	b972      	cbnz	r2, 80056ea <HAL_SPI_Transmit+0xba>
 80056cc:	e06e      	b.n	80057ac <HAL_SPI_Transmit+0x17c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056d0:	f831 2b02 	ldrh.w	r2, [r1], #2
 80056d4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80056d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d8:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80056da:	3a01      	subs	r2, #1
 80056dc:	b292      	uxth	r2, r2
 80056de:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80056e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d061      	beq.n	80057ac <HAL_SPI_Transmit+0x17c>
 80056e8:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	0797      	lsls	r7, r2, #30
 80056ee:	d4ee      	bmi.n	80056ce <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f0:	f7fd ff1c 	bl	800352c <HAL_GetTick>
 80056f4:	1b80      	subs	r0, r0, r6
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d3f2      	bcc.n	80056e0 <HAL_SPI_Transmit+0xb0>
 80056fa:	1c68      	adds	r0, r5, #1
 80056fc:	d0f0      	beq.n	80056e0 <HAL_SPI_Transmit+0xb0>
          errorcode = HAL_TIMEOUT;
 80056fe:	2003      	movs	r0, #3
 8005700:	e7ad      	b.n	800565e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8005702:	2002      	movs	r0, #2
}
 8005704:	b002      	add	sp, #8
 8005706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	2a00      	cmp	r2, #0
 800570c:	d035      	beq.n	800577a <HAL_SPI_Transmit+0x14a>
 800570e:	2f01      	cmp	r7, #1
 8005710:	d033      	beq.n	800577a <HAL_SPI_Transmit+0x14a>
    while (hspi->TxXferCount > 0U)
 8005712:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	b98b      	cbnz	r3, 800573c <HAL_SPI_Transmit+0x10c>
 8005718:	e048      	b.n	80057ac <HAL_SPI_Transmit+0x17c>
        if (hspi->TxXferCount > 1U)
 800571a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d939      	bls.n	8005796 <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005724:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005728:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800572a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800572c:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800572e:	3b02      	subs	r3, #2
 8005730:	b29b      	uxth	r3, r3
 8005732:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8005734:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005736:	b292      	uxth	r2, r2
 8005738:	2a00      	cmp	r2, #0
 800573a:	d037      	beq.n	80057ac <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	6893      	ldr	r3, [r2, #8]
 8005740:	0799      	lsls	r1, r3, #30
 8005742:	d4ea      	bmi.n	800571a <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005744:	f7fd fef2 	bl	800352c <HAL_GetTick>
 8005748:	1b80      	subs	r0, r0, r6
 800574a:	42a8      	cmp	r0, r5
 800574c:	d3f2      	bcc.n	8005734 <HAL_SPI_Transmit+0x104>
 800574e:	1c6b      	adds	r3, r5, #1
 8005750:	d0f0      	beq.n	8005734 <HAL_SPI_Transmit+0x104>
 8005752:	e7d4      	b.n	80056fe <HAL_SPI_Transmit+0xce>
    __HAL_SPI_DISABLE(hspi);
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e79f      	b.n	80056a6 <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005766:	4641      	mov	r1, r8
 8005768:	f831 2b02 	ldrh.w	r2, [r1], #2
 800576c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800576e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005772:	3a01      	subs	r2, #1
 8005774:	b292      	uxth	r2, r2
 8005776:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8005778:	e7a5      	b.n	80056c6 <HAL_SPI_Transmit+0x96>
      if (hspi->TxXferCount > 1U)
 800577a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800577c:	b292      	uxth	r2, r2
 800577e:	2a01      	cmp	r2, #1
 8005780:	d92a      	bls.n	80057d8 <HAL_SPI_Transmit+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005782:	4641      	mov	r1, r8
 8005784:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005788:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800578a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800578c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800578e:	3b02      	subs	r3, #2
 8005790:	b29b      	uxth	r3, r3
 8005792:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005794:	e7bd      	b.n	8005712 <HAL_SPI_Transmit+0xe2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800579c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800579e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80057a4:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80057a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80057a8:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80057aa:	e7c3      	b.n	8005734 <HAL_SPI_Transmit+0x104>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ac:	4632      	mov	r2, r6
 80057ae:	4629      	mov	r1, r5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff fe97 	bl	80054e4 <SPI_EndRxTxTransaction>
 80057b6:	b108      	cbz	r0, 80057bc <HAL_SPI_Transmit+0x18c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b8:	2320      	movs	r3, #32
 80057ba:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	b933      	cbnz	r3, 80057ce <HAL_SPI_Transmit+0x19e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	68d3      	ldr	r3, [r2, #12]
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	6893      	ldr	r3, [r2, #8]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ce:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80057d0:	3800      	subs	r0, #0
 80057d2:	bf18      	it	ne
 80057d4:	2001      	movne	r0, #1
error:
 80057d6:	e742      	b.n	800565e <HAL_SPI_Transmit+0x2e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057d8:	f898 2000 	ldrb.w	r2, [r8]
 80057dc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80057de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 80057e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 80057e6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80057e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 80057ea:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80057ec:	e791      	b.n	8005712 <HAL_SPI_Transmit+0xe2>
 80057ee:	bf00      	nop

080057f0 <HAL_SPI_TransmitReceive>:
{
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80057f6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 80057fa:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 80057fc:	2801      	cmp	r0, #1
 80057fe:	f000 809d 	beq.w	800593c <HAL_SPI_TransmitReceive+0x14c>
 8005802:	4698      	mov	r8, r3
 8005804:	2301      	movs	r3, #1
 8005806:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800580a:	468a      	mov	sl, r1
 800580c:	4691      	mov	r9, r2
 800580e:	f7fd fe8d 	bl	800352c <HAL_GetTick>
  tmp_state           = hspi->State;
 8005812:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005816:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005818:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 800581a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800581c:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800581e:	d010      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x52>
 8005820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005824:	d008      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8005826:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005828:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800582a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800582c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005830:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005838:	68a2      	ldr	r2, [r4, #8]
 800583a:	2a00      	cmp	r2, #0
 800583c:	d1f3      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x36>
 800583e:	2904      	cmp	r1, #4
 8005840:	d1f1      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005842:	f1ba 0f00 	cmp.w	sl, #0
 8005846:	d07c      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x152>
 8005848:	f1b9 0f00 	cmp.w	r9, #0
 800584c:	d079      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x152>
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	d076      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005854:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005858:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800585c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800585e:	bf1c      	itt	ne
 8005860:	2205      	movne	r2, #5
 8005862:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005866:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8005868:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586c:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800586e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005872:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005874:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005876:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800587a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800587e:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005882:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005886:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8005888:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800588c:	d85b      	bhi.n	8005946 <HAL_SPI_TransmitReceive+0x156>
 800588e:	f1b8 0f01 	cmp.w	r8, #1
 8005892:	f240 80b3 	bls.w	80059fc <HAL_SPI_TransmitReceive+0x20c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005896:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800589a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589c:	6811      	ldr	r1, [r2, #0]
 800589e:	0649      	lsls	r1, r1, #25
 80058a0:	f140 80b3 	bpl.w	8005a0a <HAL_SPI_TransmitReceive+0x21a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a4:	b96b      	cbnz	r3, 80058c2 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 80058a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f240 80e9 	bls.w	8005a82 <HAL_SPI_TransmitReceive+0x292>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b0:	4651      	mov	r1, sl
 80058b2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80058b6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80058b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ba:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058bc:	3b02      	subs	r3, #2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80058c2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	b92b      	cbnz	r3, 80058d6 <HAL_SPI_TransmitReceive+0xe6>
 80058ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8083 	beq.w	80059dc <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	6893      	ldr	r3, [r2, #8]
 80058da:	0799      	lsls	r1, r3, #30
 80058dc:	d505      	bpl.n	80058ea <HAL_SPI_TransmitReceive+0xfa>
 80058de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	b113      	cbz	r3, 80058ea <HAL_SPI_TransmitReceive+0xfa>
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	f040 80aa 	bne.w	8005a3e <HAL_SPI_TransmitReceive+0x24e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ea:	6893      	ldr	r3, [r2, #8]
 80058ec:	f013 0301 	ands.w	r3, r3, #1
 80058f0:	d01b      	beq.n	800592a <HAL_SPI_TransmitReceive+0x13a>
 80058f2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80058f6:	b289      	uxth	r1, r1
 80058f8:	b1b9      	cbz	r1, 800592a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 80058fa:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80058fe:	b289      	uxth	r1, r1
 8005900:	2901      	cmp	r1, #1
 8005902:	f240 808e 	bls.w	8005a22 <HAL_SPI_TransmitReceive+0x232>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005906:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005908:	68d1      	ldr	r1, [r2, #12]
 800590a:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 800590e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005912:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005914:	3902      	subs	r1, #2
 8005916:	b289      	uxth	r1, r1
 8005918:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800591c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005920:	b289      	uxth	r1, r1
 8005922:	2901      	cmp	r1, #1
 8005924:	f240 809a 	bls.w	8005a5c <HAL_SPI_TransmitReceive+0x26c>
        txallowed = 1U;
 8005928:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800592a:	f7fd fdff 	bl	800352c <HAL_GetTick>
 800592e:	1b40      	subs	r0, r0, r5
 8005930:	42b0      	cmp	r0, r6
 8005932:	d3c7      	bcc.n	80058c4 <HAL_SPI_TransmitReceive+0xd4>
 8005934:	1c73      	adds	r3, r6, #1
 8005936:	d0c5      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8005938:	2003      	movs	r0, #3
 800593a:	e775      	b.n	8005828 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800593c:	2002      	movs	r0, #2
}
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8005942:	2001      	movs	r0, #1
 8005944:	e770      	b.n	8005828 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005946:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800594a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	0648      	lsls	r0, r1, #25
 8005950:	d403      	bmi.n	800595a <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8005952:	6811      	ldr	r1, [r2, #0]
 8005954:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005958:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	2b00      	cmp	r3, #0
 800595c:	d14a      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x204>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595e:	4651      	mov	r1, sl
 8005960:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005964:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8005966:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005968:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800596a:	3b01      	subs	r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005970:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005972:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	b91b      	cbnz	r3, 8005980 <HAL_SPI_TransmitReceive+0x190>
 8005978:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	b36b      	cbz	r3, 80059dc <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	6893      	ldr	r3, [r2, #8]
 8005984:	079b      	lsls	r3, r3, #30
 8005986:	d50d      	bpl.n	80059a4 <HAL_SPI_TransmitReceive+0x1b4>
 8005988:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	b153      	cbz	r3, 80059a4 <HAL_SPI_TransmitReceive+0x1b4>
 800598e:	b14f      	cbz	r7, 80059a4 <HAL_SPI_TransmitReceive+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005990:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005992:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005996:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800599a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800599c:	3b01      	subs	r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80059a2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a4:	6893      	ldr	r3, [r2, #8]
 80059a6:	f013 0301 	ands.w	r3, r3, #1
 80059aa:	d00f      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x1dc>
 80059ac:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80059b0:	b289      	uxth	r1, r1
 80059b2:	b159      	cbz	r1, 80059cc <HAL_SPI_TransmitReceive+0x1dc>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059b6:	68d2      	ldr	r2, [r2, #12]
 80059b8:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80059bc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c0:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80059c2:	3a01      	subs	r2, #1
 80059c4:	b292      	uxth	r2, r2
        txallowed = 1U;
 80059c6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80059c8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059cc:	f7fd fdae 	bl	800352c <HAL_GetTick>
 80059d0:	1b40      	subs	r0, r0, r5
 80059d2:	42b0      	cmp	r0, r6
 80059d4:	d3cd      	bcc.n	8005972 <HAL_SPI_TransmitReceive+0x182>
 80059d6:	1c70      	adds	r0, r6, #1
 80059d8:	d0cb      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x182>
 80059da:	e7ad      	b.n	8005938 <HAL_SPI_TransmitReceive+0x148>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059dc:	462a      	mov	r2, r5
 80059de:	4631      	mov	r1, r6
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff fd7f 	bl	80054e4 <SPI_EndRxTxTransaction>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f af1e 	beq.w	8005828 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ec:	2320      	movs	r3, #32
 80059ee:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80059f0:	2001      	movs	r0, #1
 80059f2:	e719      	b.n	8005828 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f4:	f1b8 0f01 	cmp.w	r8, #1
 80059f8:	d1ba      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x180>
 80059fa:	e7b0      	b.n	800595e <HAL_SPI_TransmitReceive+0x16e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059fc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005a00:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a02:	6811      	ldr	r1, [r2, #0]
 8005a04:	0649      	lsls	r1, r1, #25
 8005a06:	f53f af4e 	bmi.w	80058a6 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8005a0a:	6811      	ldr	r1, [r2, #0]
 8005a0c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005a10:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f43f af47 	beq.w	80058a6 <HAL_SPI_TransmitReceive+0xb6>
 8005a18:	f1b8 0f01 	cmp.w	r8, #1
 8005a1c:	f47f af51 	bne.w	80058c2 <HAL_SPI_TransmitReceive+0xd2>
 8005a20:	e741      	b.n	80058a6 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a24:	7b12      	ldrb	r2, [r2, #12]
 8005a26:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005a28:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8005a2c:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005a2e:	3a01      	subs	r2, #1
 8005a30:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8005a32:	3101      	adds	r1, #1
        txallowed = 1U;
 8005a34:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8005a36:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8005a3a:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005a3c:	e775      	b.n	800592a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8005a3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d910      	bls.n	8005a68 <HAL_SPI_TransmitReceive+0x278>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a48:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005a4c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005a4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a52:	3b02      	subs	r3, #2
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005a58:	2700      	movs	r7, #0
 8005a5a:	e746      	b.n	80058ea <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a5c:	6851      	ldr	r1, [r2, #4]
 8005a5e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8005a62:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a64:	6051      	str	r1, [r2, #4]
 8005a66:	e760      	b.n	800592a <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005a6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005a70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a72:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005a78:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8005a7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005a7c:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8005a7e:	2700      	movs	r7, #0
 8005a80:	e733      	b.n	80058ea <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a82:	f89a 3000 	ldrb.w	r3, [sl]
 8005a86:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005a88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8005a8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005a90:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005a92:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8005a94:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005a96:	e714      	b.n	80058c2 <HAL_SPI_TransmitReceive+0xd2>

08005a98 <UART_SetConfig>:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a98:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a9a:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a9c:	498b      	ldr	r1, [pc, #556]	; (8005ccc <UART_SetConfig+0x234>)
{
 8005a9e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa0:	6905      	ldr	r5, [r0, #16]
 8005aa2:	6946      	ldr	r6, [r0, #20]
{
 8005aa4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa6:	432b      	orrs	r3, r5
 8005aa8:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aaa:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aac:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aae:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab6:	6851      	ldr	r1, [r2, #4]
 8005ab8:	68e5      	ldr	r5, [r4, #12]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aba:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8005abc:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abe:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005ac2:	4329      	orrs	r1, r5
 8005ac4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ac6:	6891      	ldr	r1, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac8:	4d81      	ldr	r5, [pc, #516]	; (8005cd0 <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005ace:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad0:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad2:	42aa      	cmp	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad4:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad6:	d036      	beq.n	8005b46 <UART_SetConfig+0xae>
 8005ad8:	4b7e      	ldr	r3, [pc, #504]	; (8005cd4 <UART_SetConfig+0x23c>)
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d010      	beq.n	8005b00 <UART_SetConfig+0x68>
 8005ade:	4b7e      	ldr	r3, [pc, #504]	; (8005cd8 <UART_SetConfig+0x240>)
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	f000 80c9 	beq.w	8005c78 <UART_SetConfig+0x1e0>
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	; (8005cdc <UART_SetConfig+0x244>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	f000 80da 	beq.w	8005ca2 <UART_SetConfig+0x20a>
 8005aee:	4b7c      	ldr	r3, [pc, #496]	; (8005ce0 <UART_SetConfig+0x248>)
 8005af0:	429a      	cmp	r2, r3
 8005af2:	f000 8084 	beq.w	8005bfe <UART_SetConfig+0x166>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005af6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005af8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afc:	2001      	movs	r0, #1

  return ret;
}
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b00:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0e:	d05b      	beq.n	8005bc8 <UART_SetConfig+0x130>
 8005b10:	d811      	bhi.n	8005b36 <UART_SetConfig+0x9e>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d07c      	beq.n	8005c10 <UART_SetConfig+0x178>
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1a:	d1ec      	bne.n	8005af6 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b20:	f000 8086 	beq.w	8005c30 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b24:	f7ff f9a2 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d152      	bne.n	8005bd2 <UART_SetConfig+0x13a>
  huart->RxISR = NULL;
 8005b2c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005b2e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005b32:	2000      	movs	r0, #0
}
 8005b34:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b3a:	d1dc      	bne.n	8005af6 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b40:	d06c      	beq.n	8005c1c <UART_SetConfig+0x184>
 8005b42:	4868      	ldr	r0, [pc, #416]	; (8005ce4 <UART_SetConfig+0x24c>)
 8005b44:	e045      	b.n	8005bd2 <UART_SetConfig+0x13a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b46:	4b68      	ldr	r3, [pc, #416]	; (8005ce8 <UART_SetConfig+0x250>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d91c      	bls.n	8005b8e <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b58:	d14e      	bne.n	8005bf8 <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5a:	f7ff fa8f 	bl	800507c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0e4      	beq.n	8005b2c <UART_SetConfig+0x94>
 8005b62:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b6e:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b70:	f1a3 0110 	sub.w	r1, r3, #16
 8005b74:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005b78:	4291      	cmp	r1, r2
 8005b7a:	d8bc      	bhi.n	8005af6 <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b7c:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8005b80:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b82:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b84:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005b88:	4318      	orrs	r0, r3
 8005b8a:	60d0      	str	r0, [r2, #12]
 8005b8c:	e7ce      	b.n	8005b2c <UART_SetConfig+0x94>
 8005b8e:	4a57      	ldr	r2, [pc, #348]	; (8005cec <UART_SetConfig+0x254>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b94:	5cd3      	ldrb	r3, [r2, r3]
 8005b96:	d056      	beq.n	8005c46 <UART_SetConfig+0x1ae>
    switch (clocksource)
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d8ac      	bhi.n	8005af6 <UART_SetConfig+0x5e>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x10c>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005c17 	.word	0x08005c17
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005b43 	.word	0x08005b43
 8005bb0:	08005af7 	.word	0x08005af7
 8005bb4:	08005b25 	.word	0x08005b25
 8005bb8:	08005af7 	.word	0x08005af7
 8005bbc:	08005af7 	.word	0x08005af7
 8005bc0:	08005af7 	.word	0x08005af7
 8005bc4:	08005bcf 	.word	0x08005bcf
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005bcc:	d02d      	beq.n	8005c2a <UART_SetConfig+0x192>
        pclk = (uint32_t) LSE_VALUE;
 8005bce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd2:	6863      	ldr	r3, [r4, #4]
 8005bd4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bdc:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bde:	f1a3 0110 	sub.w	r1, r3, #16
 8005be2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005be6:	4291      	cmp	r1, r2
 8005be8:	d885      	bhi.n	8005af6 <UART_SetConfig+0x5e>
        huart->Instance->BRR = usartdiv;
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005bee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005bf0:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005bf4:	2000      	movs	r0, #0
}
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf8:	f7ff fa40 	bl	800507c <HAL_RCC_GetPCLK2Freq>
        break;
 8005bfc:	e794      	b.n	8005b28 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ce8 <UART_SetConfig+0x250>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c0a:	d0dd      	beq.n	8005bc8 <UART_SetConfig+0x130>
 8005c0c:	d816      	bhi.n	8005c3c <UART_SetConfig+0x1a4>
 8005c0e:	b93b      	cbnz	r3, 8005c20 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005c14:	d00f      	beq.n	8005c36 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c16:	f7ff fa19 	bl	800504c <HAL_RCC_GetPCLK1Freq>
        break;
 8005c1a:	e785      	b.n	8005b28 <UART_SetConfig+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1c:	4834      	ldr	r0, [pc, #208]	; (8005cf0 <UART_SetConfig+0x258>)
 8005c1e:	e7a1      	b.n	8005b64 <UART_SetConfig+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c24:	f43f af7a 	beq.w	8005b1c <UART_SetConfig+0x84>
 8005c28:	e765      	b.n	8005af6 <UART_SetConfig+0x5e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c2e:	e799      	b.n	8005b64 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c30:	f7ff f91c 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
        break;
 8005c34:	e793      	b.n	8005b5e <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7ff fa09 	bl	800504c <HAL_RCC_GetPCLK1Freq>
        break;
 8005c3a:	e790      	b.n	8005b5e <UART_SetConfig+0xc6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c40:	f43f af7c 	beq.w	8005b3c <UART_SetConfig+0xa4>
 8005c44:	e757      	b.n	8005af6 <UART_SetConfig+0x5e>
    switch (clocksource)
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	f63f af55 	bhi.w	8005af6 <UART_SetConfig+0x5e>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x1bc>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c37 	.word	0x08005c37
 8005c58:	08005b5b 	.word	0x08005b5b
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005af7 	.word	0x08005af7
 8005c64:	08005c31 	.word	0x08005c31
 8005c68:	08005af7 	.word	0x08005af7
 8005c6c:	08005af7 	.word	0x08005af7
 8005c70:	08005af7 	.word	0x08005af7
 8005c74:	08005c2b 	.word	0x08005c2b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c78:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c86:	d09f      	beq.n	8005bc8 <UART_SetConfig+0x130>
 8005c88:	d806      	bhi.n	8005c98 <UART_SetConfig+0x200>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0c0      	beq.n	8005c10 <UART_SetConfig+0x178>
 8005c8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c92:	f43f af43 	beq.w	8005b1c <UART_SetConfig+0x84>
 8005c96:	e72e      	b.n	8005af6 <UART_SetConfig+0x5e>
 8005c98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c9c:	f43f af4e 	beq.w	8005b3c <UART_SetConfig+0xa4>
 8005ca0:	e729      	b.n	8005af6 <UART_SetConfig+0x5e>
 8005ca2:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb0:	d08a      	beq.n	8005bc8 <UART_SetConfig+0x130>
 8005cb2:	d806      	bhi.n	8005cc2 <UART_SetConfig+0x22a>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ab      	beq.n	8005c10 <UART_SetConfig+0x178>
 8005cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbc:	f43f af2e 	beq.w	8005b1c <UART_SetConfig+0x84>
 8005cc0:	e719      	b.n	8005af6 <UART_SetConfig+0x5e>
 8005cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc6:	f43f af39 	beq.w	8005b3c <UART_SetConfig+0xa4>
 8005cca:	e714      	b.n	8005af6 <UART_SetConfig+0x5e>
 8005ccc:	efff69f3 	.word	0xefff69f3
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40004400 	.word	0x40004400
 8005cd8:	40004800 	.word	0x40004800
 8005cdc:	40004c00 	.word	0x40004c00
 8005ce0:	40005000 	.word	0x40005000
 8005ce4:	007a1200 	.word	0x007a1200
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	0803c01c 	.word	0x0803c01c
 8005cf0:	00f42400 	.word	0x00f42400

08005cf4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cf6:	07da      	lsls	r2, r3, #31
{
 8005cf8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfa:	d506      	bpl.n	8005d0a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cfc:	6801      	ldr	r1, [r0, #0]
 8005cfe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005d00:	684a      	ldr	r2, [r1, #4]
 8005d02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d06:	4322      	orrs	r2, r4
 8005d08:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d0a:	079c      	lsls	r4, r3, #30
 8005d0c:	d506      	bpl.n	8005d1c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	6801      	ldr	r1, [r0, #0]
 8005d10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d12:	684a      	ldr	r2, [r1, #4]
 8005d14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d18:	4322      	orrs	r2, r4
 8005d1a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d1c:	0759      	lsls	r1, r3, #29
 8005d1e:	d506      	bpl.n	8005d2e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d20:	6801      	ldr	r1, [r0, #0]
 8005d22:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d24:	684a      	ldr	r2, [r1, #4]
 8005d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d2a:	4322      	orrs	r2, r4
 8005d2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d2e:	071a      	lsls	r2, r3, #28
 8005d30:	d506      	bpl.n	8005d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d32:	6801      	ldr	r1, [r0, #0]
 8005d34:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005d36:	684a      	ldr	r2, [r1, #4]
 8005d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d3c:	4322      	orrs	r2, r4
 8005d3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d40:	06dc      	lsls	r4, r3, #27
 8005d42:	d506      	bpl.n	8005d52 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d44:	6801      	ldr	r1, [r0, #0]
 8005d46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005d48:	688a      	ldr	r2, [r1, #8]
 8005d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d4e:	4322      	orrs	r2, r4
 8005d50:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d52:	0699      	lsls	r1, r3, #26
 8005d54:	d506      	bpl.n	8005d64 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d56:	6801      	ldr	r1, [r0, #0]
 8005d58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005d5a:	688a      	ldr	r2, [r1, #8]
 8005d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d60:	4322      	orrs	r2, r4
 8005d62:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	065a      	lsls	r2, r3, #25
 8005d66:	d509      	bpl.n	8005d7c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d68:	6801      	ldr	r1, [r0, #0]
 8005d6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005d6c:	684a      	ldr	r2, [r1, #4]
 8005d6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005d72:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d7a:	d00b      	beq.n	8005d94 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d7c:	061b      	lsls	r3, r3, #24
 8005d7e:	d506      	bpl.n	8005d8e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d80:	6802      	ldr	r2, [r0, #0]
 8005d82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005d84:	6853      	ldr	r3, [r2, #4]
 8005d86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	6053      	str	r3, [r2, #4]
  }
}
 8005d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d92:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d94:	684a      	ldr	r2, [r1, #4]
 8005d96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005d98:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005d9c:	4322      	orrs	r2, r4
 8005d9e:	604a      	str	r2, [r1, #4]
 8005da0:	e7ec      	b.n	8005d7c <UART_AdvFeatureConfig+0x88>
 8005da2:	bf00      	nop

08005da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dac:	6805      	ldr	r5, [r0, #0]
 8005dae:	4681      	mov	r9, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	4616      	mov	r6, r2
 8005db4:	469a      	mov	sl, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db6:	e002      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005dbc:	d10a      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	69ec      	ldr	r4, [r5, #28]
 8005dc0:	ea37 0304 	bics.w	r3, r7, r4
 8005dc4:	bf0c      	ite	eq
 8005dc6:	2401      	moveq	r4, #1
 8005dc8:	2400      	movne	r4, #0
 8005dca:	42b4      	cmp	r4, r6
 8005dcc:	d0f4      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005dce:	2000      	movs	r0, #0
}
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd4:	f7fd fbaa 	bl	800352c <HAL_GetTick>
 8005dd8:	eba0 000a 	sub.w	r0, r0, sl
 8005ddc:	4540      	cmp	r0, r8
 8005dde:	d82d      	bhi.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x98>
 8005de0:	f1b8 0f00 	cmp.w	r8, #0
 8005de4:	d02a      	beq.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005de6:	f8d9 5000 	ldr.w	r5, [r9]
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	0759      	lsls	r1, r3, #29
 8005dee:	462a      	mov	r2, r5
 8005df0:	d5e5      	bpl.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df2:	69eb      	ldr	r3, [r5, #28]
 8005df4:	051b      	lsls	r3, r3, #20
 8005df6:	d5e2      	bpl.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dfc:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	e842 3100 	strex	r1, r3, [r2]
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d1f7      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	f102 0308 	add.w	r3, r2, #8
 8005e12:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	f102 0008 	add.w	r0, r2, #8
 8005e1e:	e840 3100 	strex	r1, r3, [r0]
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d1f3      	bne.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x6a>
          huart->gState = HAL_UART_STATE_READY;
 8005e26:	2320      	movs	r3, #32
 8005e28:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005e2c:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005e30:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          return HAL_TIMEOUT;
 8005e34:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e36:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8005e3a:	e7c9      	b.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8005e3c:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	e842 3100 	strex	r1, r3, [r2]
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d1f7      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	f102 0308 	add.w	r3, r2, #8
 8005e54:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	f102 0008 	add.w	r0, r2, #8
 8005e60:	e840 3100 	strex	r1, r3, [r0]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d1f3      	bne.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xac>
        huart->gState = HAL_UART_STATE_READY;
 8005e68:	2320      	movs	r3, #32
 8005e6a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005e6e:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        return HAL_TIMEOUT;
 8005e72:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005e74:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005e78:	e7aa      	b.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x2c>
 8005e7a:	bf00      	nop

08005e7c <HAL_UART_Transmit>:
{
 8005e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005e82:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005e84:	2820      	cmp	r0, #32
{
 8005e86:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8005e88:	d149      	bne.n	8005f1e <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	d042      	beq.n	8005f16 <HAL_UART_Transmit+0x9a>
 8005e90:	4617      	mov	r7, r2
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d03f      	beq.n	8005f16 <HAL_UART_Transmit+0x9a>
 8005e96:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8005e98:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d03e      	beq.n	8005f1e <HAL_UART_Transmit+0xa2>
 8005ea0:	2201      	movs	r2, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	f04f 0900 	mov.w	r9, #0
 8005ea8:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 8005eac:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb0:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005eb2:	f7fd fb3b 	bl	800352c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8005eb8:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005ec0:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8005ec2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	d02e      	beq.n	8005f26 <HAL_UART_Transmit+0xaa>
    while (huart->TxXferCount > 0U)
 8005ec8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8005ecc:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8005ece:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8005ed0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005ed4:	b973      	cbnz	r3, 8005ef4 <HAL_UART_Transmit+0x78>
 8005ed6:	e030      	b.n	8005f3a <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8005ee0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	b292      	uxth	r2, r2
 8005ee8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005eec:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	b312      	cbz	r2, 8005f3a <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef4:	9600      	str	r6, [sp, #0]
 8005ef6:	4643      	mov	r3, r8
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff ff51 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005f02:	b9b0      	cbnz	r0, 8005f32 <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	d1e7      	bne.n	8005ed8 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f08:	f839 3b02 	ldrh.w	r3, [r9], #2
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8005f14:	e7e4      	b.n	8005ee0 <HAL_UART_Transmit+0x64>
      return  HAL_ERROR;
 8005f16:	2001      	movs	r0, #1
}
 8005f18:	b003      	add	sp, #12
 8005f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005f1e:	2002      	movs	r0, #2
}
 8005f20:	b003      	add	sp, #12
 8005f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1cd      	bne.n	8005ec8 <HAL_UART_Transmit+0x4c>
 8005f2c:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8005f2e:	461d      	mov	r5, r3
 8005f30:	e7ca      	b.n	8005ec8 <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 8005f32:	2003      	movs	r0, #3
}
 8005f34:	b003      	add	sp, #12
 8005f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f3a:	9600      	str	r6, [sp, #0]
 8005f3c:	4643      	mov	r3, r8
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2140      	movs	r1, #64	; 0x40
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7ff ff2e 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d1f2      	bne.n	8005f32 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005f50:	e7e2      	b.n	8005f18 <HAL_UART_Transmit+0x9c>
 8005f52:	bf00      	nop

08005f54 <UART_CheckIdleState>:
{
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	2600      	movs	r6, #0
{
 8005f5a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005f60:	f7fd fae4 	bl	800352c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005f6a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6c:	d40c      	bmi.n	8005f88 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	075b      	lsls	r3, r3, #29
 8005f72:	d418      	bmi.n	8005fa6 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f74:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f76:	2220      	movs	r2, #32
  return HAL_OK;
 8005f78:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005f7c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005f84:	b002      	add	sp, #8
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4632      	mov	r2, r6
 8005f90:	4603      	mov	r3, r0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff ff04 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	b978      	cbnz	r0, 8005fbe <UART_CheckIdleState+0x6a>
 8005f9e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	075b      	lsls	r3, r3, #29
 8005fa4:	d5e6      	bpl.n	8005f74 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005faa:	9200      	str	r2, [sp, #0]
 8005fac:	462b      	mov	r3, r5
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff fef5 	bl	8005da4 <UART_WaitOnFlagUntilTimeout>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0da      	beq.n	8005f74 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8005fbe:	2003      	movs	r0, #3
}
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}

08005fc4 <HAL_UART_Init>:
  if (huart == NULL)
 8005fc4:	b370      	cbz	r0, 8006024 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fcc:	b32b      	cbz	r3, 800601a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8005fce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	2324      	movs	r3, #36	; 0x24
 8005fd2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005fd4:	6813      	ldr	r3, [r2, #0]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff fd5b 	bl	8005a98 <UART_SetConfig>
 8005fe2:	2801      	cmp	r0, #1
 8005fe4:	d017      	beq.n	8006016 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe8:	b98b      	cbnz	r3, 800600e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ffa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006002:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006004:	601a      	str	r2, [r3, #0]
}
 8006006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800600a:	f7ff bfa3 	b.w	8005f54 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff fe70 	bl	8005cf4 <UART_AdvFeatureConfig>
 8006014:	e7e9      	b.n	8005fea <HAL_UART_Init+0x26>
}
 8006016:	2001      	movs	r0, #1
 8006018:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800601a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800601e:	f7fb fc2f 	bl	8001880 <HAL_UART_MspInit>
 8006022:	e7d4      	b.n	8005fce <HAL_UART_Init+0xa>
}
 8006024:	2001      	movs	r0, #1
 8006026:	4770      	bx	lr

08006028 <tp_init>:
tp_dev_t s_tTouch;

void tp_init(void)
{

	xpt2046_init();
 8006028:	f000 bbf4 	b.w	8006814 <xpt2046_init>

0800602c <tp_draw_touch_point>:
}

void tp_draw_touch_point(uint16_t hwXpos, uint16_t hwYpos, uint16_t hwColor)
{
 800602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	4615      	mov	r5, r2
 8006034:	4604      	mov	r4, r0
	lcd_draw_line(hwXpos - 12, hwYpos, hwXpos + 13, hwYpos, hwColor);
 8006036:	f100 020d 	add.w	r2, r0, #13
 800603a:	380c      	subs	r0, #12
{
 800603c:	460e      	mov	r6, r1
	lcd_draw_line(hwXpos - 12, hwYpos, hwXpos + 13, hwYpos, hwColor);
 800603e:	460b      	mov	r3, r1
 8006040:	9500      	str	r5, [sp, #0]
 8006042:	b292      	uxth	r2, r2
 8006044:	b280      	uxth	r0, r0
 8006046:	f7fc fd37 	bl	8002ab8 <lcd_draw_line>
	lcd_draw_line(hwXpos, hwYpos - 12, hwXpos, hwYpos + 13, hwColor);
 800604a:	f106 030d 	add.w	r3, r6, #13
 800604e:	f1a6 010c 	sub.w	r1, r6, #12
 8006052:	b29b      	uxth	r3, r3
 8006054:	4622      	mov	r2, r4
 8006056:	4620      	mov	r0, r4
 8006058:	9500      	str	r5, [sp, #0]
 800605a:	b289      	uxth	r1, r1
	lcd_draw_point(hwXpos + 1, hwYpos + 1, hwColor);
 800605c:	f104 0801 	add.w	r8, r4, #1
	lcd_draw_line(hwXpos, hwYpos - 12, hwXpos, hwYpos + 13, hwColor);
 8006060:	f7fc fd2a 	bl	8002ab8 <lcd_draw_line>
	lcd_draw_point(hwXpos + 1, hwYpos + 1, hwColor);
 8006064:	fa1f f888 	uxth.w	r8, r8
 8006068:	1c71      	adds	r1, r6, #1
	lcd_draw_point(hwXpos - 1, hwYpos + 1, hwColor);
 800606a:	1e67      	subs	r7, r4, #1
	lcd_draw_point(hwXpos + 1, hwYpos + 1, hwColor);
 800606c:	b289      	uxth	r1, r1
 800606e:	4640      	mov	r0, r8
 8006070:	462a      	mov	r2, r5
	lcd_draw_point(hwXpos - 1, hwYpos + 1, hwColor);
 8006072:	b2bf      	uxth	r7, r7
	lcd_draw_point(hwXpos + 1, hwYpos + 1, hwColor);
 8006074:	9103      	str	r1, [sp, #12]
 8006076:	f7fc fc19 	bl	80028ac <lcd_draw_point>
	lcd_draw_point(hwXpos - 1, hwYpos + 1, hwColor);
 800607a:	9903      	ldr	r1, [sp, #12]
 800607c:	4638      	mov	r0, r7
 800607e:	462a      	mov	r2, r5
 8006080:	f7fc fc14 	bl	80028ac <lcd_draw_point>
	lcd_draw_point(hwXpos + 1, hwYpos - 1, hwColor);
 8006084:	1e71      	subs	r1, r6, #1
 8006086:	b289      	uxth	r1, r1
 8006088:	4640      	mov	r0, r8
 800608a:	462a      	mov	r2, r5
 800608c:	9103      	str	r1, [sp, #12]
 800608e:	f7fc fc0d 	bl	80028ac <lcd_draw_point>
	lcd_draw_point(hwXpos - 1, hwYpos - 1, hwColor);
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	462a      	mov	r2, r5
 8006096:	4638      	mov	r0, r7
 8006098:	f7fc fc08 	bl	80028ac <lcd_draw_point>
	lcd_draw_circle(hwXpos, hwYpos, 6, hwColor);
 800609c:	462b      	mov	r3, r5
 800609e:	4631      	mov	r1, r6
 80060a0:	4620      	mov	r0, r4
 80060a2:	2206      	movs	r2, #6
}
 80060a4:	b004      	add	sp, #16
 80060a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	lcd_draw_circle(hwXpos, hwYpos, 6, hwColor);
 80060aa:	f7fc bd4d 	b.w	8002b48 <lcd_draw_circle>
 80060ae:	bf00      	nop

080060b0 <tp_show_info>:

void tp_show_info(uint16_t hwXpos0, uint16_t hwYpos0,
                     uint16_t hwXpos1, uint16_t hwYpos1,
                     uint16_t hwXpos2, uint16_t hwYpos2,
                     uint16_t hwXpos3, uint16_t hwYpos3, uint16_t hwFac)
{
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	b087      	sub	sp, #28

	lcd_display_string(40, 160, (const uint8_t *)"x1", 16, RED);
 80060b6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
{
 80060ba:	4681      	mov	r9, r0
 80060bc:	4688      	mov	r8, r1
 80060be:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 80060c2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80060c6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80060ca:	9103      	str	r1, [sp, #12]
 80060cc:	4617      	mov	r7, r2
 80060ce:	461e      	mov	r6, r3
 80060d0:	9004      	str	r0, [sp, #16]
	lcd_display_string(40, 160, (const uint8_t *)"x1", 16, RED);
 80060d2:	4a48      	ldr	r2, [pc, #288]	; (80061f4 <tp_show_info+0x144>)
 80060d4:	9400      	str	r4, [sp, #0]
 80060d6:	2310      	movs	r3, #16
 80060d8:	21a0      	movs	r1, #160	; 0xa0
 80060da:	2028      	movs	r0, #40	; 0x28
{
 80060dc:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 80060e0:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80060e4:	9505      	str	r5, [sp, #20]
	lcd_display_string(40, 160, (const uint8_t *)"x1", 16, RED);
 80060e6:	f7fc fcb1 	bl	8002a4c <lcd_display_string>
	lcd_display_string(40 + 80, 160, (const uint8_t *)"y1", 16, RED);
 80060ea:	4a43      	ldr	r2, [pc, #268]	; (80061f8 <tp_show_info+0x148>)
 80060ec:	9400      	str	r4, [sp, #0]
 80060ee:	2310      	movs	r3, #16
 80060f0:	21a0      	movs	r1, #160	; 0xa0
 80060f2:	2078      	movs	r0, #120	; 0x78
 80060f4:	f7fc fcaa 	bl	8002a4c <lcd_display_string>

	lcd_display_string(40, 180, (const uint8_t *)"x2", 16, RED);
 80060f8:	4a40      	ldr	r2, [pc, #256]	; (80061fc <tp_show_info+0x14c>)
 80060fa:	9400      	str	r4, [sp, #0]
 80060fc:	2310      	movs	r3, #16
 80060fe:	21b4      	movs	r1, #180	; 0xb4
 8006100:	2028      	movs	r0, #40	; 0x28
 8006102:	f7fc fca3 	bl	8002a4c <lcd_display_string>
	lcd_display_string(40 + 80, 180, (const uint8_t *)"y2", 16, RED);
 8006106:	4a3e      	ldr	r2, [pc, #248]	; (8006200 <tp_show_info+0x150>)
 8006108:	9400      	str	r4, [sp, #0]
 800610a:	2310      	movs	r3, #16
 800610c:	21b4      	movs	r1, #180	; 0xb4
 800610e:	2078      	movs	r0, #120	; 0x78
 8006110:	f7fc fc9c 	bl	8002a4c <lcd_display_string>

	lcd_display_string(40, 200, (const uint8_t *)"x3", 16, RED);
 8006114:	4a3b      	ldr	r2, [pc, #236]	; (8006204 <tp_show_info+0x154>)
 8006116:	9400      	str	r4, [sp, #0]
 8006118:	2310      	movs	r3, #16
 800611a:	21c8      	movs	r1, #200	; 0xc8
 800611c:	2028      	movs	r0, #40	; 0x28
 800611e:	f7fc fc95 	bl	8002a4c <lcd_display_string>
	lcd_display_string(40 + 80, 200, (const uint8_t *)"y3", 16, RED);
 8006122:	4a39      	ldr	r2, [pc, #228]	; (8006208 <tp_show_info+0x158>)
 8006124:	9400      	str	r4, [sp, #0]
 8006126:	2310      	movs	r3, #16
 8006128:	21c8      	movs	r1, #200	; 0xc8
 800612a:	2078      	movs	r0, #120	; 0x78
 800612c:	f7fc fc8e 	bl	8002a4c <lcd_display_string>

	lcd_display_string(40, 220, (const uint8_t *)"x4", 16, RED);
 8006130:	4a36      	ldr	r2, [pc, #216]	; (800620c <tp_show_info+0x15c>)
 8006132:	9400      	str	r4, [sp, #0]
 8006134:	2310      	movs	r3, #16
 8006136:	21dc      	movs	r1, #220	; 0xdc
 8006138:	2028      	movs	r0, #40	; 0x28
 800613a:	f7fc fc87 	bl	8002a4c <lcd_display_string>
	lcd_display_string(40 + 80, 220, (const uint8_t *)"y4", 16, RED);
 800613e:	4a34      	ldr	r2, [pc, #208]	; (8006210 <tp_show_info+0x160>)
 8006140:	9400      	str	r4, [sp, #0]
 8006142:	2310      	movs	r3, #16
 8006144:	21dc      	movs	r1, #220	; 0xdc
 8006146:	2078      	movs	r0, #120	; 0x78
 8006148:	f7fc fc80 	bl	8002a4c <lcd_display_string>

	lcd_display_string(40, 240, (const uint8_t *)"fac is:", 16, RED);
 800614c:	2310      	movs	r3, #16

	lcd_display_num(40 + 24, 160, hwXpos0, 4, 16, RED);
 800614e:	461d      	mov	r5, r3
	lcd_display_string(40, 240, (const uint8_t *)"fac is:", 16, RED);
 8006150:	4a30      	ldr	r2, [pc, #192]	; (8006214 <tp_show_info+0x164>)
 8006152:	9400      	str	r4, [sp, #0]
 8006154:	21f0      	movs	r1, #240	; 0xf0
 8006156:	2028      	movs	r0, #40	; 0x28
 8006158:	f7fc fc78 	bl	8002a4c <lcd_display_string>
	lcd_display_num(40 + 24, 160, hwXpos0, 4, 16, RED);
 800615c:	464a      	mov	r2, r9
 800615e:	e9cd 5400 	strd	r5, r4, [sp]
 8006162:	2304      	movs	r3, #4
 8006164:	21a0      	movs	r1, #160	; 0xa0
 8006166:	2040      	movs	r0, #64	; 0x40
 8006168:	f7fc fc14 	bl	8002994 <lcd_display_num>
	lcd_display_num(40 + 24 + 80, 160, hwYpos0, 4, 16, RED);
 800616c:	4642      	mov	r2, r8
 800616e:	e9cd 5400 	strd	r5, r4, [sp]
 8006172:	2304      	movs	r3, #4
 8006174:	21a0      	movs	r1, #160	; 0xa0
 8006176:	2090      	movs	r0, #144	; 0x90
 8006178:	f7fc fc0c 	bl	8002994 <lcd_display_num>

	lcd_display_num(40 + 24, 180, hwXpos1, 4, 16, RED);
 800617c:	463a      	mov	r2, r7
 800617e:	e9cd 5400 	strd	r5, r4, [sp]
 8006182:	2304      	movs	r3, #4
 8006184:	21b4      	movs	r1, #180	; 0xb4
 8006186:	2040      	movs	r0, #64	; 0x40
 8006188:	f7fc fc04 	bl	8002994 <lcd_display_num>
	lcd_display_num(40 + 24 + 80, 180, hwYpos1, 4, 16, RED);
 800618c:	4632      	mov	r2, r6
 800618e:	e9cd 5400 	strd	r5, r4, [sp]
 8006192:	2304      	movs	r3, #4
 8006194:	21b4      	movs	r1, #180	; 0xb4
 8006196:	2090      	movs	r0, #144	; 0x90
 8006198:	f7fc fbfc 	bl	8002994 <lcd_display_num>

	lcd_display_num(40 + 24, 200, hwXpos2, 4, 16, RED);
 800619c:	465a      	mov	r2, fp
 800619e:	e9cd 5400 	strd	r5, r4, [sp]
 80061a2:	2304      	movs	r3, #4
 80061a4:	21c8      	movs	r1, #200	; 0xc8
 80061a6:	2040      	movs	r0, #64	; 0x40
 80061a8:	f7fc fbf4 	bl	8002994 <lcd_display_num>
	lcd_display_num(40 + 24 + 80, 200, hwYpos2, 4, 16, RED);
 80061ac:	4652      	mov	r2, sl
 80061ae:	e9cd 5400 	strd	r5, r4, [sp]
 80061b2:	2304      	movs	r3, #4
 80061b4:	21c8      	movs	r1, #200	; 0xc8
 80061b6:	2090      	movs	r0, #144	; 0x90
 80061b8:	f7fc fbec 	bl	8002994 <lcd_display_num>

	lcd_display_num(40 + 24, 220, hwXpos3, 4, 16, RED);
 80061bc:	9a03      	ldr	r2, [sp, #12]
 80061be:	e9cd 5400 	strd	r5, r4, [sp]
 80061c2:	2304      	movs	r3, #4
 80061c4:	21dc      	movs	r1, #220	; 0xdc
 80061c6:	2040      	movs	r0, #64	; 0x40
 80061c8:	f7fc fbe4 	bl	8002994 <lcd_display_num>
	lcd_display_num(40 + 24 + 80, 220, hwYpos3, 4, 16, RED);
 80061cc:	9a04      	ldr	r2, [sp, #16]
 80061ce:	e9cd 5400 	strd	r5, r4, [sp]
 80061d2:	2304      	movs	r3, #4
 80061d4:	21dc      	movs	r1, #220	; 0xdc
 80061d6:	2090      	movs	r0, #144	; 0x90
 80061d8:	f7fc fbdc 	bl	8002994 <lcd_display_num>

	lcd_display_num(40 + 56, 240, hwFac, 3, 16, RED);
 80061dc:	9a05      	ldr	r2, [sp, #20]
 80061de:	2303      	movs	r3, #3
 80061e0:	21f0      	movs	r1, #240	; 0xf0
 80061e2:	2060      	movs	r0, #96	; 0x60
 80061e4:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
}
 80061e8:	b007      	add	sp, #28
 80061ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lcd_display_num(40 + 56, 240, hwFac, 3, 16, RED);
 80061ee:	f7fc bbd1 	b.w	8002994 <lcd_display_num>
 80061f2:	bf00      	nop
 80061f4:	0803c020 	.word	0x0803c020
 80061f8:	0803c024 	.word	0x0803c024
 80061fc:	0803c028 	.word	0x0803c028
 8006200:	0803c02c 	.word	0x0803c02c
 8006204:	0803c030 	.word	0x0803c030
 8006208:	0803c034 	.word	0x0803c034
 800620c:	0803c038 	.word	0x0803c038
 8006210:	0803c03c 	.word	0x0803c03c
 8006214:	0803c040 	.word	0x0803c040

08006218 <tp_scan>:

uint8_t tp_scan(uint8_t chCoordType)
{
 8006218:	b510      	push	{r4, lr}
	if (!(__XPT2046_IRQ_READ())) {
 800621a:	2108      	movs	r1, #8
{
 800621c:	4604      	mov	r4, r0
	if (!(__XPT2046_IRQ_READ())) {
 800621e:	482c      	ldr	r0, [pc, #176]	; (80062d0 <tp_scan+0xb8>)
 8006220:	f7fd fc10 	bl	8003a44 <HAL_GPIO_ReadPin>
 8006224:	b978      	cbnz	r0, 8006246 <tp_scan+0x2e>
		if (chCoordType) {
			xpt2046_twice_read_xy(&s_tTouch.hwXpos, &s_tTouch.hwYpos);
 8006226:	492b      	ldr	r1, [pc, #172]	; (80062d4 <tp_scan+0xbc>)
 8006228:	1e88      	subs	r0, r1, #2
		if (chCoordType) {
 800622a:	b1c4      	cbz	r4, 800625e <tp_scan+0x46>
			xpt2046_twice_read_xy(&s_tTouch.hwXpos, &s_tTouch.hwYpos);
 800622c:	f000 fb70 	bl	8006910 <xpt2046_twice_read_xy>
 8006230:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <tp_scan+0xc0>)
		} else if (xpt2046_twice_read_xy(&s_tTouch.hwXpos, &s_tTouch.hwYpos)) {
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
		}
		if (0 == (s_tTouch.chStatus & TP_PRESS_DOWN)) {
 8006232:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006236:	2a00      	cmp	r2, #0
 8006238:	db42      	blt.n	80062c0 <tp_scan+0xa8>
			s_tTouch.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800623a:	21c0      	movs	r1, #192	; 0xc0
			s_tTouch.hwXpos0 = s_tTouch.hwXpos;
 800623c:	685a      	ldr	r2, [r3, #4]
			s_tTouch.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800623e:	7219      	strb	r1, [r3, #8]
			s_tTouch.hwXpos0 = s_tTouch.hwXpos;
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	2080      	movs	r0, #128	; 0x80
			s_tTouch.hwYpos = 0xffff;
		}
	}

	return (s_tTouch.chStatus & TP_PRESS_DOWN);
}
 8006244:	bd10      	pop	{r4, pc}
		if (s_tTouch.chStatus & TP_PRESS_DOWN) {
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <tp_scan+0xc0>)
 8006248:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800624c:	7a1a      	ldrb	r2, [r3, #8]
 800624e:	2900      	cmp	r1, #0
 8006250:	db38      	blt.n	80062c4 <tp_scan+0xac>
			s_tTouch.hwXpos = 0xffff;
 8006252:	2000      	movs	r0, #0
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	e9c3 0200 	strd	r0, r2, [r3]
}
 800625c:	bd10      	pop	{r4, pc}
		} else if (xpt2046_twice_read_xy(&s_tTouch.hwXpos, &s_tTouch.hwYpos)) {
 800625e:	f000 fb57 	bl	8006910 <xpt2046_twice_read_xy>
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006262:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <tp_scan+0xc0>)
		} else if (xpt2046_twice_read_xy(&s_tTouch.hwXpos, &s_tTouch.hwYpos)) {
 8006264:	2800      	cmp	r0, #0
 8006266:	d0e4      	beq.n	8006232 <tp_scan+0x1a>
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006268:	889a      	ldrh	r2, [r3, #4]
 800626a:	ed93 5a04 	vldr	s10, [r3, #16]
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 800626e:	edd3 5a05 	vldr	s11, [r3, #20]
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006272:	ee06 2a10 	vmov	s12, r2
 8006276:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800627a:	ee07 2a10 	vmov	s14, r2
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 800627e:	88da      	ldrh	r2, [r3, #6]
 8006280:	ee06 2a90 	vmov	s13, r2
 8006284:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006288:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 800628c:	ee07 2a90 	vmov	s15, r2
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 8006294:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 8006298:	eea5 7a06 	vfma.f32	s14, s10, s12
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 800629c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 80062a0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 80062a4:	eee5 7aa6 	vfma.f32	s15, s11, s13
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 80062a8:	ee17 2a10 	vmov	r2, s14
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 80062ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			s_tTouch.hwXpos = s_tTouch.fXfac * s_tTouch.hwXpos + s_tTouch.iXoff;
 80062b0:	809a      	strh	r2, [r3, #4]
			s_tTouch.hwYpos = s_tTouch.fYfac * s_tTouch.hwYpos + s_tTouch.iYoff;
 80062b2:	ee17 2a90 	vmov	r2, s15
 80062b6:	80da      	strh	r2, [r3, #6]
		if (0 == (s_tTouch.chStatus & TP_PRESS_DOWN)) {
 80062b8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80062bc:	2a00      	cmp	r2, #0
 80062be:	dabc      	bge.n	800623a <tp_scan+0x22>
 80062c0:	2080      	movs	r0, #128	; 0x80
}
 80062c2:	bd10      	pop	{r4, pc}
			s_tTouch.chStatus &= ~(1 << 7);
 80062c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062c8:	721a      	strb	r2, [r3, #8]
 80062ca:	2000      	movs	r0, #0
}
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	bf00      	nop
 80062d0:	48000400 	.word	0x48000400
 80062d4:	2000c466 	.word	0x2000c466
 80062d8:	2000c460 	.word	0x2000c460
 80062dc:	00000000 	.word	0x00000000

080062e0 <tp_adjust>:




void tp_adjust(void)
{	
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	ed2d 8b08 	vpush	{d8-d11}
	uint8_t  cnt = 0;
	uint16_t hwTimeout = 0, d1, d2, pos_temp[4][2];
	uint32_t tem1, tem2;
	float fac;				

	lcd_clear_screen(WHITE);
 80062e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	
 80062ec:	b08f      	sub	sp, #60	; 0x3c
	lcd_clear_screen(WHITE);
 80062ee:	f7fc f983 	bl	80025f8 <lcd_clear_screen>
	lcd_display_string(40, 40, (const uint8_t *)"Please use the stylus click the cross on the screen. The cross will always move until the screen adjustment is completed.",
 80062f2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80062f6:	2128      	movs	r1, #40	; 0x28
 80062f8:	4608      	mov	r0, r1
 80062fa:	2310      	movs	r3, #16
 80062fc:	4a90      	ldr	r2, [pc, #576]	; (8006540 <tp_adjust+0x260>)
 80062fe:	9400      	str	r4, [sp, #0]
 8006300:	f7fc fba4 	bl	8002a4c <lcd_display_string>
					16, RED);
	tp_draw_touch_point(20, 20, RED);
 8006304:	2114      	movs	r1, #20
	s_tTouch.chStatus = 0;
 8006306:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8006554 <tp_adjust+0x274>
					tem1+=tem2;
					d2=sqrt(tem1);
					fac=(float)d1/d2;
					if(fac<0.95||fac>1.05||d1==0||d2==0) {
						cnt=0;
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);  
 800630a:	eddf 9a8e 	vldr	s19, [pc, #568]	; 8006544 <tp_adjust+0x264>
						tp_draw_touch_point(LCD_WIDTH - 20, LCD_HEIGHT - 20, WHITE);
						tp_draw_touch_point(20, 20, RED);
						continue;
					}

					s_tTouch.fXfac = (float)(LCD_WIDTH - 40) / (int16_t)(pos_temp[1][0] - pos_temp[0][0]);	
 800630e:	ed9f ba8e 	vldr	s22, [pc, #568]	; 8006548 <tp_adjust+0x268>
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 8006312:	eddf aa8e 	vldr	s21, [pc, #568]	; 800654c <tp_adjust+0x26c>

					s_tTouch.fYfac = (float)(LCD_HEIGHT - 40) / (int16_t)(pos_temp[2][1] - pos_temp[0][1]);	  
 8006316:	ed9f aa8e 	vldr	s20, [pc, #568]	; 8006550 <tp_adjust+0x270>
	tp_draw_touch_point(20, 20, RED);
 800631a:	4622      	mov	r2, r4
 800631c:	4608      	mov	r0, r1
 800631e:	f7ff fe85 	bl	800602c <tp_draw_touch_point>
	s_tTouch.chStatus = 0;
 8006322:	2500      	movs	r5, #0
	s_tTouch.fXfac = 0;
 8006324:	2300      	movs	r3, #0
	s_tTouch.chStatus = 0;
 8006326:	f88b 5008 	strb.w	r5, [fp, #8]
	s_tTouch.fXfac = 0;
 800632a:	f8cb 3010 	str.w	r3, [fp, #16]
	uint8_t  cnt = 0;
 800632e:	462c      	mov	r4, r5
		tp_scan(1);
 8006330:	2001      	movs	r0, #1
 8006332:	f7ff ff71 	bl	8006218 <tp_scan>
		if((s_tTouch.chStatus & 0xC0) == TP_PRESSED) {	
 8006336:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800633a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800633e:	2a40      	cmp	r2, #64	; 0x40
 8006340:	f040 80e8 	bne.w	8006514 <tp_adjust+0x234>
			cnt ++;	  
 8006344:	1c61      	adds	r1, r4, #1
			pos_temp[cnt][0] = s_tTouch.hwXpos;
 8006346:	aa0e      	add	r2, sp, #56	; 0x38
 8006348:	eb02 0284 	add.w	r2, r2, r4, lsl #2
			s_tTouch.chStatus &= ~(1 << 6);
 800634c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
			cnt ++;	  
 8006350:	b2cc      	uxtb	r4, r1
			pos_temp[cnt][0] = s_tTouch.hwXpos;
 8006352:	f8bb 0004 	ldrh.w	r0, [fp, #4]
			pos_temp[cnt][1] = s_tTouch.hwYpos;
 8006356:	f8bb 1006 	ldrh.w	r1, [fp, #6]
			s_tTouch.chStatus &= ~(1 << 6);
 800635a:	f88b 3008 	strb.w	r3, [fp, #8]
			pos_temp[cnt][0] = s_tTouch.hwXpos;
 800635e:	1e63      	subs	r3, r4, #1
 8006360:	f822 0c10 	strh.w	r0, [r2, #-16]
			pos_temp[cnt][1] = s_tTouch.hwYpos;
 8006364:	f822 1c0e 	strh.w	r1, [r2, #-14]
			switch(cnt) {			   
 8006368:	2b03      	cmp	r3, #3
 800636a:	f200 80b2 	bhi.w	80064d2 <tp_adjust+0x1f2>
 800636e:	e8df f003 	tbb	[pc, r3]
 8006372:	b6c4      	.short	0xb6c4
 8006374:	02a2      	.short	0x02a2
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[1][1]));//y1-y2
 8006376:	f8bd 702a 	ldrh.w	r7, [sp, #42]	; 0x2a
 800637a:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[1][0]));//x1-x2
 800637e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8006382:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[1][1]));//y1-y2
 8006386:	eba7 0009 	sub.w	r0, r7, r9
 800638a:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[1][0]));//x1-x2
 800638c:	eba8 0306 	sub.w	r3, r8, r6
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[1][1]));//y1-y2
 8006390:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[1][0]));//x1-x2
 8006392:	b21b      	sxth	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[1][1]));//y1-y2
 8006394:	bfb8      	it	lt
 8006396:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[1][0]));//x1-x2
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfb8      	it	lt
 800639c:	425b      	neglt	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[1][1]));//y1-y2
 800639e:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[1][0]));//x1-x2
 80063a0:	b29b      	uxth	r3, r3
					tem2*=tem2;
 80063a2:	fb00 f000 	mul.w	r0, r0, r0
					d1=sqrt(tem1);
 80063a6:	fb03 0003 	mla	r0, r3, r3, r0
 80063aa:	f7fa f8b3 	bl	8000514 <__aeabi_ui2d>
 80063ae:	ec41 0b10 	vmov	d0, r0, r1
 80063b2:	f003 fe6d 	bl	800a090 <sqrt>
 80063b6:	ec51 0b10 	vmov	r0, r1, d0
 80063ba:	f7fa fbd5 	bl	8000b68 <__aeabi_d2uiz>
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063be:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80063c2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063c6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80063ca:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063ce:	9209      	str	r2, [sp, #36]	; 0x24
					d1=sqrt(tem1);
 80063d0:	4603      	mov	r3, r0
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063d2:	ebaa 0002 	sub.w	r0, sl, r2
 80063d6:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063d8:	1b0a      	subs	r2, r1, r4
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063da:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063dc:	b212      	sxth	r2, r2
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063de:	bfb8      	it	lt
 80063e0:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	bfb8      	it	lt
 80063e6:	4252      	neglt	r2, r2
					tem2=abs((int16_t)(pos_temp[2][1]-pos_temp[3][1]));//y3-y4
 80063e8:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063ea:	b292      	uxth	r2, r2
					tem2*=tem2;
 80063ec:	fb00 f000 	mul.w	r0, r0, r0
					d2=sqrt(tem1);
 80063f0:	fb02 0002 	mla	r0, r2, r2, r0
					d1=sqrt(tem1);
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ee08 3a90 	vmov	s17, r3
					tem1=abs((int16_t)(pos_temp[2][0]-pos_temp[3][0]));//x3-x4
 80063fa:	9408      	str	r4, [sp, #32]
 80063fc:	9107      	str	r1, [sp, #28]
					d2=sqrt(tem1);
 80063fe:	f7fa f889 	bl	8000514 <__aeabi_ui2d>
 8006402:	ec41 0b10 	vmov	d0, r0, r1
 8006406:	f003 fe43 	bl	800a090 <sqrt>
 800640a:	ec51 0b10 	vmov	r0, r1, d0
 800640e:	f7fa fbab 	bl	8000b68 <__aeabi_d2uiz>
 8006412:	b283      	uxth	r3, r0
 8006414:	ee09 3a10 	vmov	s18, r3
					fac=(float)d1/d2;
 8006418:	eeb8 7a68 	vcvt.f32.u32	s14, s17
 800641c:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 8006420:	ee87 8a27 	vdiv.f32	s16, s14, s15
					if(fac<0.95||fac>1.05||d1==0||d2==0) {
 8006424:	ee18 0a10 	vmov	r0, s16
 8006428:	f7fa f896 	bl	8000558 <__aeabi_f2d>
 800642c:	a340      	add	r3, pc, #256	; (adr r3, 8006530 <tp_adjust+0x250>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	4604      	mov	r4, r0
 8006434:	460d      	mov	r5, r1
 8006436:	f7fa fb59 	bl	8000aec <__aeabi_dcmplt>
 800643a:	b970      	cbnz	r0, 800645a <tp_adjust+0x17a>
 800643c:	a33e      	add	r3, pc, #248	; (adr r3, 8006538 <tp_adjust+0x258>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800644a:	b930      	cbnz	r0, 800645a <tp_adjust+0x17a>
 800644c:	ee18 3a90 	vmov	r3, s17
 8006450:	b11b      	cbz	r3, 800645a <tp_adjust+0x17a>
 8006452:	ee19 3a10 	vmov	r3, s18
 8006456:	2b00      	cmp	r3, #0
 8006458:	d17e      	bne.n	8006558 <tp_adjust+0x278>
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);  
 800645a:	ee28 8a29 	vmul.f32	s16, s16, s19
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	9303      	str	r3, [sp, #12]
 8006462:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	ee18 3a10 	vmov	r3, s16
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//??��o?��oy?Y   
 800646e:	b29c      	uxth	r4, r3
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4632      	mov	r2, r6
 8006476:	464b      	mov	r3, r9
 8006478:	4639      	mov	r1, r7
 800647a:	4640      	mov	r0, r8
 800647c:	9404      	str	r4, [sp, #16]
 800647e:	f8cd a004 	str.w	sl, [sp, #4]
						lcd_fill_rect(96, 240, 24, 16, WHITE);
 8006482:	f64f 74ff 	movw	r4, #65535	; 0xffff
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//??��o?��oy?Y   
 8006486:	f7ff fe13 	bl	80060b0 <tp_show_info>
						lcd_fill_rect(96, 240, 24, 16, WHITE);
 800648a:	2310      	movs	r3, #16
 800648c:	9400      	str	r4, [sp, #0]
 800648e:	2218      	movs	r2, #24
 8006490:	21f0      	movs	r1, #240	; 0xf0
 8006492:	2060      	movs	r0, #96	; 0x60
 8006494:	f7fc fbae 	bl	8002bf4 <lcd_fill_rect>
						tp_draw_touch_point(LCD_WIDTH - 20, LCD_HEIGHT - 20, WHITE);
 8006498:	4622      	mov	r2, r4
 800649a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800649e:	20dc      	movs	r0, #220	; 0xdc
 80064a0:	f7ff fdc4 	bl	800602c <tp_draw_touch_point>
						tp_draw_touch_point(20, 20, RED);
 80064a4:	2114      	movs	r1, #20
 80064a6:	4608      	mov	r0, r1
 80064a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
			hwTimeout = 0;
 80064ac:	2500      	movs	r5, #0
						tp_draw_touch_point(20, 20, RED);
 80064ae:	f7ff fdbd 	bl	800602c <tp_draw_touch_point>
						cnt=0;
 80064b2:	462c      	mov	r4, r5
						continue;
 80064b4:	e73c      	b.n	8006330 <tp_adjust+0x50>
					tp_draw_touch_point(20, LCD_HEIGHT - 20, WHITE);
 80064b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80064be:	2014      	movs	r0, #20
 80064c0:	f7ff fdb4 	bl	800602c <tp_draw_touch_point>
					tp_draw_touch_point(LCD_WIDTH - 20, LCD_HEIGHT - 20, RED);
 80064c4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80064c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80064cc:	20dc      	movs	r0, #220	; 0xdc
 80064ce:	f7ff fdad 	bl	800602c <tp_draw_touch_point>
					HAL_Delay(1000); 
 					lcd_clear_screen(WHITE);  
					return;				 
			}
		}
		HAL_Delay(1000);
 80064d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064d6:	f7fd f82f 	bl	8003538 <HAL_Delay>
		if (++ hwTimeout >= 100) {
 80064da:	2501      	movs	r5, #1
 80064dc:	e728      	b.n	8006330 <tp_adjust+0x50>
					tp_draw_touch_point(LCD_WIDTH - 20, 20, WHITE);
 80064de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e2:	2114      	movs	r1, #20
 80064e4:	20dc      	movs	r0, #220	; 0xdc
 80064e6:	f7ff fda1 	bl	800602c <tp_draw_touch_point>
					tp_draw_touch_point(20, LCD_HEIGHT - 20, RED);
 80064ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80064ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80064f2:	2014      	movs	r0, #20
 80064f4:	f7ff fd9a 	bl	800602c <tp_draw_touch_point>
					break;
 80064f8:	e7eb      	b.n	80064d2 <tp_adjust+0x1f2>
					tp_draw_touch_point(20, 20, WHITE);
 80064fa:	2114      	movs	r1, #20
 80064fc:	4608      	mov	r0, r1
 80064fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006502:	f7ff fd93 	bl	800602c <tp_draw_touch_point>
					tp_draw_touch_point(LCD_WIDTH - 20, 20, RED);
 8006506:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800650a:	2114      	movs	r1, #20
 800650c:	20dc      	movs	r0, #220	; 0xdc
 800650e:	f7ff fd8d 	bl	800602c <tp_draw_touch_point>
					break;
 8006512:	e7de      	b.n	80064d2 <tp_adjust+0x1f2>
		if (++ hwTimeout >= 100) {
 8006514:	3501      	adds	r5, #1
		HAL_Delay(1000);
 8006516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		if (++ hwTimeout >= 100) {
 800651a:	b2ad      	uxth	r5, r5
		HAL_Delay(1000);
 800651c:	f7fd f80c 	bl	8003538 <HAL_Delay>
		if (++ hwTimeout >= 100) {
 8006520:	2d63      	cmp	r5, #99	; 0x63
 8006522:	f67f af05 	bls.w	8006330 <tp_adjust+0x50>
			break;
		}
 	}
}
 8006526:	b00f      	add	sp, #60	; 0x3c
 8006528:	ecbd 8b08 	vpop	{d8-d11}
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	66666666 	.word	0x66666666
 8006534:	3fee6666 	.word	0x3fee6666
 8006538:	cccccccd 	.word	0xcccccccd
 800653c:	3ff0cccc 	.word	0x3ff0cccc
 8006540:	0803c048 	.word	0x0803c048
 8006544:	42c80000 	.word	0x42c80000
 8006548:	43480000 	.word	0x43480000
 800654c:	43700000 	.word	0x43700000
 8006550:	438c0000 	.word	0x438c0000
 8006554:	2000c460 	.word	0x2000c460
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[2][0]));//x1-x3
 8006558:	9b07      	ldr	r3, [sp, #28]
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[2][1]));//y1-y3
 800655a:	eba7 000a 	sub.w	r0, r7, sl
 800655e:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[2][0]));//x1-x3
 8006560:	eba8 0303 	sub.w	r3, r8, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[2][1]));//y1-y3
 8006564:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[2][0]));//x1-x3
 8006566:	b21b      	sxth	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[2][1]));//y1-y3
 8006568:	bfb8      	it	lt
 800656a:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[2][0]));//x1-x3
 800656c:	2b00      	cmp	r3, #0
 800656e:	bfb8      	it	lt
 8006570:	425b      	neglt	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[2][1]));//y1-y3
 8006572:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[2][0]));//x1-x3
 8006574:	b29b      	uxth	r3, r3
					tem2*=tem2;
 8006576:	fb00 f000 	mul.w	r0, r0, r0
					d1=sqrt(tem1);//
 800657a:	fb03 0003 	mla	r0, r3, r3, r0
 800657e:	f7f9 ffc9 	bl	8000514 <__aeabi_ui2d>
 8006582:	ec41 0b10 	vmov	d0, r0, r1
 8006586:	f003 fd83 	bl	800a090 <sqrt>
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[3][1]));//y2-y4
 800658a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658c:	eba9 0003 	sub.w	r0, r9, r3
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[3][0]));//x2-x4
 8006590:	9b08      	ldr	r3, [sp, #32]
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[3][1]));//y2-y4
 8006592:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[3][0]));//x2-x4
 8006594:	1af3      	subs	r3, r6, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[3][1]));//y2-y4
 8006596:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[3][0]));//x2-x4
 8006598:	b21b      	sxth	r3, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[3][1]));//y2-y4
 800659a:	bfb8      	it	lt
 800659c:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[3][0]));//x2-x4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	425b      	neglt	r3, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[3][1]));//y2-y4
 80065a4:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[3][0]));//x2-x4
 80065a6:	b29b      	uxth	r3, r3
					tem2*=tem2;
 80065a8:	fb00 f000 	mul.w	r0, r0, r0
					d2=sqrt(tem1);//
 80065ac:	fb03 0003 	mla	r0, r3, r3, r0
					d1=sqrt(tem1);//
 80065b0:	ec55 4b10 	vmov	r4, r5, d0
					d2=sqrt(tem1);//
 80065b4:	f7f9 ffae 	bl	8000514 <__aeabi_ui2d>
 80065b8:	ec41 0b10 	vmov	d0, r0, r1
 80065bc:	f003 fd68 	bl	800a090 <sqrt>
					d1=sqrt(tem1);//
 80065c0:	4629      	mov	r1, r5
 80065c2:	4620      	mov	r0, r4
					d2=sqrt(tem1);//
 80065c4:	ec55 4b10 	vmov	r4, r5, d0
					d1=sqrt(tem1);//
 80065c8:	f7fa face 	bl	8000b68 <__aeabi_d2uiz>
					d2=sqrt(tem1);//
 80065cc:	4629      	mov	r1, r5
					fac=(float)d1/d2;
 80065ce:	b283      	uxth	r3, r0
					d2=sqrt(tem1);//
 80065d0:	4620      	mov	r0, r4
					fac=(float)d1/d2;
 80065d2:	ee08 3a90 	vmov	s17, r3
					d2=sqrt(tem1);//
 80065d6:	f7fa fac7 	bl	8000b68 <__aeabi_d2uiz>
					fac=(float)d1/d2;
 80065da:	b280      	uxth	r0, r0
 80065dc:	ee07 0a90 	vmov	s15, r0
 80065e0:	eef8 8a68 	vcvt.f32.u32	s17, s17
 80065e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e8:	ee88 8aa7 	vdiv.f32	s16, s17, s15
					if(fac<0.95||fac>1.05) {
 80065ec:	ee18 0a10 	vmov	r0, s16
 80065f0:	f7f9 ffb2 	bl	8000558 <__aeabi_f2d>
 80065f4:	a383      	add	r3, pc, #524	; (adr r3, 8006804 <tp_adjust+0x524>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	4604      	mov	r4, r0
 80065fc:	460d      	mov	r5, r1
 80065fe:	f7fa fa75 	bl	8000aec <__aeabi_dcmplt>
 8006602:	2800      	cmp	r0, #0
 8006604:	f040 80d0 	bne.w	80067a8 <tp_adjust+0x4c8>
 8006608:	a380      	add	r3, pc, #512	; (adr r3, 800680c <tp_adjust+0x52c>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f7fa fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8006616:	2800      	cmp	r0, #0
 8006618:	f040 80c6 	bne.w	80067a8 <tp_adjust+0x4c8>
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[2][0]));//x1-x3
 800661c:	9b07      	ldr	r3, [sp, #28]
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[2][1]));//y1-y3
 800661e:	eba9 000a 	sub.w	r0, r9, sl
 8006622:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[2][0]));//x1-x3
 8006624:	1af3      	subs	r3, r6, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[2][1]));//y1-y3
 8006626:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[2][0]));//x1-x3
 8006628:	b21b      	sxth	r3, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[2][1]));//y1-y3
 800662a:	bfb8      	it	lt
 800662c:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[2][0]));//x1-x3
 800662e:	2b00      	cmp	r3, #0
 8006630:	bfb8      	it	lt
 8006632:	425b      	neglt	r3, r3
					tem2=abs((int16_t)(pos_temp[1][1]-pos_temp[2][1]));//y1-y3
 8006634:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[1][0]-pos_temp[2][0]));//x1-x3
 8006636:	b29b      	uxth	r3, r3
					tem2*=tem2;
 8006638:	fb00 f000 	mul.w	r0, r0, r0
					d1=sqrt(tem1);//
 800663c:	fb03 0003 	mla	r0, r3, r3, r0
 8006640:	f7f9 ff68 	bl	8000514 <__aeabi_ui2d>
 8006644:	ec41 0b10 	vmov	d0, r0, r1
 8006648:	f003 fd22 	bl	800a090 <sqrt>
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[3][1]));//y2-y4
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	1af8      	subs	r0, r7, r3
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[3][0]));//x2-x4
 8006650:	9b08      	ldr	r3, [sp, #32]
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[3][1]));//y2-y4
 8006652:	b200      	sxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[3][0]));//x2-x4
 8006654:	eba8 0303 	sub.w	r3, r8, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[3][1]));//y2-y4
 8006658:	2800      	cmp	r0, #0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[3][0]));//x2-x4
 800665a:	b21b      	sxth	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[3][1]));//y2-y4
 800665c:	bfb8      	it	lt
 800665e:	4240      	neglt	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[3][0]));//x2-x4
 8006660:	2b00      	cmp	r3, #0
 8006662:	bfb8      	it	lt
 8006664:	425b      	neglt	r3, r3
					tem2=abs((int16_t)(pos_temp[0][1]-pos_temp[3][1]));//y2-y4
 8006666:	b280      	uxth	r0, r0
					tem1=abs((int16_t)(pos_temp[0][0]-pos_temp[3][0]));//x2-x4
 8006668:	b29b      	uxth	r3, r3
					tem2*=tem2;
 800666a:	fb00 f000 	mul.w	r0, r0, r0
					d2=sqrt(tem1);//
 800666e:	fb03 0003 	mla	r0, r3, r3, r0
					d1=sqrt(tem1);//
 8006672:	ec55 4b10 	vmov	r4, r5, d0
					d2=sqrt(tem1);//
 8006676:	f7f9 ff4d 	bl	8000514 <__aeabi_ui2d>
 800667a:	ec41 0b10 	vmov	d0, r0, r1
 800667e:	f003 fd07 	bl	800a090 <sqrt>
					d1=sqrt(tem1);//
 8006682:	4629      	mov	r1, r5
 8006684:	4620      	mov	r0, r4
					d2=sqrt(tem1);//
 8006686:	ec55 4b10 	vmov	r4, r5, d0
					d1=sqrt(tem1);//
 800668a:	f7fa fa6d 	bl	8000b68 <__aeabi_d2uiz>
					d2=sqrt(tem1);//
 800668e:	4629      	mov	r1, r5
					fac=(float)d1/d2;
 8006690:	b283      	uxth	r3, r0
					d2=sqrt(tem1);//
 8006692:	4620      	mov	r0, r4
					fac=(float)d1/d2;
 8006694:	ee08 3a10 	vmov	s16, r3
					d2=sqrt(tem1);//
 8006698:	f7fa fa66 	bl	8000b68 <__aeabi_d2uiz>
					fac=(float)d1/d2;
 800669c:	b280      	uxth	r0, r0
 800669e:	ee07 0a90 	vmov	s15, r0
 80066a2:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80066a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066aa:	eec8 8a27 	vdiv.f32	s17, s16, s15
					if(fac<0.95||fac>1.05) {
 80066ae:	ee18 0a90 	vmov	r0, s17
 80066b2:	f7f9 ff51 	bl	8000558 <__aeabi_f2d>
 80066b6:	a353      	add	r3, pc, #332	; (adr r3, 8006804 <tp_adjust+0x524>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	f7fa fa14 	bl	8000aec <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d17a      	bne.n	80067be <tp_adjust+0x4de>
 80066c8:	a350      	add	r3, pc, #320	; (adr r3, 800680c <tp_adjust+0x52c>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7fa fa29 	bl	8000b28 <__aeabi_dcmpgt>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d171      	bne.n	80067be <tp_adjust+0x4de>
					s_tTouch.fXfac = (float)(LCD_WIDTH - 40) / (int16_t)(pos_temp[1][0] - pos_temp[0][0]);	
 80066da:	eba6 0208 	sub.w	r2, r6, r8
 80066de:	b212      	sxth	r2, r2
 80066e0:	ee07 2a90 	vmov	s15, r2
					s_tTouch.fYfac = (float)(LCD_HEIGHT - 40) / (int16_t)(pos_temp[2][1] - pos_temp[0][1]);	  
 80066e4:	ebaa 0307 	sub.w	r3, sl, r7
 80066e8:	b21b      	sxth	r3, r3
					s_tTouch.fXfac = (float)(LCD_WIDTH - 40) / (int16_t)(pos_temp[1][0] - pos_temp[0][0]);	
 80066ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					s_tTouch.fYfac = (float)(LCD_HEIGHT - 40) / (int16_t)(pos_temp[2][1] - pos_temp[0][1]);	  
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					s_tTouch.fXfac = (float)(LCD_WIDTH - 40) / (int16_t)(pos_temp[1][0] - pos_temp[0][0]);	
 80066f6:	eecb 6a07 	vdiv.f32	s13, s22, s14
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 80066fa:	4446      	add	r6, r8
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 80066fc:	4457      	add	r7, sl
					s_tTouch.fYfac = (float)(LCD_HEIGHT - 40) / (int16_t)(pos_temp[2][1] - pos_temp[0][1]);	  
 80066fe:	eeca 5a27 	vdiv.f32	s11, s20, s15
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 8006702:	ee07 6a90 	vmov	s15, r6
 8006706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 800670a:	ee07 7a90 	vmov	s15, r7
 800670e:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80067f8 <tp_adjust+0x518>
					s_tTouch.fXfac = (float)(LCD_WIDTH - 40) / (int16_t)(pos_temp[1][0] - pos_temp[0][0]);	
 8006712:	edcb 6a04 	vstr	s13, [fp, #16]
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 8006716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 800671a:	eeb0 5a6a 	vmov.f32	s10, s21
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 800671e:	eea5 6ae7 	vfms.f32	s12, s11, s15
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 8006722:	eea6 5ac7 	vfms.f32	s10, s13, s14
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 8006726:	eef0 7a46 	vmov.f32	s15, s12
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 800672a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800672e:	ee25 7a06 	vmul.f32	s14, s10, s12
					if(abs(s_tTouch.fXfac) > 2 || abs(s_tTouch.fYfac) > 2) {
 8006732:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 8006736:	ee67 7a86 	vmul.f32	s15, s15, s12
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 800673a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					if(abs(s_tTouch.fXfac) > 2 || abs(s_tTouch.fYfac) > 2) {
 800673e:	ee16 3a90 	vmov	r3, s13
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 8006742:	ee17 2a10 	vmov	r2, s14
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 8006746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					if(abs(s_tTouch.fXfac) > 2 || abs(s_tTouch.fYfac) > 2) {
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfb8      	it	lt
 800674e:	425b      	neglt	r3, r3
					s_tTouch.iXoff = (LCD_WIDTH - s_tTouch.fXfac * (pos_temp[1][0] + pos_temp[0][0])) / 2;
 8006750:	f8ab 200a 	strh.w	r2, [fp, #10]
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 8006754:	ee17 2a90 	vmov	r2, s15
					if(abs(s_tTouch.fXfac) > 2 || abs(s_tTouch.fYfac) > 2) {
 8006758:	2b02      	cmp	r3, #2
					s_tTouch.fYfac = (float)(LCD_HEIGHT - 40) / (int16_t)(pos_temp[2][1] - pos_temp[0][1]);	  
 800675a:	edcb 5a05 	vstr	s11, [fp, #20]
					s_tTouch.iYoff = (LCD_HEIGHT - s_tTouch.fYfac * (pos_temp[2][1] + pos_temp[0][1])) / 2;
 800675e:	f8ab 200c 	strh.w	r2, [fp, #12]
					if(abs(s_tTouch.fXfac) > 2 || abs(s_tTouch.fYfac) > 2) {
 8006762:	dc08      	bgt.n	8006776 <tp_adjust+0x496>
 8006764:	eefd 7ae5 	vcvt.s32.f32	s15, s11
 8006768:	ee17 3a90 	vmov	r3, s15
 800676c:	2b00      	cmp	r3, #0
 800676e:	bfb8      	it	lt
 8006770:	425b      	neglt	r3, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	dd26      	ble.n	80067c4 <tp_adjust+0x4e4>
 				    	tp_draw_touch_point(LCD_WIDTH - 20, LCD_HEIGHT - 20, WHITE);
 8006776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800677a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800677e:	20dc      	movs	r0, #220	; 0xdc
 8006780:	f7ff fc54 	bl	800602c <tp_draw_touch_point>
						tp_draw_touch_point(20, 20, RED);								
 8006784:	2114      	movs	r1, #20
 8006786:	4608      	mov	r0, r1
 8006788:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800678c:	f7ff fc4e 	bl	800602c <tp_draw_touch_point>
						lcd_display_string(40, 26, (const uint8_t *)"TP Need readjust!", 16, RED);
 8006790:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4a19      	ldr	r2, [pc, #100]	; (80067fc <tp_adjust+0x51c>)
 8006798:	2310      	movs	r3, #16
 800679a:	211a      	movs	r1, #26
 800679c:	2028      	movs	r0, #40	; 0x28
			hwTimeout = 0;
 800679e:	2500      	movs	r5, #0
						lcd_display_string(40, 26, (const uint8_t *)"TP Need readjust!", 16, RED);
 80067a0:	f7fc f954 	bl	8002a4c <lcd_display_string>
						cnt=0;
 80067a4:	462c      	mov	r4, r5
						continue;
 80067a6:	e5c3      	b.n	8006330 <tp_adjust+0x50>
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//??��o?��oy?Y   
 80067a8:	ee68 7a29 	vmul.f32	s15, s16, s19
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	ee17 3a90 	vmov	r3, s15
 80067bc:	e657      	b.n	800646e <tp_adjust+0x18e>
 						tp_show_info(pos_temp[0][0],pos_temp[0][1],pos_temp[1][0],pos_temp[1][1],pos_temp[2][0],pos_temp[2][1],pos_temp[3][0],pos_temp[3][1],fac*100);//??��o?��oy?Y   
 80067be:	ee68 7aa9 	vmul.f32	s15, s17, s19
 80067c2:	e7f3      	b.n	80067ac <tp_adjust+0x4cc>
					lcd_clear_screen(WHITE);
 80067c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80067c8:	f7fb ff16 	bl	80025f8 <lcd_clear_screen>
					lcd_display_string(35, 110, (const uint8_t *)"Touch Screen Adjust OK!", 16, BLUE);
 80067cc:	231f      	movs	r3, #31
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <tp_adjust+0x520>)
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	216e      	movs	r1, #110	; 0x6e
 80067d4:	2310      	movs	r3, #16
 80067d6:	2023      	movs	r0, #35	; 0x23
 80067d8:	f7fc f938 	bl	8002a4c <lcd_display_string>
					HAL_Delay(1000); 
 80067dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067e0:	f7fc feaa 	bl	8003538 <HAL_Delay>
 					lcd_clear_screen(WHITE);  
 80067e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80067e8:	b00f      	add	sp, #60	; 0x3c
 80067ea:	ecbd 8b08 	vpop	{d8-d11}
 80067ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 					lcd_clear_screen(WHITE);  
 80067f2:	f7fb bf01 	b.w	80025f8 <lcd_clear_screen>
 80067f6:	bf00      	nop
 80067f8:	43a00000 	.word	0x43a00000
 80067fc:	0803c0c4 	.word	0x0803c0c4
 8006800:	0803c0d8 	.word	0x0803c0d8
 8006804:	66666666 	.word	0x66666666
 8006808:	3fee6666 	.word	0x3fee6666
 800680c:	cccccccd 	.word	0xcccccccd
 8006810:	3ff0cccc 	.word	0x3ff0cccc

08006814 <xpt2046_init>:
}


void xpt2046_init(void)
{		
	__XPT2046_CS_SET();
 8006814:	4802      	ldr	r0, [pc, #8]	; (8006820 <xpt2046_init+0xc>)
 8006816:	2201      	movs	r2, #1
 8006818:	2120      	movs	r1, #32
 800681a:	f7fd b919 	b.w	8003a50 <HAL_GPIO_WritePin>
 800681e:	bf00      	nop
 8006820:	48000400 	.word	0x48000400

08006824 <xpt2046_read_ad_value>:
}

uint16_t xpt2046_read_ad_value(uint8_t chCmd)
{
 8006824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t hwData = 0;
    
    __XPT2046_CS_CLR();
 8006828:	4f1d      	ldr	r7, [pc, #116]	; (80068a0 <xpt2046_read_ad_value+0x7c>)
		HAL_SPI_TransmitReceive(&hspi1,&chData,&r_val,1,0xff);
 800682a:	4d1e      	ldr	r5, [pc, #120]	; (80068a4 <xpt2046_read_ad_value+0x80>)
{
 800682c:	b084      	sub	sp, #16
		HAL_SPI_TransmitReceive(&hspi1,&chData,&r_val,1,0xff);
 800682e:	26ff      	movs	r6, #255	; 0xff
{
 8006830:	4604      	mov	r4, r0
    __XPT2046_CS_CLR();
 8006832:	2200      	movs	r2, #0
 8006834:	4638      	mov	r0, r7
 8006836:	2120      	movs	r1, #32
 8006838:	f7fd f90a 	bl	8003a50 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1,&chData,&r_val,1,0xff);
 800683c:	f10d 020f 	add.w	r2, sp, #15
 8006840:	f10d 010e 	add.w	r1, sp, #14
 8006844:	4628      	mov	r0, r5
 8006846:	9600      	str	r6, [sp, #0]
 8006848:	2301      	movs	r3, #1
 800684a:	f88d 400e 	strb.w	r4, [sp, #14]
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	f7fe ffcd 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006856:	f10d 020f 	add.w	r2, sp, #15
 800685a:	f10d 010e 	add.w	r1, sp, #14
 800685e:	9600      	str	r6, [sp, #0]
 8006860:	4628      	mov	r0, r5
 8006862:	2301      	movs	r3, #1
 8006864:	f88d 800e 	strb.w	r8, [sp, #14]
 8006868:	f7fe ffc2 	bl	80057f0 <HAL_SPI_TransmitReceive>
    xpt2046_write_byte(chCmd);
    hwData = xpt2046_write_byte(0x00);
 800686c:	f89d 400f 	ldrb.w	r4, [sp, #15]
		HAL_SPI_TransmitReceive(&hspi1,&chData,&r_val,1,0xff);
 8006870:	9600      	str	r6, [sp, #0]
 8006872:	f10d 020f 	add.w	r2, sp, #15
 8006876:	f10d 010e 	add.w	r1, sp, #14
 800687a:	4628      	mov	r0, r5
 800687c:	2301      	movs	r3, #1
 800687e:	f88d 800e 	strb.w	r8, [sp, #14]
 8006882:	f7fe ffb5 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return r_val;
 8006886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    hwData <<= 8;
    hwData |= xpt2046_write_byte(0x00);
    hwData >>= 4;
   __XPT2046_CS_SET();
 800688a:	4638      	mov	r0, r7
 800688c:	2201      	movs	r2, #1
 800688e:	2120      	movs	r1, #32
    hwData <<= 8;
 8006890:	0224      	lsls	r4, r4, #8
    hwData |= xpt2046_write_byte(0x00);
 8006892:	431c      	orrs	r4, r3
   __XPT2046_CS_SET();
 8006894:	f7fd f8dc 	bl	8003a50 <HAL_GPIO_WritePin>
    
    return hwData;
}
 8006898:	0920      	lsrs	r0, r4, #4
 800689a:	b004      	add	sp, #16
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	48000400 	.word	0x48000400
 80068a4:	20000910 	.word	0x20000910

080068a8 <xpt2046_read_average>:

#define READ_TIMES  5
#define LOST_NUM    1
uint16_t xpt2046_read_average(uint8_t chCmd)
{
 80068a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068aa:	b085      	sub	sp, #20
 80068ac:	ad01      	add	r5, sp, #4
 80068ae:	4606      	mov	r6, r0
 80068b0:	462c      	mov	r4, r5
 80068b2:	f10d 070e 	add.w	r7, sp, #14
    uint8_t i, j;
    uint16_t hwbuffer[READ_TIMES], hwSum = 0, hwTemp;

    for (i = 0; i < READ_TIMES; i ++) {
        hwbuffer[i] = xpt2046_read_ad_value(chCmd);
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ffb4 	bl	8006824 <xpt2046_read_ad_value>
 80068bc:	f824 0b02 	strh.w	r0, [r4], #2
    for (i = 0; i < READ_TIMES; i ++) {
 80068c0:	42bc      	cmp	r4, r7
 80068c2:	d1f8      	bne.n	80068b6 <xpt2046_read_average+0xe>
 80068c4:	2601      	movs	r6, #1
    }
    for (i = 0; i < READ_TIMES - 1; i ++) {
        for (j = i + 1; j < READ_TIMES; j ++) {
 80068c6:	462c      	mov	r4, r5
 80068c8:	3502      	adds	r5, #2
 80068ca:	462a      	mov	r2, r5
 80068cc:	b2f3      	uxtb	r3, r6
            if (hwbuffer[i] > hwbuffer[j]) {
 80068ce:	8821      	ldrh	r1, [r4, #0]
 80068d0:	f832 0b02 	ldrh.w	r0, [r2], #2
        for (j = i + 1; j < READ_TIMES; j ++) {
 80068d4:	3301      	adds	r3, #1
            if (hwbuffer[i] > hwbuffer[j]) {
 80068d6:	4281      	cmp	r1, r0
        for (j = i + 1; j < READ_TIMES; j ++) {
 80068d8:	b2db      	uxtb	r3, r3
                hwTemp = hwbuffer[i];
                hwbuffer[i] = hwbuffer[j];
 80068da:	bf84      	itt	hi
 80068dc:	8020      	strhhi	r0, [r4, #0]
                hwbuffer[j] = hwTemp;
 80068de:	f822 1c02 	strhhi.w	r1, [r2, #-2]
        for (j = i + 1; j < READ_TIMES; j ++) {
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d1f3      	bne.n	80068ce <xpt2046_read_average+0x26>
    for (i = 0; i < READ_TIMES - 1; i ++) {
 80068e6:	3601      	adds	r6, #1
 80068e8:	2e05      	cmp	r6, #5
 80068ea:	d1ec      	bne.n	80068c6 <xpt2046_read_average+0x1e>
            }
        }
    }
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++) {
        hwSum += hwbuffer[i];
 80068ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80068f0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80068f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    }
    hwTemp = hwSum / (READ_TIMES - 2 * LOST_NUM);
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <xpt2046_read_average+0x64>)
        hwSum += hwbuffer[i];
 80068fa:	4408      	add	r0, r1
 80068fc:	fa12 f080 	uxtah	r0, r2, r0
    hwTemp = hwSum / (READ_TIMES - 2 * LOST_NUM);
 8006900:	b280      	uxth	r0, r0
 8006902:	fba3 3000 	umull	r3, r0, r3, r0

    return hwTemp;
}
 8006906:	0840      	lsrs	r0, r0, #1
 8006908:	b005      	add	sp, #20
 800690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690c:	aaaaaaab 	.word	0xaaaaaaab

08006910 <xpt2046_twice_read_xy>:
}


#define ERR_RANGE 50
bool xpt2046_twice_read_xy(uint16_t *phwXpos, uint16_t *phwYpos)
{
 8006910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	4680      	mov	r8, r0
	*phwXpos = xpt2046_read_average(0xD0);
 8006916:	20d0      	movs	r0, #208	; 0xd0
{
 8006918:	460f      	mov	r7, r1
	*phwXpos = xpt2046_read_average(0xD0);
 800691a:	f7ff ffc5 	bl	80068a8 <xpt2046_read_average>
 800691e:	4604      	mov	r4, r0
	*phwYpos = xpt2046_read_average(0x90);
 8006920:	2090      	movs	r0, #144	; 0x90
 8006922:	f7ff ffc1 	bl	80068a8 <xpt2046_read_average>
 8006926:	4606      	mov	r6, r0
	*phwXpos = xpt2046_read_average(0xD0);
 8006928:	20d0      	movs	r0, #208	; 0xd0
 800692a:	f7ff ffbd 	bl	80068a8 <xpt2046_read_average>
 800692e:	4605      	mov	r5, r0
	*phwYpos = xpt2046_read_average(0x90);
 8006930:	2090      	movs	r0, #144	; 0x90
 8006932:	f7ff ffb9 	bl	80068a8 <xpt2046_read_average>
	uint16_t hwXpos1, hwYpos1, hwXpos2, hwYpos2;

	xpt2046_read_xy(&hwXpos1, &hwYpos1);
	xpt2046_read_xy(&hwXpos2, &hwYpos2);

	if (((hwXpos2 <= hwXpos1 && hwXpos1 < hwXpos2 + ERR_RANGE) || (hwXpos1 <= hwXpos2 && hwXpos2 < hwXpos1 + ERR_RANGE))
 8006936:	42a5      	cmp	r5, r4
 8006938:	d90c      	bls.n	8006954 <xpt2046_twice_read_xy+0x44>
 800693a:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800693e:	42ab      	cmp	r3, r5
 8006940:	db05      	blt.n	800694e <xpt2046_twice_read_xy+0x3e>
	&& ((hwYpos2 <= hwYpos1 && hwYpos1 < hwYpos2 + ERR_RANGE) || (hwYpos1 <= hwYpos2 && hwYpos2 < hwYpos1 + ERR_RANGE))) {
 8006942:	42b0      	cmp	r0, r6
 8006944:	d90d      	bls.n	8006962 <xpt2046_twice_read_xy+0x52>
 8006946:	f106 0331 	add.w	r3, r6, #49	; 0x31
 800694a:	4283      	cmp	r3, r0
 800694c:	da10      	bge.n	8006970 <xpt2046_twice_read_xy+0x60>
		*phwXpos = (hwXpos1 + hwXpos2) / 2;
		*phwYpos = (hwYpos1 + hwYpos2) / 2;
		return true;
	}

	return false;
 800694e:	2000      	movs	r0, #0
}
 8006950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (((hwXpos2 <= hwXpos1 && hwXpos1 < hwXpos2 + ERR_RANGE) || (hwXpos1 <= hwXpos2 && hwXpos2 < hwXpos1 + ERR_RANGE))
 8006954:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8006958:	42a3      	cmp	r3, r4
 800695a:	daf2      	bge.n	8006942 <xpt2046_twice_read_xy+0x32>
 800695c:	42a5      	cmp	r5, r4
 800695e:	d1f6      	bne.n	800694e <xpt2046_twice_read_xy+0x3e>
 8006960:	e7eb      	b.n	800693a <xpt2046_twice_read_xy+0x2a>
	&& ((hwYpos2 <= hwYpos1 && hwYpos1 < hwYpos2 + ERR_RANGE) || (hwYpos1 <= hwYpos2 && hwYpos2 < hwYpos1 + ERR_RANGE))) {
 8006962:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8006966:	42b3      	cmp	r3, r6
 8006968:	da02      	bge.n	8006970 <xpt2046_twice_read_xy+0x60>
 800696a:	42b0      	cmp	r0, r6
 800696c:	d1ef      	bne.n	800694e <xpt2046_twice_read_xy+0x3e>
 800696e:	e7ea      	b.n	8006946 <xpt2046_twice_read_xy+0x36>
		*phwXpos = (hwXpos1 + hwXpos2) / 2;
 8006970:	442c      	add	r4, r5
		*phwYpos = (hwYpos1 + hwYpos2) / 2;
 8006972:	4406      	add	r6, r0
		*phwXpos = (hwXpos1 + hwXpos2) / 2;
 8006974:	1064      	asrs	r4, r4, #1
		*phwYpos = (hwYpos1 + hwYpos2) / 2;
 8006976:	1076      	asrs	r6, r6, #1
		*phwXpos = (hwXpos1 + hwXpos2) / 2;
 8006978:	f8a8 4000 	strh.w	r4, [r8]
		return true;
 800697c:	2001      	movs	r0, #1
		*phwYpos = (hwYpos1 + hwYpos2) / 2;
 800697e:	803e      	strh	r6, [r7, #0]
}
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006984 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800698c:	f7fc fdce 	bl	800352c <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006990:	4f10      	ldr	r7, [pc, #64]	; (80069d4 <wait_ready+0x50>)
	waitSpiTimerTickStart = HAL_GetTick();
 8006992:	4604      	mov	r4, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006994:	f04f 08ff 	mov.w	r8, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006998:	2632      	movs	r6, #50	; 0x32
 800699a:	e004      	b.n	80069a6 <wait_ready+0x22>
	do {
		d = xchg_spi(0xFF);
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800699c:	f7fc fdc6 	bl	800352c <HAL_GetTick>
 80069a0:	1b03      	subs	r3, r0, r4
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	d212      	bcs.n	80069cc <wait_ready+0x48>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80069a6:	2301      	movs	r3, #1
 80069a8:	9600      	str	r6, [sp, #0]
 80069aa:	f10d 020f 	add.w	r2, sp, #15
 80069ae:	f10d 010e 	add.w	r1, sp, #14
 80069b2:	4638      	mov	r0, r7
 80069b4:	f88d 800e 	strb.w	r8, [sp, #14]
 80069b8:	f7fe ff1a 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 80069bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80069c0:	2bff      	cmp	r3, #255	; 0xff
 80069c2:	d1eb      	bne.n	800699c <wait_ready+0x18>
 80069c4:	2001      	movs	r0, #1

	return (d == 0xFF) ? 1 : 0;
}
 80069c6:	b004      	add	sp, #16
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	2000      	movs	r0, #0
 80069ce:	b004      	add	sp, #16
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	20000910 	.word	0x20000910

080069d8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80069d8:	b510      	push	{r4, lr}
	CS_HIGH();		/* Set CS# high */
 80069da:	480a      	ldr	r0, [pc, #40]	; (8006a04 <despiselect+0x2c>)
{
 80069dc:	b084      	sub	sp, #16
	CS_HIGH();		/* Set CS# high */
 80069de:	2201      	movs	r2, #1
 80069e0:	2110      	movs	r1, #16
 80069e2:	f7fd f835 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80069e6:	2332      	movs	r3, #50	; 0x32
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	24ff      	movs	r4, #255	; 0xff
 80069ec:	2301      	movs	r3, #1
 80069ee:	f10d 020f 	add.w	r2, sp, #15
 80069f2:	f10d 010e 	add.w	r1, sp, #14
 80069f6:	4804      	ldr	r0, [pc, #16]	; (8006a08 <despiselect+0x30>)
 80069f8:	f88d 400e 	strb.w	r4, [sp, #14]
 80069fc:	f7fe fef8 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 8006a00:	b004      	add	sp, #16
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	48000400 	.word	0x48000400
 8006a08:	20000910 	.word	0x20000910

08006a0c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006a0c:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 8006a0e:	4811      	ldr	r0, [pc, #68]	; (8006a54 <spiselect+0x48>)
{
 8006a10:	b084      	sub	sp, #16
	CS_LOW();		/* Set CS# low */
 8006a12:	2200      	movs	r2, #0
 8006a14:	2110      	movs	r1, #16
 8006a16:	f7fd f81b 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a1a:	2332      	movs	r3, #50	; 0x32
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	480e      	ldr	r0, [pc, #56]	; (8006a58 <spiselect+0x4c>)
 8006a20:	24ff      	movs	r4, #255	; 0xff
 8006a22:	2301      	movs	r3, #1
 8006a24:	f10d 020f 	add.w	r2, sp, #15
 8006a28:	f10d 010e 	add.w	r1, sp, #14
 8006a2c:	f88d 400e 	strb.w	r4, [sp, #14]
 8006a30:	f7fe fede 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006a34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a38:	f7ff ffa4 	bl	8006984 <wait_ready>
 8006a3c:	b118      	cbz	r0, 8006a46 <spiselect+0x3a>
 8006a3e:	2401      	movs	r4, #1

	despiselect();
	return 0;	/* Timeout */
}
 8006a40:	4620      	mov	r0, r4
 8006a42:	b004      	add	sp, #16
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	4604      	mov	r4, r0
	despiselect();
 8006a48:	f7ff ffc6 	bl	80069d8 <despiselect>
}
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	b004      	add	sp, #16
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	bf00      	nop
 8006a54:	48000400 	.word	0x48000400
 8006a58:	20000910 	.word	0x20000910

08006a5c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006a5e:	0603      	lsls	r3, r0, #24
{
 8006a60:	b085      	sub	sp, #20
 8006a62:	4604      	mov	r4, r0
 8006a64:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006a66:	d473      	bmi.n	8006b50 <send_cmd+0xf4>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006a68:	2c0c      	cmp	r4, #12
 8006a6a:	d005      	beq.n	8006a78 <send_cmd+0x1c>
		despiselect();
 8006a6c:	f7ff ffb4 	bl	80069d8 <despiselect>
		if (!spiselect()) return 0xFF;
 8006a70:	f7ff ffcc 	bl	8006a0c <spiselect>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d074      	beq.n	8006b62 <send_cmd+0x106>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a78:	2632      	movs	r6, #50	; 0x32
 8006a7a:	f10d 020f 	add.w	r2, sp, #15
 8006a7e:	f10d 010e 	add.w	r1, sp, #14
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006a82:	f044 0740 	orr.w	r7, r4, #64	; 0x40
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a86:	2301      	movs	r3, #1
 8006a88:	4840      	ldr	r0, [pc, #256]	; (8006b8c <send_cmd+0x130>)
 8006a8a:	9600      	str	r6, [sp, #0]
 8006a8c:	f88d 700e 	strb.w	r7, [sp, #14]
 8006a90:	f7fe feae 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006a94:	0e2f      	lsrs	r7, r5, #24
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a96:	f10d 020f 	add.w	r2, sp, #15
 8006a9a:	f10d 010e 	add.w	r1, sp, #14
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	483a      	ldr	r0, [pc, #232]	; (8006b8c <send_cmd+0x130>)
 8006aa2:	9600      	str	r6, [sp, #0]
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006aa4:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006aa8:	f7fe fea2 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006aac:	0c2f      	lsrs	r7, r5, #16
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006aae:	f10d 020f 	add.w	r2, sp, #15
 8006ab2:	f10d 010e 	add.w	r1, sp, #14
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4834      	ldr	r0, [pc, #208]	; (8006b8c <send_cmd+0x130>)
 8006aba:	9600      	str	r6, [sp, #0]
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006abc:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006ac0:	f7fe fe96 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006ac4:	0a2f      	lsrs	r7, r5, #8
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006ac6:	f10d 020f 	add.w	r2, sp, #15
 8006aca:	f10d 010e 	add.w	r1, sp, #14
 8006ace:	2301      	movs	r3, #1
 8006ad0:	482e      	ldr	r0, [pc, #184]	; (8006b8c <send_cmd+0x130>)
 8006ad2:	9600      	str	r6, [sp, #0]
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006ad4:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006ad8:	f7fe fe8a 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006adc:	482b      	ldr	r0, [pc, #172]	; (8006b8c <send_cmd+0x130>)
 8006ade:	9600      	str	r6, [sp, #0]
 8006ae0:	f10d 020f 	add.w	r2, sp, #15
 8006ae4:	f10d 010e 	add.w	r1, sp, #14
 8006ae8:	2301      	movs	r3, #1
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006aea:	f88d 500e 	strb.w	r5, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006aee:	f7fe fe7f 	bl	80057f0 <HAL_SPI_TransmitReceive>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006af2:	b34c      	cbz	r4, 8006b48 <send_cmd+0xec>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006af4:	2c08      	cmp	r4, #8
 8006af6:	d137      	bne.n	8006b68 <send_cmd+0x10c>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006af8:	9600      	str	r6, [sp, #0]
 8006afa:	2487      	movs	r4, #135	; 0x87
 8006afc:	2301      	movs	r3, #1
 8006afe:	4823      	ldr	r0, [pc, #140]	; (8006b8c <send_cmd+0x130>)
 8006b00:	f88d 400e 	strb.w	r4, [sp, #14]
 8006b04:	f10d 020f 	add.w	r2, sp, #15
 8006b08:	f10d 010e 	add.w	r1, sp, #14
 8006b0c:	f7fe fe70 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006b10:	4f1e      	ldr	r7, [pc, #120]	; (8006b8c <send_cmd+0x130>)
{
 8006b12:	240a      	movs	r4, #10
 8006b14:	26ff      	movs	r6, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b16:	2532      	movs	r5, #50	; 0x32
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f10d 020f 	add.w	r2, sp, #15
 8006b1e:	9500      	str	r5, [sp, #0]
 8006b20:	f10d 010e 	add.w	r1, sp, #14
 8006b24:	4638      	mov	r0, r7
 8006b26:	f88d 600e 	strb.w	r6, [sp, #14]
 8006b2a:	f7fe fe61 	bl	80057f0 <HAL_SPI_TransmitReceive>
	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
	} while ((res & 0x80) && --n);
 8006b2e:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    return rxDat;
 8006b32:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f104 33ff 	add.w	r3, r4, #4294967295
 8006b3c:	da02      	bge.n	8006b44 <send_cmd+0xe8>
 8006b3e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006b42:	d1e9      	bne.n	8006b18 <send_cmd+0xbc>

	return res;							/* Return received response */
}
 8006b44:	b005      	add	sp, #20
 8006b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b48:	9600      	str	r6, [sp, #0]
 8006b4a:	2495      	movs	r4, #149	; 0x95
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e7d6      	b.n	8006afe <send_cmd+0xa2>
		res = send_cmd(CMD55, 0);
 8006b50:	2100      	movs	r1, #0
 8006b52:	2037      	movs	r0, #55	; 0x37
 8006b54:	f7ff ff82 	bl	8006a5c <send_cmd>
		if (res > 1) return res;
 8006b58:	2801      	cmp	r0, #1
 8006b5a:	d8f3      	bhi.n	8006b44 <send_cmd+0xe8>
		cmd &= 0x7F;
 8006b5c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8006b60:	e782      	b.n	8006a68 <send_cmd+0xc>
		if (!spiselect()) return 0xFF;
 8006b62:	20ff      	movs	r0, #255	; 0xff
}
 8006b64:	b005      	add	sp, #20
 8006b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	xchg_spi(n);
 8006b68:	2501      	movs	r5, #1
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b6a:	4808      	ldr	r0, [pc, #32]	; (8006b8c <send_cmd+0x130>)
 8006b6c:	9600      	str	r6, [sp, #0]
 8006b6e:	462b      	mov	r3, r5
 8006b70:	f10d 020f 	add.w	r2, sp, #15
 8006b74:	f10d 010e 	add.w	r1, sp, #14
 8006b78:	f88d 500e 	strb.w	r5, [sp, #14]
 8006b7c:	f7fe fe38 	bl	80057f0 <HAL_SPI_TransmitReceive>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006b80:	2c0c      	cmp	r4, #12
 8006b82:	d1c5      	bne.n	8006b10 <send_cmd+0xb4>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b84:	9600      	str	r6, [sp, #0]
 8006b86:	462b      	mov	r3, r5
 8006b88:	24ff      	movs	r4, #255	; 0xff
 8006b8a:	e7b8      	b.n	8006afe <send_cmd+0xa2>
 8006b8c:	20000910 	.word	0x20000910

08006b90 <rcvr_datablock>:
{
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	4604      	mov	r4, r0
 8006b98:	468a      	mov	sl, r1
    spiTimerTickStart = HAL_GetTick();
 8006b9a:	f7fc fcc7 	bl	800352c <HAL_GetTick>
 8006b9e:	4e2c      	ldr	r6, [pc, #176]	; (8006c50 <rcvr_datablock+0xc0>)
    spiTimerTickDelay = waitTicks;
 8006ba0:	4d2c      	ldr	r5, [pc, #176]	; (8006c54 <rcvr_datablock+0xc4>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006ba2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006c58 <rcvr_datablock+0xc8>
    spiTimerTickStart = HAL_GetTick();
 8006ba6:	6030      	str	r0, [r6, #0]
    spiTimerTickDelay = waitTicks;
 8006ba8:	23c8      	movs	r3, #200	; 0xc8
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f04f 08ff 	mov.w	r8, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006bb0:	2732      	movs	r7, #50	; 0x32
}
 8006bb2:	e006      	b.n	8006bc2 <rcvr_datablock+0x32>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006bb4:	f7fc fcba 	bl	800352c <HAL_GetTick>
 8006bb8:	6832      	ldr	r2, [r6, #0]
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006bba:	682b      	ldr	r3, [r5, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006bbc:	1a80      	subs	r0, r0, r2
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	d242      	bcs.n	8006c48 <rcvr_datablock+0xb8>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9700      	str	r7, [sp, #0]
 8006bc6:	f10d 020f 	add.w	r2, sp, #15
 8006bca:	f10d 010e 	add.w	r1, sp, #14
 8006bce:	4648      	mov	r0, r9
 8006bd0:	f88d 800e 	strb.w	r8, [sp, #14]
 8006bd4:	f7fe fe0c 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006bdc:	2bff      	cmp	r3, #255	; 0xff
 8006bde:	d0e9      	beq.n	8006bb4 <rcvr_datablock+0x24>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006be0:	2bfe      	cmp	r3, #254	; 0xfe
 8006be2:	d131      	bne.n	8006c48 <rcvr_datablock+0xb8>
 8006be4:	f10a 3aff 	add.w	sl, sl, #4294967295
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006be8:	4f1b      	ldr	r7, [pc, #108]	; (8006c58 <rcvr_datablock+0xc8>)
 8006bea:	44a2      	add	sl, r4
 8006bec:	25ff      	movs	r5, #255	; 0xff
 8006bee:	3c01      	subs	r4, #1
 8006bf0:	2632      	movs	r6, #50	; 0x32
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	9600      	str	r6, [sp, #0]
 8006bf6:	f10d 020f 	add.w	r2, sp, #15
 8006bfa:	f10d 010e 	add.w	r1, sp, #14
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f88d 500e 	strb.w	r5, [sp, #14]
 8006c04:	f7fe fdf4 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006c08:	f89d 300f 	ldrb.w	r3, [sp, #15]
		*(buff+i) = xchg_spi(0xFF);
 8006c0c:	f804 3f01 	strb.w	r3, [r4, #1]!
	for(UINT i=0; i<btr; i++) {
 8006c10:	45a2      	cmp	sl, r4
 8006c12:	d1ee      	bne.n	8006bf2 <rcvr_datablock+0x62>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c14:	f10d 020f 	add.w	r2, sp, #15
 8006c18:	f10d 010e 	add.w	r1, sp, #14
 8006c1c:	9600      	str	r6, [sp, #0]
 8006c1e:	2301      	movs	r3, #1
 8006c20:	480d      	ldr	r0, [pc, #52]	; (8006c58 <rcvr_datablock+0xc8>)
 8006c22:	f88d 500e 	strb.w	r5, [sp, #14]
 8006c26:	f7fe fde3 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006c2a:	9600      	str	r6, [sp, #0]
 8006c2c:	f10d 020f 	add.w	r2, sp, #15
 8006c30:	f10d 010e 	add.w	r1, sp, #14
 8006c34:	2301      	movs	r3, #1
 8006c36:	4808      	ldr	r0, [pc, #32]	; (8006c58 <rcvr_datablock+0xc8>)
 8006c38:	f88d 500e 	strb.w	r5, [sp, #14]
 8006c3c:	f7fe fdd8 	bl	80057f0 <HAL_SPI_TransmitReceive>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006c40:	2001      	movs	r0, #1
}
 8006c42:	b004      	add	sp, #16
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006c48:	2000      	movs	r0, #0
}
 8006c4a:	b004      	add	sp, #16
 8006c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c50:	2000c478 	.word	0x2000c478
 8006c54:	2000c47c 	.word	0x2000c47c
 8006c58:	20000910 	.word	0x20000910

08006c5c <xmit_datablock>:
{
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	4606      	mov	r6, r0
 8006c62:	b084      	sub	sp, #16
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
{
 8006c68:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006c6a:	f7ff fe8b 	bl	8006984 <wait_ready>
 8006c6e:	b910      	cbnz	r0, 8006c76 <xmit_datablock+0x1a>
}
 8006c70:	b004      	add	sp, #16
 8006c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c76:	2532      	movs	r5, #50	; 0x32
 8006c78:	4829      	ldr	r0, [pc, #164]	; (8006d20 <xmit_datablock+0xc4>)
 8006c7a:	9500      	str	r5, [sp, #0]
 8006c7c:	f10d 020f 	add.w	r2, sp, #15
 8006c80:	f10d 010e 	add.w	r1, sp, #14
 8006c84:	2301      	movs	r3, #1
 8006c86:	f88d 400e 	strb.w	r4, [sp, #14]
 8006c8a:	f7fe fdb1 	bl	80057f0 <HAL_SPI_TransmitReceive>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006c8e:	2cfd      	cmp	r4, #253	; 0xfd
 8006c90:	d041      	beq.n	8006d16 <xmit_datablock+0xba>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c92:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006d20 <xmit_datablock+0xc4>
 8006c96:	1e74      	subs	r4, r6, #1
 8006c98:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
		xchg_spi(*(buff+i));
 8006c9c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006ca0:	9500      	str	r5, [sp, #0]
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f10d 020f 	add.w	r2, sp, #15
 8006ca8:	f10d 010e 	add.w	r1, sp, #14
 8006cac:	4640      	mov	r0, r8
 8006cae:	f88d 700e 	strb.w	r7, [sp, #14]
 8006cb2:	f7fe fd9d 	bl	80057f0 <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 8006cb6:	42b4      	cmp	r4, r6
 8006cb8:	d1f0      	bne.n	8006c9c <xmit_datablock+0x40>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006cba:	24ff      	movs	r4, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006cbc:	f10d 020f 	add.w	r2, sp, #15
 8006cc0:	f10d 010e 	add.w	r1, sp, #14
 8006cc4:	9500      	str	r5, [sp, #0]
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4815      	ldr	r0, [pc, #84]	; (8006d20 <xmit_datablock+0xc4>)
 8006cca:	f88d 400e 	strb.w	r4, [sp, #14]
 8006cce:	f7fe fd8f 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006cd2:	f10d 020f 	add.w	r2, sp, #15
 8006cd6:	f10d 010e 	add.w	r1, sp, #14
 8006cda:	9500      	str	r5, [sp, #0]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	4810      	ldr	r0, [pc, #64]	; (8006d20 <xmit_datablock+0xc4>)
 8006ce0:	f88d 400e 	strb.w	r4, [sp, #14]
 8006ce4:	f7fe fd84 	bl	80057f0 <HAL_SPI_TransmitReceive>
 8006ce8:	9500      	str	r5, [sp, #0]
 8006cea:	f10d 020f 	add.w	r2, sp, #15
 8006cee:	f10d 010e 	add.w	r1, sp, #14
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	480a      	ldr	r0, [pc, #40]	; (8006d20 <xmit_datablock+0xc4>)
 8006cf6:	f88d 400e 	strb.w	r4, [sp, #14]
 8006cfa:	f7fe fd79 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006cfe:	f89d 000f 	ldrb.w	r0, [sp, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006d02:	f000 001f 	and.w	r0, r0, #31
 8006d06:	f1a0 0005 	sub.w	r0, r0, #5
 8006d0a:	fab0 f080 	clz	r0, r0
 8006d0e:	0940      	lsrs	r0, r0, #5
}
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 1;
 8006d16:	2001      	movs	r0, #1
}
 8006d18:	b004      	add	sp, #16
 8006d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000910 	.word	0x20000910

08006d24 <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006d24:	bb90      	cbnz	r0, 8006d8c <USER_SPI_initialize+0x68>
{
 8006d26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006d2a:	4c6f      	ldr	r4, [pc, #444]	; (8006ee8 <USER_SPI_initialize+0x1c4>)
 8006d2c:	7823      	ldrb	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
{
 8006d30:	b087      	sub	sp, #28
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006d32:	d426      	bmi.n	8006d82 <USER_SPI_initialize+0x5e>

	FCLK_SLOW();
 8006d34:	4d6d      	ldr	r5, [pc, #436]	; (8006eec <USER_SPI_initialize+0x1c8>)
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d3c:	61da      	str	r2, [r3, #28]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006d3e:	46a9      	mov	r9, r5
	FCLK_SLOW();
 8006d40:	f04f 080a 	mov.w	r8, #10
 8006d44:	27ff      	movs	r7, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006d46:	2632      	movs	r6, #50	; 0x32
 8006d48:	9600      	str	r6, [sp, #0]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	aa05      	add	r2, sp, #20
 8006d4e:	f10d 0113 	add.w	r1, sp, #19
 8006d52:	4648      	mov	r0, r9
 8006d54:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d58:	f88d 7013 	strb.w	r7, [sp, #19]
 8006d5c:	f7fe fd48 	bl	80057f0 <HAL_SPI_TransmitReceive>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006d60:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8006d64:	d1f0      	bne.n	8006d48 <USER_SPI_initialize+0x24>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006d66:	4641      	mov	r1, r8
 8006d68:	4640      	mov	r0, r8
 8006d6a:	f7ff fe77 	bl	8006a5c <send_cmd>
 8006d6e:	2801      	cmp	r0, #1
 8006d70:	4681      	mov	r9, r0
 8006d72:	d00d      	beq.n	8006d90 <USER_SPI_initialize+0x6c>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 8006d74:	4b5e      	ldr	r3, [pc, #376]	; (8006ef0 <USER_SPI_initialize+0x1cc>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
	despiselect();
 8006d7a:	f7ff fe2d 	bl	80069d8 <despiselect>

	if (ty) {			/* OK */
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	7023      	strb	r3, [r4, #0]
	}

	return Stat;
 8006d82:	7820      	ldrb	r0, [r4, #0]
 8006d84:	b2c0      	uxtb	r0, r0
}
 8006d86:	b007      	add	sp, #28
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006d8c:	2001      	movs	r0, #1
}
 8006d8e:	4770      	bx	lr
    spiTimerTickStart = HAL_GetTick();
 8006d90:	f7fc fbcc 	bl	800352c <HAL_GetTick>
 8006d94:	4f57      	ldr	r7, [pc, #348]	; (8006ef4 <USER_SPI_initialize+0x1d0>)
    spiTimerTickDelay = waitTicks;
 8006d96:	4e58      	ldr	r6, [pc, #352]	; (8006ef8 <USER_SPI_initialize+0x1d4>)
    spiTimerTickStart = HAL_GetTick();
 8006d98:	6038      	str	r0, [r7, #0]
    spiTimerTickDelay = waitTicks;
 8006d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006d9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006da2:	2008      	movs	r0, #8
    spiTimerTickDelay = waitTicks;
 8006da4:	6033      	str	r3, [r6, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006da6:	f7ff fe59 	bl	8006a5c <send_cmd>
 8006daa:	2801      	cmp	r0, #1
 8006dac:	d161      	bne.n	8006e72 <USER_SPI_initialize+0x14e>
 8006dae:	ab05      	add	r3, sp, #20
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006db0:	f8df b138 	ldr.w	fp, [pc, #312]	; 8006eec <USER_SPI_initialize+0x1c8>
 8006db4:	9303      	str	r3, [sp, #12]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006db6:	4698      	mov	r8, r3
 8006db8:	f10d 0918 	add.w	r9, sp, #24
 8006dbc:	f04f 0aff 	mov.w	sl, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006dc0:	2332      	movs	r3, #50	; 0x32
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	f10d 0213 	add.w	r2, sp, #19
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f10d 0112 	add.w	r1, sp, #18
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f88d a012 	strb.w	sl, [sp, #18]
 8006dd4:	f7fe fd0c 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006dd8:	f89d 3013 	ldrb.w	r3, [sp, #19]
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006ddc:	f808 3b01 	strb.w	r3, [r8], #1
 8006de0:	45c1      	cmp	r9, r8
 8006de2:	d1ed      	bne.n	8006dc0 <USER_SPI_initialize+0x9c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006de4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d1c3      	bne.n	8006d74 <USER_SPI_initialize+0x50>
 8006dec:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006df0:	2baa      	cmp	r3, #170	; 0xaa
 8006df2:	d1bf      	bne.n	8006d74 <USER_SPI_initialize+0x50>
 8006df4:	e002      	b.n	8006dfc <USER_SPI_initialize+0xd8>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006df6:	f7ff fe31 	bl	8006a5c <send_cmd>
 8006dfa:	b150      	cbz	r0, 8006e12 <USER_SPI_initialize+0xee>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006dfc:	f7fc fb96 	bl	800352c <HAL_GetTick>
 8006e00:	683b      	ldr	r3, [r7, #0]
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006e02:	6832      	ldr	r2, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e04:	1ac3      	subs	r3, r0, r3
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006e06:	4293      	cmp	r3, r2
 8006e08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e0c:	f04f 00a9 	mov.w	r0, #169	; 0xa9
 8006e10:	d3f1      	bcc.n	8006df6 <USER_SPI_initialize+0xd2>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e12:	f7fc fb8b 	bl	800352c <HAL_GetTick>
 8006e16:	683a      	ldr	r2, [r7, #0]
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006e18:	6833      	ldr	r3, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e1a:	1a80      	subs	r0, r0, r2
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006e1c:	4298      	cmp	r0, r3
 8006e1e:	d2a9      	bcs.n	8006d74 <USER_SPI_initialize+0x50>
 8006e20:	2100      	movs	r1, #0
 8006e22:	203a      	movs	r0, #58	; 0x3a
 8006e24:	f7ff fe1a 	bl	8006a5c <send_cmd>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d1a3      	bne.n	8006d74 <USER_SPI_initialize+0x50>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006e2c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8006eec <USER_SPI_initialize+0x1c8>
 8006e30:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006e34:	27ff      	movs	r7, #255	; 0xff
 8006e36:	2632      	movs	r6, #50	; 0x32
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9600      	str	r6, [sp, #0]
 8006e3c:	f10d 0213 	add.w	r2, sp, #19
 8006e40:	f10d 0112 	add.w	r1, sp, #18
 8006e44:	4640      	mov	r0, r8
 8006e46:	f88d 7012 	strb.w	r7, [sp, #18]
 8006e4a:	f7fe fcd1 	bl	80057f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006e4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006e52:	f80a 3b01 	strb.w	r3, [sl], #1
 8006e56:	45d1      	cmp	r9, sl
 8006e58:	d1ee      	bne.n	8006e38 <USER_SPI_initialize+0x114>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006e5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
	CardType = ty;	/* Card type */
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <USER_SPI_initialize+0x1cc>)
 8006e64:	bf14      	ite	ne
 8006e66:	220c      	movne	r2, #12
 8006e68:	2204      	moveq	r2, #4
 8006e6a:	701a      	strb	r2, [r3, #0]
	despiselect();
 8006e6c:	f7ff fdb4 	bl	80069d8 <despiselect>
	if (ty) {			/* OK */
 8006e70:	e02e      	b.n	8006ed0 <USER_SPI_initialize+0x1ac>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006e72:	4641      	mov	r1, r8
 8006e74:	20a9      	movs	r0, #169	; 0xa9
 8006e76:	f7ff fdf1 	bl	8006a5c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006e7a:	2802      	cmp	r0, #2
 8006e7c:	bf3a      	itte	cc
 8006e7e:	f04f 09a9 	movcc.w	r9, #169	; 0xa9
 8006e82:	f04f 0802 	movcc.w	r8, #2
 8006e86:	f04f 0801 	movcs.w	r8, #1
 8006e8a:	e002      	b.n	8006e92 <USER_SPI_initialize+0x16e>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e8c:	f7ff fde6 	bl	8006a5c <send_cmd>
 8006e90:	b148      	cbz	r0, 8006ea6 <USER_SPI_initialize+0x182>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e92:	f7fc fb4b 	bl	800352c <HAL_GetTick>
 8006e96:	683b      	ldr	r3, [r7, #0]
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e98:	6832      	ldr	r2, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e9a:	1ac3      	subs	r3, r0, r3
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	f04f 0100 	mov.w	r1, #0
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	d3f2      	bcc.n	8006e8c <USER_SPI_initialize+0x168>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006ea6:	f7fc fb41 	bl	800352c <HAL_GetTick>
 8006eaa:	683a      	ldr	r2, [r7, #0]
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006eac:	6833      	ldr	r3, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006eae:	1a80      	subs	r0, r0, r2
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	f4bf af5f 	bcs.w	8006d74 <USER_SPI_initialize+0x50>
 8006eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eba:	2010      	movs	r0, #16
 8006ebc:	f7ff fdce 	bl	8006a5c <send_cmd>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f47f af57 	bne.w	8006d74 <USER_SPI_initialize+0x50>
	CardType = ty;	/* Card type */
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <USER_SPI_initialize+0x1cc>)
 8006ec8:	f883 8000 	strb.w	r8, [r3]
	despiselect();
 8006ecc:	f7ff fd84 	bl	80069d8 <despiselect>
		FCLK_FAST();			/* Set fast clock */
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	61da      	str	r2, [r3, #28]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006ed6:	7823      	ldrb	r3, [r4, #0]
 8006ed8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006edc:	7023      	strb	r3, [r4, #0]
	return Stat;
 8006ede:	7820      	ldrb	r0, [r4, #0]
 8006ee0:	b2c0      	uxtb	r0, r0
}
 8006ee2:	b007      	add	sp, #28
 8006ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee8:	20000080 	.word	0x20000080
 8006eec:	20000910 	.word	0x20000910
 8006ef0:	2000032d 	.word	0x2000032d
 8006ef4:	2000c478 	.word	0x2000c478
 8006ef8:	2000c47c 	.word	0x2000c47c

08006efc <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006efc:	b918      	cbnz	r0, 8006f06 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <USER_SPI_status+0x10>)
 8006f00:	7818      	ldrb	r0, [r3, #0]
 8006f02:	b2c0      	uxtb	r0, r0
 8006f04:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006f06:	2001      	movs	r0, #1
}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000080 	.word	0x20000080

08006f10 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006f10:	b570      	push	{r4, r5, r6, lr}
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f12:	bb48      	cbnz	r0, 8006f68 <USER_SPI_read+0x58>
 8006f14:	461c      	mov	r4, r3
 8006f16:	b33b      	cbz	r3, 8006f68 <USER_SPI_read+0x58>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <USER_SPI_read+0x80>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	07d8      	lsls	r0, r3, #31
 8006f1e:	d426      	bmi.n	8006f6e <USER_SPI_read+0x5e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006f20:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <USER_SPI_read+0x84>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	071b      	lsls	r3, r3, #28
 8006f26:	bf58      	it	pl
 8006f28:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 8006f2a:	2c01      	cmp	r4, #1
 8006f2c:	460e      	mov	r6, r1
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006f2e:	4611      	mov	r1, r2
	if (count == 1) {	/* Single sector read */
 8006f30:	d020      	beq.n	8006f74 <USER_SPI_read+0x64>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006f32:	2012      	movs	r0, #18
 8006f34:	f7ff fd92 	bl	8006a5c <send_cmd>
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b130      	cbz	r0, 8006f4a <USER_SPI_read+0x3a>
 8006f3c:	2501      	movs	r5, #1
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 8006f3e:	f7ff fd4b 	bl	80069d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 8006f42:	4628      	mov	r0, r5
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
			} while (--count);
 8006f46:	3c01      	subs	r4, #1
 8006f48:	d009      	beq.n	8006f5e <USER_SPI_read+0x4e>
				if (!rcvr_datablock(buff, 512)) break;
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f50:	f7ff fe1e 	bl	8006b90 <rcvr_datablock>
				buff += 512;
 8006f54:	f506 7600 	add.w	r6, r6, #512	; 0x200
				if (!rcvr_datablock(buff, 512)) break;
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1f4      	bne.n	8006f46 <USER_SPI_read+0x36>
 8006f5c:	2501      	movs	r5, #1
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f5e:	2100      	movs	r1, #0
 8006f60:	200c      	movs	r0, #12
 8006f62:	f7ff fd7b 	bl	8006a5c <send_cmd>
 8006f66:	e7ea      	b.n	8006f3e <USER_SPI_read+0x2e>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f68:	2504      	movs	r5, #4
}
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006f6e:	2503      	movs	r5, #3
}
 8006f70:	4628      	mov	r0, r5
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006f74:	2011      	movs	r0, #17
 8006f76:	f7ff fd71 	bl	8006a5c <send_cmd>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d1de      	bne.n	8006f3c <USER_SPI_read+0x2c>
			&& rcvr_datablock(buff, 512)) {
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f84:	f7ff fe04 	bl	8006b90 <rcvr_datablock>
 8006f88:	fab0 f580 	clz	r5, r0
 8006f8c:	096d      	lsrs	r5, r5, #5
 8006f8e:	e7d6      	b.n	8006f3e <USER_SPI_read+0x2e>
 8006f90:	20000080 	.word	0x20000080
 8006f94:	2000032d 	.word	0x2000032d

08006f98 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006f98:	b530      	push	{r4, r5, lr}
 8006f9a:	b083      	sub	sp, #12
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d133      	bne.n	8007008 <USER_SPI_write+0x70>
 8006fa0:	461c      	mov	r4, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d030      	beq.n	8007008 <USER_SPI_write+0x70>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006fa6:	4b29      	ldr	r3, [pc, #164]	; (800704c <USER_SPI_write+0xb4>)
 8006fa8:	460d      	mov	r5, r1
 8006faa:	7819      	ldrb	r1, [r3, #0]
 8006fac:	07c9      	lsls	r1, r1, #31
 8006fae:	d42f      	bmi.n	8007010 <USER_SPI_write+0x78>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	0758      	lsls	r0, r3, #29
 8006fb4:	d430      	bmi.n	8007018 <USER_SPI_write+0x80>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006fb6:	4b26      	ldr	r3, [pc, #152]	; (8007050 <USER_SPI_write+0xb8>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	0719      	lsls	r1, r3, #28
 8006fbc:	bf58      	it	pl
 8006fbe:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector write */
 8006fc0:	2c01      	cmp	r4, #1
 8006fc2:	d034      	beq.n	800702e <USER_SPI_write+0x96>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006fc4:	f013 0f06 	tst.w	r3, #6
 8006fc8:	d12a      	bne.n	8007020 <USER_SPI_write+0x88>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006fca:	4611      	mov	r1, r2
 8006fcc:	2019      	movs	r0, #25
 8006fce:	f7ff fd45 	bl	8006a5c <send_cmd>
 8006fd2:	b138      	cbz	r0, 8006fe4 <USER_SPI_write+0x4c>
 8006fd4:	2401      	movs	r4, #1
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 8006fd6:	f7ff fcff 	bl	80069d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 8006fda:	4620      	mov	r0, r4
 8006fdc:	b003      	add	sp, #12
 8006fde:	bd30      	pop	{r4, r5, pc}
			} while (--count);
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	d007      	beq.n	8006ff4 <USER_SPI_write+0x5c>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	21fc      	movs	r1, #252	; 0xfc
 8006fe8:	f7ff fe38 	bl	8006c5c <xmit_datablock>
				buff += 512;
 8006fec:	f505 7500 	add.w	r5, r5, #512	; 0x200
				if (!xmit_datablock(buff, 0xFC)) break;
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1f5      	bne.n	8006fe0 <USER_SPI_write+0x48>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006ff4:	21fd      	movs	r1, #253	; 0xfd
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f7ff fe30 	bl	8006c5c <xmit_datablock>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d0e9      	beq.n	8006fd4 <USER_SPI_write+0x3c>
 8007000:	3c00      	subs	r4, #0
 8007002:	bf18      	it	ne
 8007004:	2401      	movne	r4, #1
 8007006:	e7e6      	b.n	8006fd6 <USER_SPI_write+0x3e>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007008:	2404      	movs	r4, #4
}
 800700a:	4620      	mov	r0, r4
 800700c:	b003      	add	sp, #12
 800700e:	bd30      	pop	{r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007010:	2403      	movs	r4, #3
}
 8007012:	4620      	mov	r0, r4
 8007014:	b003      	add	sp, #12
 8007016:	bd30      	pop	{r4, r5, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007018:	2402      	movs	r4, #2
}
 800701a:	4620      	mov	r0, r4
 800701c:	b003      	add	sp, #12
 800701e:	bd30      	pop	{r4, r5, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007020:	4621      	mov	r1, r4
 8007022:	2097      	movs	r0, #151	; 0x97
 8007024:	9201      	str	r2, [sp, #4]
 8007026:	f7ff fd19 	bl	8006a5c <send_cmd>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	e7cd      	b.n	8006fca <USER_SPI_write+0x32>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800702e:	4611      	mov	r1, r2
 8007030:	2018      	movs	r0, #24
 8007032:	f7ff fd13 	bl	8006a5c <send_cmd>
 8007036:	2800      	cmp	r0, #0
 8007038:	d1cc      	bne.n	8006fd4 <USER_SPI_write+0x3c>
			&& xmit_datablock(buff, 0xFE)) {
 800703a:	4628      	mov	r0, r5
 800703c:	21fe      	movs	r1, #254	; 0xfe
 800703e:	f7ff fe0d 	bl	8006c5c <xmit_datablock>
 8007042:	fab0 f480 	clz	r4, r0
 8007046:	0964      	lsrs	r4, r4, #5
 8007048:	e7c5      	b.n	8006fd6 <USER_SPI_write+0x3e>
 800704a:	bf00      	nop
 800704c:	20000080 	.word	0x20000080
 8007050:	2000032d 	.word	0x2000032d

08007054 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	b088      	sub	sp, #32
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800705a:	b998      	cbnz	r0, 8007084 <USER_SPI_ioctl+0x30>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800705c:	4b87      	ldr	r3, [pc, #540]	; (800727c <USER_SPI_ioctl+0x228>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	07d8      	lsls	r0, r3, #31
 8007062:	f100 808c 	bmi.w	800717e <USER_SPI_ioctl+0x12a>
 8007066:	4615      	mov	r5, r2

	res = RES_ERROR;

	switch (cmd) {
 8007068:	2904      	cmp	r1, #4
 800706a:	d804      	bhi.n	8007076 <USER_SPI_ioctl+0x22>
 800706c:	e8df f001 	tbb	[pc, r1]
 8007070:	51031d17 	.word	0x51031d17
 8007074:	0f          	.byte	0x0f
 8007075:	00          	.byte	0x00
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007076:	2404      	movs	r4, #4

	default:
		res = RES_PARERR;
	}

	despiselect();
 8007078:	f7ff fcae 	bl	80069d8 <despiselect>

	return res;
}
 800707c:	4620      	mov	r0, r4
 800707e:	b008      	add	sp, #32
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (drv) return RES_PARERR;					/* Check parameter */
 8007084:	2404      	movs	r4, #4
}
 8007086:	4620      	mov	r0, r4
 8007088:	b008      	add	sp, #32
 800708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800708e:	4c7c      	ldr	r4, [pc, #496]	; (8007280 <USER_SPI_ioctl+0x22c>)
 8007090:	7823      	ldrb	r3, [r4, #0]
 8007092:	f013 0f06 	tst.w	r3, #6
 8007096:	f040 8099 	bne.w	80071cc <USER_SPI_ioctl+0x178>
	res = RES_ERROR;
 800709a:	2401      	movs	r4, #1
 800709c:	e7ec      	b.n	8007078 <USER_SPI_ioctl+0x24>
		if (spiselect()) res = RES_OK;
 800709e:	f7ff fcb5 	bl	8006a0c <spiselect>
 80070a2:	fab0 f480 	clz	r4, r0
 80070a6:	0964      	lsrs	r4, r4, #5
 80070a8:	e7e6      	b.n	8007078 <USER_SPI_ioctl+0x24>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80070aa:	2100      	movs	r1, #0
 80070ac:	2009      	movs	r0, #9
 80070ae:	f7ff fcd5 	bl	8006a5c <send_cmd>
 80070b2:	4604      	mov	r4, r0
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1f0      	bne.n	800709a <USER_SPI_ioctl+0x46>
 80070b8:	2110      	movs	r1, #16
 80070ba:	eb0d 0001 	add.w	r0, sp, r1
 80070be:	f7ff fd67 	bl	8006b90 <rcvr_datablock>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d0e9      	beq.n	800709a <USER_SPI_ioctl+0x46>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80070c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80070ca:	099b      	lsrs	r3, r3, #6
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	f000 80b4 	beq.w	800723a <USER_SPI_ioctl+0x1e6>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80070d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80070d6:	f89d 0016 	ldrb.w	r0, [sp, #22]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80070da:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80070de:	f89d 1019 	ldrb.w	r1, [sp, #25]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80070e2:	f89d 7018 	ldrb.w	r7, [sp, #24]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80070e6:	f89d 601a 	ldrb.w	r6, [sp, #26]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	0280      	lsls	r0, r0, #10
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80070ee:	f002 020f 	and.w	r2, r2, #15
 80070f2:	0049      	lsls	r1, r1, #1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80070f4:	eb03 1397 	add.w	r3, r3, r7, lsr #6
 80070f8:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80070fc:	eb02 12d6 	add.w	r2, r2, r6, lsr #7
 8007100:	f001 0106 	and.w	r1, r1, #6
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007104:	4403      	add	r3, r0
				*(DWORD*)buff = csize << (n - 9);
 8007106:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007108:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 800710a:	3a07      	subs	r2, #7
 800710c:	4093      	lsls	r3, r2
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	e7b2      	b.n	8007078 <USER_SPI_ioctl+0x24>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007112:	4e5b      	ldr	r6, [pc, #364]	; (8007280 <USER_SPI_ioctl+0x22c>)
 8007114:	7831      	ldrb	r1, [r6, #0]
 8007116:	f011 0104 	ands.w	r1, r1, #4
 800711a:	d035      	beq.n	8007188 <USER_SPI_ioctl+0x134>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800711c:	2100      	movs	r1, #0
 800711e:	208d      	movs	r0, #141	; 0x8d
 8007120:	f7ff fc9c 	bl	8006a5c <send_cmd>
 8007124:	2800      	cmp	r0, #0
 8007126:	d1b8      	bne.n	800709a <USER_SPI_ioctl+0x46>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007128:	2632      	movs	r6, #50	; 0x32
 800712a:	f10d 010f 	add.w	r1, sp, #15
 800712e:	4855      	ldr	r0, [pc, #340]	; (8007284 <USER_SPI_ioctl+0x230>)
 8007130:	9600      	str	r6, [sp, #0]
 8007132:	aa04      	add	r2, sp, #16
 8007134:	27ff      	movs	r7, #255	; 0xff
 8007136:	2301      	movs	r3, #1
 8007138:	f88d 700f 	strb.w	r7, [sp, #15]
 800713c:	f7fe fb58 	bl	80057f0 <HAL_SPI_TransmitReceive>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007140:	a804      	add	r0, sp, #16
 8007142:	2110      	movs	r1, #16
 8007144:	f7ff fd24 	bl	8006b90 <rcvr_datablock>
 8007148:	2800      	cmp	r0, #0
 800714a:	d0a6      	beq.n	800709a <USER_SPI_ioctl+0x46>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800714c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8007284 <USER_SPI_ioctl+0x230>
 8007150:	2430      	movs	r4, #48	; 0x30
 8007152:	9600      	str	r6, [sp, #0]
 8007154:	2301      	movs	r3, #1
 8007156:	f10d 020f 	add.w	r2, sp, #15
 800715a:	f10d 010e 	add.w	r1, sp, #14
 800715e:	4640      	mov	r0, r8
 8007160:	3c01      	subs	r4, #1
 8007162:	f88d 700e 	strb.w	r7, [sp, #14]
 8007166:	f7fe fb43 	bl	80057f0 <HAL_SPI_TransmitReceive>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800716a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800716e:	d1f0      	bne.n	8007152 <USER_SPI_ioctl+0xfe>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007170:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8007174:	2310      	movs	r3, #16
 8007176:	0912      	lsrs	r2, r2, #4
 8007178:	4093      	lsls	r3, r2
 800717a:	602b      	str	r3, [r5, #0]
					res = RES_OK;
 800717c:	e77c      	b.n	8007078 <USER_SPI_ioctl+0x24>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800717e:	2403      	movs	r4, #3
}
 8007180:	4620      	mov	r0, r4
 8007182:	b008      	add	sp, #32
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007188:	2009      	movs	r0, #9
 800718a:	f7ff fc67 	bl	8006a5c <send_cmd>
 800718e:	4604      	mov	r4, r0
 8007190:	2800      	cmp	r0, #0
 8007192:	d182      	bne.n	800709a <USER_SPI_ioctl+0x46>
 8007194:	2110      	movs	r1, #16
 8007196:	eb0d 0001 	add.w	r0, sp, r1
 800719a:	f7ff fcf9 	bl	8006b90 <rcvr_datablock>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f43f af7b 	beq.w	800709a <USER_SPI_ioctl+0x46>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80071a4:	7833      	ldrb	r3, [r6, #0]
 80071a6:	079a      	lsls	r2, r3, #30
 80071a8:	d557      	bpl.n	800725a <USER_SPI_ioctl+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80071aa:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80071ae:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80071b2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80071bc:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 80071c0:	0992      	lsrs	r2, r2, #6
 80071c2:	3301      	adds	r3, #1
 80071c4:	3a01      	subs	r2, #1
 80071c6:	4093      	lsls	r3, r2
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	e755      	b.n	8007078 <USER_SPI_ioctl+0x24>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80071cc:	aa04      	add	r2, sp, #16
 80071ce:	210b      	movs	r1, #11
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7ff ff3f 	bl	8007054 <USER_SPI_ioctl>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f47f af5f 	bne.w	800709a <USER_SPI_ioctl+0x46>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80071dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80071e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 80071ec:	f43f af55 	beq.w	800709a <USER_SPI_ioctl+0x46>
		if (!(CardType & CT_BLOCK)) {
 80071f0:	7823      	ldrb	r3, [r4, #0]
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80071f2:	e9d5 1400 	ldrd	r1, r4, [r5]
		if (!(CardType & CT_BLOCK)) {
 80071f6:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 80071f8:	bf58      	it	pl
 80071fa:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80071fc:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 8007200:	bf58      	it	pl
 8007202:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007204:	f7ff fc2a 	bl	8006a5c <send_cmd>
 8007208:	2800      	cmp	r0, #0
 800720a:	f47f af46 	bne.w	800709a <USER_SPI_ioctl+0x46>
 800720e:	4621      	mov	r1, r4
 8007210:	2021      	movs	r0, #33	; 0x21
 8007212:	f7ff fc23 	bl	8006a5c <send_cmd>
 8007216:	2800      	cmp	r0, #0
 8007218:	f47f af3f 	bne.w	800709a <USER_SPI_ioctl+0x46>
 800721c:	4601      	mov	r1, r0
 800721e:	2026      	movs	r0, #38	; 0x26
 8007220:	f7ff fc1c 	bl	8006a5c <send_cmd>
 8007224:	2800      	cmp	r0, #0
 8007226:	f47f af38 	bne.w	800709a <USER_SPI_ioctl+0x46>
 800722a:	f247 5030 	movw	r0, #30000	; 0x7530
 800722e:	f7ff fba9 	bl	8006984 <wait_ready>
		if (spiselect()) res = RES_OK;
 8007232:	fab0 f480 	clz	r4, r0
 8007236:	0964      	lsrs	r4, r4, #5
 8007238:	e71e      	b.n	8007078 <USER_SPI_ioctl+0x24>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800723a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800723e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8007242:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007246:	0412      	lsls	r2, r2, #16
 8007248:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800724c:	3201      	adds	r2, #1
 800724e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8007252:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	e70e      	b.n	8007078 <USER_SPI_ioctl+0x24>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800725a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800725e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8007262:	00ca      	lsls	r2, r1, #3
 8007264:	f002 0218 	and.w	r2, r2, #24
 8007268:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800726c:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8007270:	3301      	adds	r3, #1
 8007272:	fb02 3303 	mla	r3, r2, r3, r3
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	e6fe      	b.n	8007078 <USER_SPI_ioctl+0x24>
 800727a:	bf00      	nop
 800727c:	20000080 	.word	0x20000080
 8007280:	2000032d 	.word	0x2000032d
 8007284:	20000910 	.word	0x20000910

08007288 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007288:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800728a:	4903      	ldr	r1, [pc, #12]	; (8007298 <MX_FATFS_Init+0x10>)
 800728c:	4803      	ldr	r0, [pc, #12]	; (800729c <MX_FATFS_Init+0x14>)
 800728e:	f001 fcf3 	bl	8008c78 <FATFS_LinkDriver>
 8007292:	4b03      	ldr	r3, [pc, #12]	; (80072a0 <MX_FATFS_Init+0x18>)
 8007294:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007296:	bd08      	pop	{r3, pc}
 8007298:	2000c480 	.word	0x2000c480
 800729c:	20000084 	.word	0x20000084
 80072a0:	2000c484 	.word	0x2000c484

080072a4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80072a4:	2000      	movs	r0, #0
 80072a6:	4770      	bx	lr

080072a8 <USER_initialize>:
)
{
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80072a8:	f7ff bd3c 	b.w	8006d24 <USER_SPI_initialize>

080072ac <USER_status>:
)
{
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80072ac:	f7ff be26 	b.w	8006efc <USER_SPI_status>

080072b0 <USER_read>:
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80072b0:	f7ff be2e 	b.w	8006f10 <USER_SPI_read>

080072b4 <USER_write>:
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80072b4:	f7ff be70 	b.w	8006f98 <USER_SPI_write>

080072b8 <USER_ioctl>:
)
{
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80072b8:	f7ff becc 	b.w	8007054 <USER_SPI_ioctl>

080072bc <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <disk_status+0x10>)
 80072be:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80072c2:	4418      	add	r0, r3
 80072c4:	6853      	ldr	r3, [r2, #4]
 80072c6:	7a00      	ldrb	r0, [r0, #8]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4718      	bx	r3
 80072cc:	20000350 	.word	0x20000350

080072d0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <disk_initialize+0x1c>)
 80072d2:	5c1a      	ldrb	r2, [r3, r0]
 80072d4:	b942      	cbnz	r2, 80072e8 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072d6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 80072da:	2101      	movs	r1, #1
 80072dc:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072de:	6852      	ldr	r2, [r2, #4]
 80072e0:	4418      	add	r0, r3
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	7a00      	ldrb	r0, [r0, #8]
 80072e6:	4718      	bx	r3
  }
  return stat;
}
 80072e8:	2000      	movs	r0, #0
 80072ea:	4770      	bx	lr
 80072ec:	20000350 	.word	0x20000350

080072f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80072f0:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80072f2:	4c05      	ldr	r4, [pc, #20]	; (8007308 <disk_read+0x18>)
 80072f4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80072f8:	4420      	add	r0, r4
 80072fa:	686c      	ldr	r4, [r5, #4]
 80072fc:	7a00      	ldrb	r0, [r0, #8]
 80072fe:	68a4      	ldr	r4, [r4, #8]
 8007300:	46a4      	mov	ip, r4
  return res;
}
 8007302:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007304:	4760      	bx	ip
 8007306:	bf00      	nop
 8007308:	20000350 	.word	0x20000350

0800730c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800730c:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800730e:	4c05      	ldr	r4, [pc, #20]	; (8007324 <disk_write+0x18>)
 8007310:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007314:	4420      	add	r0, r4
 8007316:	686c      	ldr	r4, [r5, #4]
 8007318:	7a00      	ldrb	r0, [r0, #8]
 800731a:	68e4      	ldr	r4, [r4, #12]
 800731c:	46a4      	mov	ip, r4
  return res;
}
 800731e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007320:	4760      	bx	ip
 8007322:	bf00      	nop
 8007324:	20000350 	.word	0x20000350

08007328 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <disk_ioctl+0x18>)
{
 800732a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800732c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8007330:	4418      	add	r0, r3
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	7a00      	ldrb	r0, [r0, #8]
 8007336:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8007338:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800733c:	4718      	bx	r3
 800733e:	bf00      	nop
 8007340:	20000350 	.word	0x20000350

08007344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007344:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8007346:	4c22      	ldr	r4, [pc, #136]	; (80073d0 <chk_lock+0x8c>)
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	2a00      	cmp	r2, #0
 800734c:	d03e      	beq.n	80073cc <chk_lock+0x88>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800734e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <chk_lock+0x30>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007356:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8007358:	68e3      	ldr	r3, [r4, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d033      	beq.n	80073c6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800735e:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8007362:	42ab      	cmp	r3, r5
 8007364:	d01f      	beq.n	80073a6 <chk_lock+0x62>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007366:	bb72      	cbnz	r2, 80073c6 <chk_lock+0x82>
 8007368:	2902      	cmp	r1, #2
 800736a:	bf0c      	ite	eq
 800736c:	2000      	moveq	r0, #0
 800736e:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8007370:	bc30      	pop	{r4, r5}
 8007372:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007374:	6862      	ldr	r2, [r4, #4]
 8007376:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 800737a:	429a      	cmp	r2, r3
 800737c:	d1eb      	bne.n	8007356 <chk_lock+0x12>
				Files[i].clu == dp->sclust &&
 800737e:	8922      	ldrh	r2, [r4, #8]
 8007380:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 8007384:	429a      	cmp	r2, r3
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007386:	f04f 0200 	mov.w	r2, #0
				Files[i].clu == dp->sclust &&
 800738a:	d1e5      	bne.n	8007358 <chk_lock+0x14>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800738c:	b9c1      	cbnz	r1, 80073c0 <chk_lock+0x7c>
 800738e:	0053      	lsls	r3, r2, #1
 8007390:	4413      	add	r3, r2
 8007392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
}
 8007396:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739e:	bf14      	ite	ne
 80073a0:	2000      	movne	r0, #0
 80073a2:	2010      	moveq	r0, #16
}
 80073a4:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80073a6:	6925      	ldr	r5, [r4, #16]
 80073a8:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 80073ac:	429d      	cmp	r5, r3
 80073ae:	d1da      	bne.n	8007366 <chk_lock+0x22>
				Files[i].clu == dp->sclust &&
 80073b0:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 80073b4:	8aa0      	ldrh	r0, [r4, #20]
 80073b6:	4298      	cmp	r0, r3
 80073b8:	d1d5      	bne.n	8007366 <chk_lock+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073ba:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80073bc:	2900      	cmp	r1, #0
 80073be:	d0e6      	beq.n	800738e <chk_lock+0x4a>
 80073c0:	2010      	movs	r0, #16
}
 80073c2:	bc30      	pop	{r4, r5}
 80073c4:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80073c6:	2000      	movs	r0, #0
}
 80073c8:	bc30      	pop	{r4, r5}
 80073ca:	4770      	bx	lr
			be = 1;
 80073cc:	2201      	movs	r2, #1
 80073ce:	e7c3      	b.n	8007358 <chk_lock+0x14>
 80073d0:	20000334 	.word	0x20000334

080073d4 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80073d4:	4b2d      	ldr	r3, [pc, #180]	; (800748c <inc_lock+0xb8>)
{
 80073d6:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->fs &&
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 80073de:	4295      	cmp	r5, r2
 80073e0:	d01e      	beq.n	8007420 <inc_lock+0x4c>
 80073e2:	68dc      	ldr	r4, [r3, #12]
 80073e4:	42ac      	cmp	r4, r5
 80073e6:	d006      	beq.n	80073f6 <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073e8:	b332      	cbz	r2, 8007438 <inc_lock+0x64>
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	d040      	beq.n	8007470 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80073ee:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80073f0:	4630      	mov	r0, r6
 80073f2:	bcf0      	pop	{r4, r5, r6, r7}
 80073f4:	4770      	bx	lr
		if (Files[i].fs == dp->fs &&
 80073f6:	691f      	ldr	r7, [r3, #16]
 80073f8:	f8d0 6208 	ldr.w	r6, [r0, #520]	; 0x208
 80073fc:	42b7      	cmp	r7, r6
 80073fe:	d1f3      	bne.n	80073e8 <inc_lock+0x14>
			Files[i].clu == dp->sclust &&
 8007400:	8a9f      	ldrh	r7, [r3, #20]
 8007402:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8007406:	42b7      	cmp	r7, r6
 8007408:	d1ee      	bne.n	80073e8 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800740a:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800740c:	0054      	lsls	r4, r2, #1
 800740e:	bb91      	cbnz	r1, 8007476 <inc_lock+0xa2>
 8007410:	18a1      	adds	r1, r4, r2
 8007412:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007416:	1c56      	adds	r6, r2, #1
 8007418:	8949      	ldrh	r1, [r1, #10]
 800741a:	3101      	adds	r1, #1
 800741c:	b289      	uxth	r1, r1
 800741e:	e020      	b.n	8007462 <inc_lock+0x8e>
		if (Files[i].fs == dp->fs &&
 8007420:	685e      	ldr	r6, [r3, #4]
 8007422:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8007426:	42a6      	cmp	r6, r4
 8007428:	d1db      	bne.n	80073e2 <inc_lock+0xe>
			Files[i].clu == dp->sclust &&
 800742a:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800742e:	891c      	ldrh	r4, [r3, #8]
 8007430:	42a6      	cmp	r6, r4
 8007432:	d1d6      	bne.n	80073e2 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007434:	2200      	movs	r2, #0
 8007436:	e7e9      	b.n	800740c <inc_lock+0x38>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007438:	2601      	movs	r6, #1
		Files[i].fs = dp->fs;
 800743a:	0054      	lsls	r4, r2, #1
 800743c:	18a7      	adds	r7, r4, r2
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800743e:	2900      	cmp	r1, #0
		Files[i].fs = dp->fs;
 8007440:	eb03 0187 	add.w	r1, r3, r7, lsl #2
 8007444:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
		Files[i].clu = dp->sclust;
 8007448:	f8d0 7208 	ldr.w	r7, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 800744c:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 8007450:	604f      	str	r7, [r1, #4]
		Files[i].ctr = 0;
 8007452:	f04f 0000 	mov.w	r0, #0
		Files[i].idx = dp->index;
 8007456:	810d      	strh	r5, [r1, #8]
		Files[i].ctr = 0;
 8007458:	8148      	strh	r0, [r1, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800745a:	bf14      	ite	ne
 800745c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8007460:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007462:	4422      	add	r2, r4
 8007464:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8007468:	4630      	mov	r0, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800746a:	8159      	strh	r1, [r3, #10]
}
 800746c:	bcf0      	pop	{r4, r5, r6, r7}
 800746e:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007470:	2602      	movs	r6, #2
 8007472:	2201      	movs	r2, #1
 8007474:	e7e1      	b.n	800743a <inc_lock+0x66>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007476:	18a1      	adds	r1, r4, r2
 8007478:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800747c:	8949      	ldrh	r1, [r1, #10]
 800747e:	2900      	cmp	r1, #0
 8007480:	d1b5      	bne.n	80073ee <inc_lock+0x1a>
 8007482:	1c56      	adds	r6, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007488:	e7eb      	b.n	8007462 <inc_lock+0x8e>
 800748a:	bf00      	nop
 800748c:	20000334 	.word	0x20000334

08007490 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007490:	6801      	ldr	r1, [r0, #0]
 8007492:	b1f1      	cbz	r1, 80074d2 <get_ldnumber+0x42>
{
 8007494:	b410      	push	{r4}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007496:	780c      	ldrb	r4, [r1, #0]
 8007498:	2c20      	cmp	r4, #32
 800749a:	d910      	bls.n	80074be <get_ldnumber+0x2e>
 800749c:	460a      	mov	r2, r1
 800749e:	4623      	mov	r3, r4
 80074a0:	e003      	b.n	80074aa <get_ldnumber+0x1a>
 80074a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d909      	bls.n	80074be <get_ldnumber+0x2e>
 80074aa:	2b3a      	cmp	r3, #58	; 0x3a
 80074ac:	d1f9      	bne.n	80074a2 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80074ae:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074b0:	428a      	cmp	r2, r1
 80074b2:	d008      	beq.n	80074c6 <get_ldnumber+0x36>
	int vol = -1;
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80074b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074bc:	4770      	bx	lr
		vol = 0;		/* Drive 0 */
 80074be:	2000      	movs	r0, #0
}
 80074c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c4:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074c6:	2c30      	cmp	r4, #48	; 0x30
 80074c8:	d1f4      	bne.n	80074b4 <get_ldnumber+0x24>
					*path = ++tt;
 80074ca:	3201      	adds	r2, #1
 80074cc:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 80074ce:	2000      	movs	r0, #0
 80074d0:	e7f6      	b.n	80074c0 <get_ldnumber+0x30>
	int vol = -1;
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80074d6:	4770      	bx	lr

080074d8 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80074d8:	b1b0      	cbz	r0, 8007508 <validate+0x30>
{
 80074da:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80074dc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80074e0:	b143      	cbz	r3, 80074f4 <validate+0x1c>
 80074e2:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80074e6:	b12a      	cbz	r2, 80074f4 <validate+0x1c>
 80074e8:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80074ec:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80074f0:	4291      	cmp	r1, r2
 80074f2:	d001      	beq.n	80074f8 <validate+0x20>
		return FR_INVALID_OBJECT;
 80074f4:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80074f6:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80074f8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80074fc:	f7ff fede 	bl	80072bc <disk_status>
 8007500:	f010 0001 	ands.w	r0, r0, #1
 8007504:	d1f6      	bne.n	80074f4 <validate+0x1c>
}
 8007506:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 8007508:	2009      	movs	r0, #9
}
 800750a:	4770      	bx	lr

0800750c <get_fileinfo.isra.0>:
void get_fileinfo (		/* No return code */
 800750c:	b4f0      	push	{r4, r5, r6, r7}
	p = fno->fname;
 800750e:	f102 0409 	add.w	r4, r2, #9
	if (dp->sect) {		/* Get SFN */
 8007512:	b350      	cbz	r0, 800756a <get_fileinfo.isra.0+0x5e>
		dir = dp->dir;
 8007514:	680d      	ldr	r5, [r1, #0]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007516:	272e      	movs	r7, #46	; 0x2e
 8007518:	1e69      	subs	r1, r5, #1
 800751a:	f105 060a 	add.w	r6, r5, #10
 800751e:	e005      	b.n	800752c <get_fileinfo.isra.0+0x20>
			*p++ = c;
 8007520:	4620      	mov	r0, r4
 8007522:	f800 3b01 	strb.w	r3, [r0], #1
 8007526:	4604      	mov	r4, r0
		while (i < 11) {		/* Copy name body and extension */
 8007528:	42b1      	cmp	r1, r6
 800752a:	d010      	beq.n	800754e <get_fileinfo.isra.0+0x42>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800752c:	4608      	mov	r0, r1
			c = (TCHAR)dir[i++];
 800752e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8007532:	2b20      	cmp	r3, #32
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007534:	f1a0 0007 	sub.w	r0, r0, #7
			if (c == ' ') continue;				/* Skip padding spaces */
 8007538:	d0f6      	beq.n	8007528 <get_fileinfo.isra.0+0x1c>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800753a:	2b05      	cmp	r3, #5
 800753c:	bf08      	it	eq
 800753e:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007540:	42a8      	cmp	r0, r5
 8007542:	d1ed      	bne.n	8007520 <get_fileinfo.isra.0+0x14>
 8007544:	4620      	mov	r0, r4
 8007546:	f800 7b01 	strb.w	r7, [r0], #1
 800754a:	4604      	mov	r4, r0
 800754c:	e7e8      	b.n	8007520 <get_fileinfo.isra.0+0x14>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800754e:	7aeb      	ldrb	r3, [r5, #11]
 8007550:	7213      	strb	r3, [r2, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007552:	69eb      	ldr	r3, [r5, #28]
 8007554:	6013      	str	r3, [r2, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007556:	7e69      	ldrb	r1, [r5, #25]
 8007558:	7e2b      	ldrb	r3, [r5, #24]
 800755a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800755e:	8093      	strh	r3, [r2, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007560:	7de9      	ldrb	r1, [r5, #23]
 8007562:	7dab      	ldrb	r3, [r5, #22]
 8007564:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007568:	80d3      	strh	r3, [r2, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 800756a:	2300      	movs	r3, #0
 800756c:	7023      	strb	r3, [r4, #0]
}
 800756e:	bcf0      	pop	{r4, r5, r6, r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop

08007574 <sync_window.part.0>:
FRESULT sync_window (
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8007576:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 800757a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800757c:	4601      	mov	r1, r0
 800757e:	462a      	mov	r2, r5
 8007580:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8007584:	2301      	movs	r3, #1
 8007586:	f7ff fec1 	bl	800730c <disk_write>
 800758a:	b9e8      	cbnz	r0, 80075c8 <sync_window.part.0+0x54>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800758c:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
 8007590:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
			fs->wflag = 0;
 8007594:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007598:	1aaa      	subs	r2, r5, r2
 800759a:	429a      	cmp	r2, r3
 800759c:	4607      	mov	r7, r0
 800759e:	d211      	bcs.n	80075c4 <sync_window.part.0+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075a0:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 80075a4:	2e01      	cmp	r6, #1
 80075a6:	d802      	bhi.n	80075ae <sync_window.part.0+0x3a>
 80075a8:	e00c      	b.n	80075c4 <sync_window.part.0+0x50>
 80075aa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80075ae:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 80075b2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075b4:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80075b6:	462a      	mov	r2, r5
 80075b8:	2301      	movs	r3, #1
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7ff fea6 	bl	800730c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075c0:	2e01      	cmp	r6, #1
 80075c2:	d1f2      	bne.n	80075aa <sync_window.part.0+0x36>
}
 80075c4:	4638      	mov	r0, r7
 80075c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 80075c8:	2701      	movs	r7, #1
}
 80075ca:	4638      	mov	r0, r7
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ce:	bf00      	nop

080075d0 <sync_fs>:
{
 80075d0:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075d2:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
{
 80075d6:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075d8:	b96b      	cbnz	r3, 80075f6 <sync_fs+0x26>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075da:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d011      	beq.n	8007606 <sync_fs+0x36>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80075e2:	2200      	movs	r2, #0
 80075e4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80075e8:	4611      	mov	r1, r2
 80075ea:	f7ff fe9d 	bl	8007328 <disk_ioctl>
			res = FR_DISK_ERR;
 80075ee:	3800      	subs	r0, #0
 80075f0:	bf18      	it	ne
 80075f2:	2001      	movne	r0, #1
}
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	f7ff ffbd 	bl	8007574 <sync_window.part.0>
	if (res == FR_OK) {
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d1fa      	bne.n	80075f4 <sync_fs+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075fe:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007602:	2b03      	cmp	r3, #3
 8007604:	d1ed      	bne.n	80075e2 <sync_fs+0x12>
 8007606:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800760a:	2b01      	cmp	r3, #1
 800760c:	d1e9      	bne.n	80075e2 <sync_fs+0x12>
	while (cnt--)
 800760e:	f504 7200 	add.w	r2, r4, #512	; 0x200
	BYTE *d = (BYTE*)dst;
 8007612:	4623      	mov	r3, r4
		*d++ = (BYTE)val;
 8007614:	2500      	movs	r5, #0
 8007616:	f803 5b01 	strb.w	r5, [r3], #1
	while (cnt--)
 800761a:	429a      	cmp	r2, r3
 800761c:	d1fb      	bne.n	8007616 <sync_fs+0x46>
			fs->winsect = fs->volbase + 1;
 800761e:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007622:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <sync_fs+0x88>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007628:	480c      	ldr	r0, [pc, #48]	; (800765c <sync_fs+0x8c>)
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800762a:	6023      	str	r3, [r4, #0]
			fs->winsect = fs->volbase + 1;
 800762c:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800762e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8007632:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007636:	f64a 2655 	movw	r6, #43605	; 0xaa55
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800763a:	e9c4 0179 	strd	r0, r1, [r4, #484]	; 0x1e4
			fs->winsect = fs->volbase + 1;
 800763e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007642:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007646:	f8a4 61fe 	strh.w	r6, [r4, #510]	; 0x1fe
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800764a:	2301      	movs	r3, #1
 800764c:	4621      	mov	r1, r4
 800764e:	f7ff fe5d 	bl	800730c <disk_write>
			fs->fsi_flag = 0;
 8007652:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
 8007656:	e7c4      	b.n	80075e2 <sync_fs+0x12>
 8007658:	41615252 	.word	0x41615252
 800765c:	61417272 	.word	0x61417272

08007660 <move_window.part.0>:
FRESULT move_window (
 8007660:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007662:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
FRESULT move_window (
 8007666:	4604      	mov	r4, r0
 8007668:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800766a:	b973      	cbnz	r3, 800768a <move_window.part.0+0x2a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800766c:	462a      	mov	r2, r5
 800766e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007672:	2301      	movs	r3, #1
 8007674:	4621      	mov	r1, r4
 8007676:	f7ff fe3b 	bl	80072f0 <disk_read>
				res = FR_DISK_ERR;
 800767a:	2800      	cmp	r0, #0
 800767c:	bf1c      	itt	ne
 800767e:	f04f 35ff 	movne.w	r5, #4294967295
 8007682:	2001      	movne	r0, #1
			fs->winsect = sector;
 8007684:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
}
 8007688:	bd38      	pop	{r3, r4, r5, pc}
 800768a:	f7ff ff73 	bl	8007574 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800768e:	2800      	cmp	r0, #0
 8007690:	d0ec      	beq.n	800766c <move_window.part.0+0xc>
}
 8007692:	bd38      	pop	{r3, r4, r5, pc}

08007694 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007694:	f04f 33ff 	mov.w	r3, #4294967295
 8007698:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800769a:	4299      	cmp	r1, r3
{
 800769c:	b510      	push	{r4, lr}
 800769e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80076a0:	f880 2204 	strb.w	r2, [r0, #516]	; 0x204
 80076a4:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80076a8:	d002      	beq.n	80076b0 <check_fs+0x1c>
 80076aa:	f7ff ffd9 	bl	8007660 <move_window.part.0>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80076ae:	b9e0      	cbnz	r0, 80076ea <check_fs+0x56>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80076b0:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 80076b4:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80076b8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80076bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d10e      	bne.n	80076e2 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80076c4:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <check_fs+0x5c>)
 80076ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <check_fs+0x52>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80076d2:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80076d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80076da:	1a80      	subs	r0, r0, r2
 80076dc:	bf18      	it	ne
 80076de:	2001      	movne	r0, #1
}
 80076e0:	bd10      	pop	{r4, pc}
		return 2;
 80076e2:	2002      	movs	r0, #2
}
 80076e4:	bd10      	pop	{r4, pc}
		return 0;
 80076e6:	2000      	movs	r0, #0
}
 80076e8:	bd10      	pop	{r4, pc}
		return 3;
 80076ea:	2003      	movs	r0, #3
}
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	00544146 	.word	0x00544146

080076f4 <find_volume>:
{
 80076f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f8:	4606      	mov	r6, r0
	*rfs = 0;
 80076fa:	2300      	movs	r3, #0
{
 80076fc:	b084      	sub	sp, #16
	vol = get_ldnumber(path);
 80076fe:	4608      	mov	r0, r1
	*rfs = 0;
 8007700:	6033      	str	r3, [r6, #0]
{
 8007702:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 8007704:	f7ff fec4 	bl	8007490 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007708:	1e05      	subs	r5, r0, #0
 800770a:	f2c0 80e3 	blt.w	80078d4 <find_volume+0x1e0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800770e:	4bad      	ldr	r3, [pc, #692]	; (80079c4 <find_volume+0x2d0>)
 8007710:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007714:	2c00      	cmp	r4, #0
 8007716:	f000 80e9 	beq.w	80078ec <find_volume+0x1f8>
	*rfs = fs;							/* Return pointer to the file system object */
 800771a:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800771c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007720:	b18b      	cbz	r3, 8007746 <find_volume+0x52>
		stat = disk_status(fs->drv);
 8007722:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007726:	f7ff fdc9 	bl	80072bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800772a:	07c3      	lsls	r3, r0, #31
 800772c:	d40b      	bmi.n	8007746 <find_volume+0x52>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800772e:	2f00      	cmp	r7, #0
 8007730:	f000 80de 	beq.w	80078f0 <find_volume+0x1fc>
 8007734:	f010 0504 	ands.w	r5, r0, #4
 8007738:	f000 80c3 	beq.w	80078c2 <find_volume+0x1ce>
				return FR_WRITE_PROTECTED;
 800773c:	250a      	movs	r5, #10
}
 800773e:	4628      	mov	r0, r5
 8007740:	b004      	add	sp, #16
 8007742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007746:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8007748:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800774a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	fs->fs_type = 0;					/* Clear the file system object */
 800774e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007752:	f7ff fdbd 	bl	80072d0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007756:	07c6      	lsls	r6, r0, #31
 8007758:	f100 80b7 	bmi.w	80078ca <find_volume+0x1d6>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800775c:	b10f      	cbz	r7, 8007762 <find_volume+0x6e>
 800775e:	0745      	lsls	r5, r0, #29
 8007760:	d4ec      	bmi.n	800773c <find_volume+0x48>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007762:	2100      	movs	r1, #0
 8007764:	4620      	mov	r0, r4
 8007766:	f7ff ff95 	bl	8007694 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800776a:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800776c:	4605      	mov	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800776e:	f000 808f 	beq.w	8007890 <find_volume+0x19c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007772:	2803      	cmp	r0, #3
 8007774:	f000 80be 	beq.w	80078f4 <find_volume+0x200>
	bsect = 0;
 8007778:	4606      	mov	r6, r0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800777a:	2800      	cmp	r0, #0
 800777c:	f040 80a0 	bne.w	80078c0 <find_volume+0x1cc>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007780:	7b22      	ldrb	r2, [r4, #12]
 8007782:	7ae3      	ldrb	r3, [r4, #11]
 8007784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778c:	f040 8098 	bne.w	80078c0 <find_volume+0x1cc>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007790:	7de2      	ldrb	r2, [r4, #23]
 8007792:	7da3      	ldrb	r3, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007794:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007798:	7c22      	ldrb	r2, [r4, #16]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800779a:	bf08      	it	eq
 800779c:	6a63      	ldreq	r3, [r4, #36]	; 0x24
	fs->fsize = fasize;
 800779e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80077a2:	1e51      	subs	r1, r2, #1
 80077a4:	2901      	cmp	r1, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80077a6:	f884 2203 	strb.w	r2, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80077aa:	f200 8089 	bhi.w	80078c0 <find_volume+0x1cc>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80077ae:	7b61      	ldrb	r1, [r4, #13]
 80077b0:	f884 1202 	strb.w	r1, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80077b4:	2900      	cmp	r1, #0
 80077b6:	f000 8083 	beq.w	80078c0 <find_volume+0x1cc>
 80077ba:	1e48      	subs	r0, r1, #1
 80077bc:	4208      	tst	r0, r1
 80077be:	d17f      	bne.n	80078c0 <find_volume+0x1cc>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80077c0:	7ca0      	ldrb	r0, [r4, #18]
 80077c2:	7c65      	ldrb	r5, [r4, #17]
 80077c4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80077c8:	0728      	lsls	r0, r5, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80077ca:	f8a4 5208 	strh.w	r5, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80077ce:	d177      	bne.n	80078c0 <find_volume+0x1cc>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80077d0:	7d27      	ldrb	r7, [r4, #20]
 80077d2:	7ce0      	ldrb	r0, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80077d4:	f894 c00f 	ldrb.w	ip, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80077d8:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80077dc:	7ba7      	ldrb	r7, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80077de:	bf08      	it	eq
 80077e0:	6a20      	ldreq	r0, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80077e2:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
 80077e6:	d06b      	beq.n	80078c0 <find_volume+0x1cc>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80077e8:	fb03 f202 	mul.w	r2, r3, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80077ec:	eb07 1c15 	add.w	ip, r7, r5, lsr #4
 80077f0:	4494      	add	ip, r2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077f2:	4560      	cmp	r0, ip
 80077f4:	d364      	bcc.n	80078c0 <find_volume+0x1cc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80077f6:	eba0 000c 	sub.w	r0, r0, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80077fa:	4288      	cmp	r0, r1
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80077fc:	fbb0 fef1 	udiv	lr, r0, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007800:	d35e      	bcc.n	80078c0 <find_volume+0x1cc>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007802:	f640 71f5 	movw	r1, #4085	; 0xff5
 8007806:	458e      	cmp	lr, r1
 8007808:	d976      	bls.n	80078f8 <find_volume+0x204>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800780a:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800780e:	458e      	cmp	lr, r1
 8007810:	f240 80c3 	bls.w	800799a <find_volume+0x2a6>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007814:	f10e 0202 	add.w	r2, lr, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007818:	4437      	add	r7, r6
	fs->database = bsect + sysect;						/* Data start sector */
 800781a:	eb0c 0106 	add.w	r1, ip, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800781e:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007822:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007826:	f8c4 1228 	str.w	r1, [r4, #552]	; 0x228
	fs->volbase = bsect;								/* Volume start sector */
 800782a:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800782e:	2d00      	cmp	r5, #0
 8007830:	d146      	bne.n	80078c0 <find_volume+0x1cc>
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007832:	0092      	lsls	r2, r2, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007834:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007838:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800783a:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800783e:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 8007842:	d33d      	bcc.n	80078c0 <find_volume+0x1cc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007844:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8007848:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800784c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007850:	f04f 32ff 	mov.w	r2, #4294967295
	fs->fsi_flag = 0x80;
 8007854:	2180      	movs	r1, #128	; 0x80
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007856:	2b01      	cmp	r3, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007858:	e9c4 2283 	strd	r2, r2, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 800785c:	f884 1205 	strb.w	r1, [r4, #517]	; 0x205
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007860:	d070      	beq.n	8007944 <find_volume+0x250>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007862:	2003      	movs	r0, #3
	fs->id = ++Fsid;	/* File system mount ID */
 8007864:	4958      	ldr	r1, [pc, #352]	; (80079c8 <find_volume+0x2d4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007866:	4a59      	ldr	r2, [pc, #356]	; (80079cc <find_volume+0x2d8>)
	fs->id = ++Fsid;	/* File system mount ID */
 8007868:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800786a:	6815      	ldr	r5, [r2, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 800786c:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007870:	3301      	adds	r3, #1
 8007872:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007874:	42ac      	cmp	r4, r5
	fs->id = ++Fsid;	/* File system mount ID */
 8007876:	800b      	strh	r3, [r1, #0]
 8007878:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800787c:	bf04      	itt	eq
 800787e:	2300      	moveq	r3, #0
 8007880:	6013      	streq	r3, [r2, #0]
 8007882:	68d3      	ldr	r3, [r2, #12]
 8007884:	429c      	cmp	r4, r3
 8007886:	f04f 0500 	mov.w	r5, #0
 800788a:	d11a      	bne.n	80078c2 <find_volume+0x1ce>
 800788c:	60d5      	str	r5, [r2, #12]
 800788e:	e018      	b.n	80078c2 <find_volume+0x1ce>
 8007890:	466f      	mov	r7, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007892:	4639      	mov	r1, r7
 8007894:	f504 73df 	add.w	r3, r4, #446	; 0x1be
 8007898:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800789c:	791a      	ldrb	r2, [r3, #4]
 800789e:	b102      	cbz	r2, 80078a2 <find_volume+0x1ae>
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80078a6:	3310      	adds	r3, #16
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d1f7      	bne.n	800789c <find_volume+0x1a8>
 80078ac:	f107 0810 	add.w	r8, r7, #16
			bsect = br[i];
 80078b0:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80078b4:	b99e      	cbnz	r6, 80078de <find_volume+0x1ea>
 80078b6:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80078b8:	4547      	cmp	r7, r8
 80078ba:	d1f9      	bne.n	80078b0 <find_volume+0x1bc>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078bc:	2803      	cmp	r0, #3
 80078be:	d000      	beq.n	80078c2 <find_volume+0x1ce>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80078c0:	250d      	movs	r5, #13
}
 80078c2:	4628      	mov	r0, r5
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80078ca:	2503      	movs	r5, #3
}
 80078cc:	4628      	mov	r0, r5
 80078ce:	b004      	add	sp, #16
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80078d4:	250b      	movs	r5, #11
}
 80078d6:	4628      	mov	r0, r5
 80078d8:	b004      	add	sp, #16
 80078da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80078de:	4631      	mov	r1, r6
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff fed7 	bl	8007694 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d1e6      	bne.n	80078b8 <find_volume+0x1c4>
 80078ea:	e749      	b.n	8007780 <find_volume+0x8c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80078ec:	250c      	movs	r5, #12
 80078ee:	e7e8      	b.n	80078c2 <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 80078f0:	463d      	mov	r5, r7
 80078f2:	e7e6      	b.n	80078c2 <find_volume+0x1ce>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078f4:	2501      	movs	r5, #1
 80078f6:	e7e4      	b.n	80078c2 <find_volume+0x1ce>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80078f8:	f10e 0102 	add.w	r1, lr, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80078fc:	4437      	add	r7, r6
	fs->database = bsect + sysect;						/* Data start sector */
 80078fe:	eb0c 0006 	add.w	r0, ip, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007902:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007906:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800790a:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	fs->volbase = bsect;								/* Volume start sector */
 800790e:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007912:	2d00      	cmp	r5, #0
 8007914:	d0d4      	beq.n	80078c0 <find_volume+0x1cc>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007916:	4417      	add	r7, r2
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007918:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800791c:	f001 0201 	and.w	r2, r1, #1
 8007920:	eb02 0250 	add.w	r2, r2, r0, lsr #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007924:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007928:	2001      	movs	r0, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800792a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800792e:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 8007932:	d3c5      	bcc.n	80078c0 <find_volume+0x1cc>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8007938:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800793a:	e9c4 3383 	strd	r3, r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 800793e:	f884 2205 	strb.w	r2, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007942:	e78f      	b.n	8007864 <find_volume+0x170>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007944:	f8d4 322c 	ldr.w	r3, [r4, #556]	; 0x22c
		&& move_window(fs, bsect + 1) == FR_OK)
 8007948:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800794a:	4299      	cmp	r1, r3
 800794c:	d004      	beq.n	8007958 <find_volume+0x264>
 800794e:	4620      	mov	r0, r4
 8007950:	f7ff fe86 	bl	8007660 <move_window.part.0>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007954:	2800      	cmp	r0, #0
 8007956:	d184      	bne.n	8007862 <find_volume+0x16e>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007958:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800795c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8007960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007964:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 8007968:	2100      	movs	r1, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800796a:	4293      	cmp	r3, r2
		fs->fsi_flag = 0;
 800796c:	f884 1205 	strb.w	r1, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007970:	f47f af77 	bne.w	8007862 <find_volume+0x16e>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007974:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <find_volume+0x2dc>)
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	f47f af72 	bne.w	8007862 <find_volume+0x16e>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800797e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8007982:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8007986:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800798a:	3320      	adds	r3, #32
 800798c:	429a      	cmp	r2, r3
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800798e:	bf04      	itt	eq
 8007990:	e9d4 237a 	ldrdeq	r2, r3, [r4, #488]	; 0x1e8
 8007994:	e9c4 3283 	strdeq	r3, r2, [r4, #524]	; 0x20c
 8007998:	e763      	b.n	8007862 <find_volume+0x16e>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800799a:	f10e 0102 	add.w	r1, lr, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800799e:	4437      	add	r7, r6
	fs->database = bsect + sysect;						/* Data start sector */
 80079a0:	eb0c 0006 	add.w	r0, ip, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80079a4:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80079a8:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80079ac:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	fs->volbase = bsect;								/* Volume start sector */
 80079b0:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	d083      	beq.n	80078c0 <find_volume+0x1cc>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80079b8:	443a      	add	r2, r7
 80079ba:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80079be:	2002      	movs	r0, #2
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80079c0:	004a      	lsls	r2, r1, #1
 80079c2:	e7b2      	b.n	800792a <find_volume+0x236>
 80079c4:	20000330 	.word	0x20000330
 80079c8:	2000034c 	.word	0x2000034c
 80079cc:	20000334 	.word	0x20000334
 80079d0:	41615252 	.word	0x41615252

080079d4 <get_fat.part.0>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch (fs->fs_type) {
 80079d6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80079da:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80079dc:	4604      	mov	r4, r0
 80079de:	460e      	mov	r6, r1
		switch (fs->fs_type) {
 80079e0:	d005      	beq.n	80079ee <get_fat.part.0+0x1a>
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d03e      	beq.n	8007a64 <get_fat.part.0+0x90>
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d016      	beq.n	8007a18 <get_fat.part.0+0x44>
 80079ea:	2001      	movs	r0, #1
}
 80079ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079ee:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079f2:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079f6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80079fa:	4299      	cmp	r1, r3
 80079fc:	d003      	beq.n	8007a06 <get_fat.part.0+0x32>
 80079fe:	f7ff fe2f 	bl	8007660 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d14a      	bne.n	8007a9c <get_fat.part.0+0xc8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007a06:	0071      	lsls	r1, r6, #1
 8007a08:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
			val = LD_WORD(p);
 8007a0c:	1863      	adds	r3, r4, r1
 8007a0e:	5c60      	ldrb	r0, [r4, r1]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8007a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a18:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a1c:	f8d0 222c 	ldr.w	r2, [r0, #556]	; 0x22c
			bc = (UINT)clst; bc += bc / 2;
 8007a20:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a24:	eb03 2155 	add.w	r1, r3, r5, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a28:	4291      	cmp	r1, r2
 8007a2a:	d006      	beq.n	8007a3a <get_fat.part.0+0x66>
 8007a2c:	f7ff fe18 	bl	8007660 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a30:	bba0      	cbnz	r0, 8007a9c <get_fat.part.0+0xc8>
 8007a32:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8007a36:	f8d4 222c 	ldr.w	r2, [r4, #556]	; 0x22c
			wc = fs->win.d8[bc++ % SS(fs)];
 8007a3a:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a3c:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8007a40:	f3c5 0508 	ubfx	r5, r5, #0, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a44:	4291      	cmp	r1, r2
			wc = fs->win.d8[bc++ % SS(fs)];
 8007a46:	5d65      	ldrb	r5, [r4, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a48:	d003      	beq.n	8007a52 <get_fat.part.0+0x7e>
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff fe08 	bl	8007660 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a50:	bb20      	cbnz	r0, 8007a9c <get_fat.part.0+0xc8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007a52:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007a56:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007a58:	5de0      	ldrb	r0, [r4, r7]
 8007a5a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007a5e:	d520      	bpl.n	8007aa2 <get_fat.part.0+0xce>
 8007a60:	0900      	lsrs	r0, r0, #4
}
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a64:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a68:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a6c:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d002      	beq.n	8007a7a <get_fat.part.0+0xa6>
 8007a74:	f7ff fdf4 	bl	8007660 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a78:	b980      	cbnz	r0, 8007a9c <get_fat.part.0+0xc8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007a7a:	00b1      	lsls	r1, r6, #2
 8007a7c:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8007a80:	1863      	adds	r3, r4, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007a82:	5c62      	ldrb	r2, [r4, r1]
 8007a84:	7898      	ldrb	r0, [r3, #2]
 8007a86:	78d9      	ldrb	r1, [r3, #3]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	0400      	lsls	r0, r0, #16
 8007a8c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8007a90:	4310      	orrs	r0, r2
 8007a92:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007a96:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8007a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007aa2:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8007aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007aa8 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007aa8:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007aac:	2b01      	cmp	r3, #1
{
 8007aae:	b570      	push	{r4, r5, r6, lr}
 8007ab0:	4606      	mov	r6, r0
	dp->index = (WORD)idx;	/* Current index */
 8007ab2:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007ab6:	d020      	beq.n	8007afa <dir_sdi+0x52>
 8007ab8:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 8007abc:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d91a      	bls.n	8007afa <dir_sdi+0x52>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007ac4:	460d      	mov	r5, r1
 8007ac6:	b9fb      	cbnz	r3, 8007b08 <dir_sdi+0x60>
 8007ac8:	f890 1200 	ldrb.w	r1, [r0, #512]	; 0x200
 8007acc:	2903      	cmp	r1, #3
 8007ace:	d016      	beq.n	8007afe <dir_sdi+0x56>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007ad0:	f8b0 2208 	ldrh.w	r2, [r0, #520]	; 0x208
 8007ad4:	42aa      	cmp	r2, r5
 8007ad6:	d910      	bls.n	8007afa <dir_sdi+0x52>
		sect = dp->fs->dirbase;
 8007ad8:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8007adc:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007ae0:	b159      	cbz	r1, 8007afa <dir_sdi+0x52>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007ae2:	f005 030f 	and.w	r3, r5, #15
 8007ae6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007aea:	eb01 1115 	add.w	r1, r1, r5, lsr #4
 8007aee:	e9c6 1384 	strd	r1, r3, [r6, #528]	; 0x210
	return FR_OK;
 8007af2:	2000      	movs	r0, #0
}
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
	dp->clust = clst;	/* Current cluster# */
 8007af6:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007afa:	2002      	movs	r0, #2
}
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
		clst = dp->fs->dirbase;
 8007afe:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d0e4      	beq.n	8007ad0 <dir_sdi+0x28>
 8007b06:	460b      	mov	r3, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007b08:	f890 1202 	ldrb.w	r1, [r0, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8007b0c:	ebb5 1f01 	cmp.w	r5, r1, lsl #4
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007b10:	ea4f 1401 	mov.w	r4, r1, lsl #4
		while (idx >= ic) {	/* Follow cluster chain */
 8007b14:	d31c      	bcc.n	8007b50 <dir_sdi+0xa8>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d9ef      	bls.n	8007afa <dir_sdi+0x52>
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	4619      	mov	r1, r3
			idx -= ic;
 8007b1e:	eba5 0504 	sub.w	r5, r5, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007b22:	d9ea      	bls.n	8007afa <dir_sdi+0x52>
 8007b24:	f7ff ff56 	bl	80079d4 <get_fat.part.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b28:	1c42      	adds	r2, r0, #1
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	d01b      	beq.n	8007b66 <dir_sdi+0xbe>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007b2e:	2801      	cmp	r0, #1
 8007b30:	d9e3      	bls.n	8007afa <dir_sdi+0x52>
 8007b32:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
 8007b36:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d9dd      	bls.n	8007afa <dir_sdi+0x52>
		while (idx >= ic) {	/* Follow cluster chain */
 8007b3e:	42ac      	cmp	r4, r5
 8007b40:	d806      	bhi.n	8007b50 <dir_sdi+0xa8>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007b42:	429a      	cmp	r2, r3
 8007b44:	4619      	mov	r1, r3
			idx -= ic;
 8007b46:	eba5 0504 	sub.w	r5, r5, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007b4a:	d8eb      	bhi.n	8007b24 <dir_sdi+0x7c>
	if (!sect) return FR_INT_ERR;
 8007b4c:	2002      	movs	r0, #2
 8007b4e:	e7d5      	b.n	8007afc <dir_sdi+0x54>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b50:	3a02      	subs	r2, #2
	clst -= 2;
 8007b52:	1e9c      	subs	r4, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b54:	4294      	cmp	r4, r2
 8007b56:	d2ce      	bcs.n	8007af6 <dir_sdi+0x4e>
	return clst * fs->csize + fs->database;
 8007b58:	f890 1202 	ldrb.w	r1, [r0, #514]	; 0x202
 8007b5c:	f8d0 2228 	ldr.w	r2, [r0, #552]	; 0x228
 8007b60:	fb04 2101 	mla	r1, r4, r1, r2
 8007b64:	e7ba      	b.n	8007adc <dir_sdi+0x34>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b66:	2001      	movs	r0, #1
}
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	bf00      	nop

08007b6c <put_fat.part.0>:
FRESULT put_fat (
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8007b70:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8007b74:	2b02      	cmp	r3, #2
FRESULT put_fat (
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8007b7c:	d006      	beq.n	8007b8c <put_fat.part.0+0x20>
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d055      	beq.n	8007c2e <put_fat.part.0+0xc2>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d01c      	beq.n	8007bc0 <put_fat.part.0+0x54>
 8007b86:	2002      	movs	r0, #2
}
 8007b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b8c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b90:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b94:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	d003      	beq.n	8007ba4 <put_fat.part.0+0x38>
 8007b9c:	f7ff fd60 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d1f1      	bne.n	8007b88 <put_fat.part.0+0x1c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007ba4:	006d      	lsls	r5, r5, #1
 8007ba6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8007baa:	1962      	adds	r2, r4, r5
 8007bac:	5566      	strb	r6, [r4, r5]
 8007bae:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 8007bb2:	2301      	movs	r3, #1
			ST_WORD(p, (WORD)val);
 8007bb4:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 8007bb6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
			break;
 8007bba:	2000      	movs	r0, #0
}
 8007bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bc0:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bc4:	f8d0 222c 	ldr.w	r2, [r0, #556]	; 0x22c
			bc = (UINT)clst; bc += bc / 2;
 8007bc8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bcc:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bd0:	4291      	cmp	r1, r2
 8007bd2:	d007      	beq.n	8007be4 <put_fat.part.0+0x78>
 8007bd4:	f7ff fd44 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d1d5      	bne.n	8007b88 <put_fat.part.0+0x1c>
 8007bdc:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8007be0:	f8d4 222c 	ldr.w	r2, [r4, #556]	; 0x22c
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007be4:	07e9      	lsls	r1, r5, #31
			p = &fs->win.d8[bc++ % SS(fs)];
 8007be6:	f107 0801 	add.w	r8, r7, #1
 8007bea:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bee:	d541      	bpl.n	8007c74 <put_fat.part.0+0x108>
 8007bf0:	5de0      	ldrb	r0, [r4, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bf2:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bf6:	f000 000f 	and.w	r0, r0, #15
 8007bfa:	ea40 1306 	orr.w	r3, r0, r6, lsl #4
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bfe:	4291      	cmp	r1, r2
			fs->wflag = 1;
 8007c00:	f04f 0001 	mov.w	r0, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007c04:	55e3      	strb	r3, [r4, r7]
			fs->wflag = 1;
 8007c06:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c0a:	d004      	beq.n	8007c16 <put_fat.part.0+0xaa>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f7ff fd27 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d1b8      	bne.n	8007b88 <put_fat.part.0+0x1c>
			p = &fs->win.d8[bc % SS(fs)];
 8007c16:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c1a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8007c1e:	f804 6008 	strb.w	r6, [r4, r8]
			fs->wflag = 1;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
			break;
 8007c28:	2000      	movs	r0, #0
}
 8007c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c2e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c32:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c36:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	d003      	beq.n	8007c46 <put_fat.part.0+0xda>
 8007c3e:	f7ff fd0f 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1a0      	bne.n	8007b88 <put_fat.part.0+0x1c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007c46:	00ad      	lsls	r5, r5, #2
 8007c48:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8007c4c:	1963      	adds	r3, r4, r5
			fs->wflag = 1;
 8007c4e:	2101      	movs	r1, #1
			val |= LD_DWORD(p) & 0xF0000000;
 8007c50:	78da      	ldrb	r2, [r3, #3]
 8007c52:	0612      	lsls	r2, r2, #24
 8007c54:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007c58:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 8007c5a:	5566      	strb	r6, [r4, r5]
 8007c5c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8007c60:	0c32      	lsrs	r2, r6, #16
 8007c62:	0e36      	lsrs	r6, r6, #24
 8007c64:	7058      	strb	r0, [r3, #1]
 8007c66:	709a      	strb	r2, [r3, #2]
 8007c68:	70de      	strb	r6, [r3, #3]
			fs->wflag = 1;
 8007c6a:	f884 1204 	strb.w	r1, [r4, #516]	; 0x204
			break;
 8007c6e:	2000      	movs	r0, #0
}
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c74:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c78:	4291      	cmp	r1, r2
			fs->wflag = 1;
 8007c7a:	f04f 0301 	mov.w	r3, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007c7e:	55e6      	strb	r6, [r4, r7]
			fs->wflag = 1;
 8007c80:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c84:	d005      	beq.n	8007c92 <put_fat.part.0+0x126>
 8007c86:	4620      	mov	r0, r4
 8007c88:	f7ff fcea 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f47f af7b 	bne.w	8007b88 <put_fat.part.0+0x1c>
			p = &fs->win.d8[bc % SS(fs)];
 8007c92:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c96:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8007c9a:	f814 3008 	ldrb.w	r3, [r4, r8]
 8007c9e:	f023 060f 	bic.w	r6, r3, #15
 8007ca2:	4316      	orrs	r6, r2
 8007ca4:	e7bb      	b.n	8007c1e <put_fat.part.0+0xb2>
 8007ca6:	bf00      	nop

08007ca8 <create_chain>:
{
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8007cac:	460f      	mov	r7, r1
 8007cae:	b981      	cbnz	r1, 8007cd2 <create_chain+0x2a>
		scl = fs->last_clust;			/* Get suggested start point */
 8007cb0:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007cb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007cb8:	b9f6      	cbnz	r6, 8007cf8 <create_chain+0x50>
 8007cba:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
 8007cbc:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
 8007cbe:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d32e      	bcc.n	8007d22 <create_chain+0x7a>
			if (ncl > scl) return 0;	/* No free cluster */
 8007cc4:	2e01      	cmp	r6, #1
 8007cc6:	d940      	bls.n	8007d4a <create_chain+0xa2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d819      	bhi.n	8007d00 <create_chain+0x58>
		if (cs < 2) return 1;			/* Invalid value */
 8007ccc:	2401      	movs	r4, #1
}
 8007cce:	4620      	mov	r0, r4
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007cd2:	2901      	cmp	r1, #1
 8007cd4:	d9fa      	bls.n	8007ccc <create_chain+0x24>
 8007cd6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007cda:	4299      	cmp	r1, r3
 8007cdc:	d2f6      	bcs.n	8007ccc <create_chain+0x24>
 8007cde:	f7ff fe79 	bl	80079d4 <get_fat.part.0>
		if (cs < 2) return 1;			/* Invalid value */
 8007ce2:	2801      	cmp	r0, #1
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	d9f1      	bls.n	8007ccc <create_chain+0x24>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ce8:	1c60      	adds	r0, r4, #1
 8007cea:	d02a      	beq.n	8007d42 <create_chain+0x9a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007cec:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d8ec      	bhi.n	8007cce <create_chain+0x26>
 8007cf4:	463e      	mov	r6, r7
 8007cf6:	e7e1      	b.n	8007cbc <create_chain+0x14>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	bf98      	it	ls
 8007cfc:	2601      	movls	r6, #1
 8007cfe:	e7dd      	b.n	8007cbc <create_chain+0x14>
			ncl = 2;
 8007d00:	2402      	movs	r4, #2
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f7ff fe65 	bl	80079d4 <get_fat.part.0>
		if (cs == 0) break;				/* Found a free cluster */
 8007d0a:	b168      	cbz	r0, 8007d28 <create_chain+0x80>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007d0c:	1c41      	adds	r1, r0, #1
 8007d0e:	d018      	beq.n	8007d42 <create_chain+0x9a>
 8007d10:	2801      	cmp	r0, #1
 8007d12:	d0db      	beq.n	8007ccc <create_chain+0x24>
		if (ncl == scl) return 0;		/* No free cluster */
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d018      	beq.n	8007d4a <create_chain+0xa2>
 8007d18:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8007d1c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d2d0      	bcs.n	8007cc4 <create_chain+0x1c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007d22:	2c01      	cmp	r4, #1
 8007d24:	d8ed      	bhi.n	8007d02 <create_chain+0x5a>
 8007d26:	e7d1      	b.n	8007ccc <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007d28:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d9cd      	bls.n	8007ccc <create_chain+0x24>
 8007d30:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7ff ff18 	bl	8007b6c <put_fat.part.0>
	if (res == FR_OK && clst != 0) {
 8007d3c:	b140      	cbz	r0, 8007d50 <create_chain+0xa8>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007d3e:	2801      	cmp	r0, #1
 8007d40:	d1c4      	bne.n	8007ccc <create_chain+0x24>
 8007d42:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007d46:	4620      	mov	r0, r4
 8007d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ncl > scl) return 0;	/* No free cluster */
 8007d4a:	2400      	movs	r4, #0
}
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_OK && clst != 0) {
 8007d50:	b167      	cbz	r7, 8007d6c <create_chain+0xc4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007d52:	2f01      	cmp	r7, #1
 8007d54:	d9ba      	bls.n	8007ccc <create_chain+0x24>
 8007d56:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007d5a:	429f      	cmp	r7, r3
 8007d5c:	d2b6      	bcs.n	8007ccc <create_chain+0x24>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4622      	mov	r2, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7ff ff02 	bl	8007b6c <put_fat.part.0>
	if (res == FR_OK) {
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d1e8      	bne.n	8007d3e <create_chain+0x96>
		if (fs->free_clust != 0xFFFFFFFF) {
 8007d6c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8007d70:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	d0aa      	beq.n	8007cce <create_chain+0x26>
			fs->fsi_flag |= 1;
 8007d78:	f895 2205 	ldrb.w	r2, [r5, #517]	; 0x205
			fs->free_clust--;
 8007d7c:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8007d82:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007d86:	f885 2205 	strb.w	r2, [r5, #517]	; 0x205
 8007d8a:	e7a0      	b.n	8007cce <create_chain+0x26>

08007d8c <dir_next>:
{
 8007d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8007d90:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8007d94:	3501      	adds	r5, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007d96:	b2ab      	uxth	r3, r5
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d049      	beq.n	8007e30 <dir_next+0xa4>
 8007d9c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007da0:	4604      	mov	r4, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <dir_next+0xa4>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007da6:	f015 070f 	ands.w	r7, r5, #15
 8007daa:	d00a      	beq.n	8007dc2 <dir_next+0x36>
 8007dac:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8007db0:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007db4:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8007db8:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
	return FR_OK;
 8007dbc:	2000      	movs	r0, #0
}
 8007dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;					/* Next sector */
 8007dc2:	460e      	mov	r6, r1
		if (!dp->clust) {		/* Static table */
 8007dc4:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8007dc8:	3301      	adds	r3, #1
 8007dca:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007dce:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8007dd2:	b349      	cbz	r1, 8007e28 <dir_next+0x9c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007dd4:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	ea13 1815 	ands.w	r8, r3, r5, lsr #4
 8007dde:	d1e7      	bne.n	8007db0 <dir_next+0x24>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007de0:	2901      	cmp	r1, #1
 8007de2:	d928      	bls.n	8007e36 <dir_next+0xaa>
 8007de4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007de8:	4299      	cmp	r1, r3
 8007dea:	d224      	bcs.n	8007e36 <dir_next+0xaa>
 8007dec:	f7ff fdf2 	bl	80079d4 <get_fat.part.0>
				if (clst <= 1) return FR_INT_ERR;
 8007df0:	2801      	cmp	r0, #1
 8007df2:	4682      	mov	sl, r0
 8007df4:	d91f      	bls.n	8007e36 <dir_next+0xaa>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007df6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007dfa:	d064      	beq.n	8007ec6 <dir_next+0x13a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007dfc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007e00:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8007e04:	4552      	cmp	r2, sl
 8007e06:	d918      	bls.n	8007e3a <dir_next+0xae>
 8007e08:	f1aa 0602 	sub.w	r6, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e0c:	3a02      	subs	r2, #2
 8007e0e:	42b2      	cmp	r2, r6
				dp->clust = clst;				/* Initialize data for new cluster */
 8007e10:	f8c4 a20c 	str.w	sl, [r4, #524]	; 0x20c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e14:	d905      	bls.n	8007e22 <dir_next+0x96>
	return clst * fs->csize + fs->database;
 8007e16:	f890 8202 	ldrb.w	r8, [r0, #514]	; 0x202
 8007e1a:	f8d0 3228 	ldr.w	r3, [r0, #552]	; 0x228
 8007e1e:	fb06 3808 	mla	r8, r6, r8, r3
				dp->sect = clust2sect(dp->fs, clst);
 8007e22:	f8c4 8210 	str.w	r8, [r4, #528]	; 0x210
 8007e26:	e7c3      	b.n	8007db0 <dir_next+0x24>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007e28:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8007e2c:	42ab      	cmp	r3, r5
 8007e2e:	d8bf      	bhi.n	8007db0 <dir_next+0x24>
		return FR_NO_FILE;
 8007e30:	2004      	movs	r0, #4
}
 8007e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst <= 1) return FR_INT_ERR;
 8007e36:	2002      	movs	r0, #2
 8007e38:	e7c1      	b.n	8007dbe <dir_next+0x32>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	d0f8      	beq.n	8007e30 <dir_next+0xa4>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007e3e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8007e42:	f7ff ff31 	bl	8007ca8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e46:	4682      	mov	sl, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d046      	beq.n	8007eda <dir_next+0x14e>
					if (clst == 1) return FR_INT_ERR;
 8007e4c:	2801      	cmp	r0, #1
 8007e4e:	d0f2      	beq.n	8007e36 <dir_next+0xaa>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007e50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e54:	d037      	beq.n	8007ec6 <dir_next+0x13a>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007e56:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e5a:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d13d      	bne.n	8007ede <dir_next+0x152>
	while (cnt--)
 8007e62:	f500 7200 	add.w	r2, r0, #512	; 0x200
		*d++ = (BYTE)val;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f800 3b01 	strb.w	r3, [r0], #1
	while (cnt--)
 8007e6c:	4290      	cmp	r0, r2
 8007e6e:	d1fb      	bne.n	8007e68 <dir_next+0xdc>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007e70:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007e78:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
 8007e7c:	3b02      	subs	r3, #2
	clst -= 2;
 8007e7e:	f1aa 0602 	sub.w	r6, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e82:	429e      	cmp	r6, r3
	return clst * fs->csize + fs->database;
 8007e84:	bf36      	itet	cc
 8007e86:	f8d0 3228 	ldrcc.w	r3, [r0, #552]	; 0x228
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e8a:	2300      	movcs	r3, #0
	return clst * fs->csize + fs->database;
 8007e8c:	fb06 3302 	mlacc	r3, r6, r2, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007e90:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e94:	b1ca      	cbz	r2, 8007eca <dir_next+0x13e>
 8007e96:	f04f 0b00 	mov.w	fp, #0
						dp->fs->wflag = 1;
 8007e9a:	f04f 0901 	mov.w	r9, #1
 8007e9e:	e00a      	b.n	8007eb6 <dir_next+0x12a>
						dp->fs->winsect++;
 8007ea0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007ea4:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007ea8:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
						dp->fs->winsect++;
 8007eac:	3301      	adds	r3, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007eae:	455a      	cmp	r2, fp
						dp->fs->winsect++;
 8007eb0:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007eb4:	d90a      	bls.n	8007ecc <dir_next+0x140>
						dp->fs->wflag = 1;
 8007eb6:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007eba:	f10b 0b01 	add.w	fp, fp, #1
 8007ebe:	f7ff fb59 	bl	8007574 <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0ec      	beq.n	8007ea0 <dir_next+0x114>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e779      	b.n	8007dbe <dir_next+0x32>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007eca:	4693      	mov	fp, r2
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007ecc:	eba3 030b 	sub.w	r3, r3, fp
 8007ed0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8007ed4:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
 8007ed8:	e798      	b.n	8007e0c <dir_next+0x80>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007eda:	2007      	movs	r0, #7
 8007edc:	e76f      	b.n	8007dbe <dir_next+0x32>
 8007ede:	f7ff fb49 	bl	8007574 <sync_window.part.0>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1ef      	bne.n	8007ec6 <dir_next+0x13a>
 8007ee6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8007eea:	e7ba      	b.n	8007e62 <dir_next+0xd6>

08007eec <follow_path>:
{
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007ef0:	780b      	ldrb	r3, [r1, #0]
 8007ef2:	2b2f      	cmp	r3, #47	; 0x2f
{
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	4604      	mov	r4, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007ef8:	d02f      	beq.n	8007f5a <follow_path+0x6e>
 8007efa:	2b5c      	cmp	r3, #92	; 0x5c
 8007efc:	d02d      	beq.n	8007f5a <follow_path+0x6e>
	dp->sclust = 0;							/* Always start from the root directory */
 8007efe:	2600      	movs	r6, #0
 8007f00:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f04:	782a      	ldrb	r2, [r5, #0]
 8007f06:	2a1f      	cmp	r2, #31
 8007f08:	d92e      	bls.n	8007f68 <follow_path+0x7c>
 8007f0a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f0e:	4f73      	ldr	r7, [pc, #460]	; (80080dc <follow_path+0x1f0>)
 8007f10:	f103 0e0b 	add.w	lr, r3, #11
		*d++ = (BYTE)val;
 8007f14:	2620      	movs	r6, #32
 8007f16:	e001      	b.n	8007f1c <follow_path+0x30>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007f18:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007f1c:	2a2f      	cmp	r2, #47	; 0x2f
 8007f1e:	d0fb      	beq.n	8007f18 <follow_path+0x2c>
 8007f20:	2a5c      	cmp	r2, #92	; 0x5c
 8007f22:	d0f9      	beq.n	8007f18 <follow_path+0x2c>
 8007f24:	461a      	mov	r2, r3
		*d++ = (BYTE)val;
 8007f26:	f802 6b01 	strb.w	r6, [r2], #1
	while (cnt--)
 8007f2a:	4596      	cmp	lr, r2
 8007f2c:	d1fb      	bne.n	8007f26 <follow_path+0x3a>
		c = (BYTE)p[si++];
 8007f2e:	7828      	ldrb	r0, [r5, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007f30:	2820      	cmp	r0, #32
 8007f32:	d90f      	bls.n	8007f54 <follow_path+0x68>
	si = i = b = 0; ni = 8;
 8007f34:	f04f 0c00 	mov.w	ip, #0
 8007f38:	46e6      	mov	lr, ip
 8007f3a:	46aa      	mov	sl, r5
 8007f3c:	f04f 0808 	mov.w	r8, #8
		c = (BYTE)p[si++];
 8007f40:	f04f 0901 	mov.w	r9, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007f44:	282f      	cmp	r0, #47	; 0x2f
 8007f46:	d04c      	beq.n	8007fe2 <follow_path+0xf6>
 8007f48:	285c      	cmp	r0, #92	; 0x5c
 8007f4a:	d04a      	beq.n	8007fe2 <follow_path+0xf6>
		if (c == '.' || i >= ni) {
 8007f4c:	282e      	cmp	r0, #46	; 0x2e
 8007f4e:	d013      	beq.n	8007f78 <follow_path+0x8c>
 8007f50:	45f0      	cmp	r8, lr
 8007f52:	d824      	bhi.n	8007f9e <follow_path+0xb2>
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007f54:	2006      	movs	r0, #6
}
 8007f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		path++;
 8007f5a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f62:	782a      	ldrb	r2, [r5, #0]
 8007f64:	2a1f      	cmp	r2, #31
 8007f66:	d8d0      	bhi.n	8007f0a <follow_path+0x1e>
		res = dir_sdi(dp, 0);
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7ff fd9c 	bl	8007aa8 <dir_sdi>
		dp->dir = 0;
 8007f70:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
}
 8007f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007f78:	f1b8 0f08 	cmp.w	r8, #8
 8007f7c:	d1ea      	bne.n	8007f54 <follow_path+0x68>
			b <<= 2; continue;
 8007f7e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
			i = 8; ni = 11;
 8007f82:	46c6      	mov	lr, r8
			b <<= 2; continue;
 8007f84:	fa5f fc8c 	uxtb.w	ip, ip
			i = 8; ni = 11;
 8007f88:	f04f 080b 	mov.w	r8, #11
		c = (BYTE)p[si++];
 8007f8c:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007f90:	2820      	cmp	r0, #32
		c = (BYTE)p[si++];
 8007f92:	f109 0901 	add.w	r9, r9, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007f96:	d8d5      	bhi.n	8007f44 <follow_path+0x58>
	*path = &p[si];						/* Return pointer to the next segment */
 8007f98:	444d      	add	r5, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	e026      	b.n	8007fec <follow_path+0x100>
		if (c >= 0x80) {				/* Extended character? */
 8007f9e:	0602      	lsls	r2, r0, #24
 8007fa0:	d503      	bpl.n	8007faa <follow_path+0xbe>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007fa2:	3880      	subs	r0, #128	; 0x80
			b |= 3;						/* Eliminate NT flag */
 8007fa4:	f04c 0c03 	orr.w	ip, ip, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007fa8:	5c38      	ldrb	r0, [r7, r0]
	while (*str && *str != chr) str++;
 8007faa:	494d      	ldr	r1, [pc, #308]	; (80080e0 <follow_path+0x1f4>)
 8007fac:	2222      	movs	r2, #34	; 0x22
 8007fae:	4290      	cmp	r0, r2
 8007fb0:	d0d0      	beq.n	8007f54 <follow_path+0x68>
 8007fb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1f9      	bne.n	8007fae <follow_path+0xc2>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007fba:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
 8007fbe:	2a19      	cmp	r2, #25
 8007fc0:	d806      	bhi.n	8007fd0 <follow_path+0xe4>
				b |= 2;
 8007fc2:	f04c 0c02 	orr.w	ip, ip, #2
			sfn[i++] = c;
 8007fc6:	f803 000e 	strb.w	r0, [r3, lr]
 8007fca:	f10e 0e01 	add.w	lr, lr, #1
 8007fce:	e7dd      	b.n	8007f8c <follow_path+0xa0>
				if (IsLower(c)) {		/* ASCII small capital? */
 8007fd0:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 8007fd4:	2a19      	cmp	r2, #25
 8007fd6:	d8f6      	bhi.n	8007fc6 <follow_path+0xda>
					b |= 1; c -= 0x20;
 8007fd8:	3820      	subs	r0, #32
 8007fda:	b2c0      	uxtb	r0, r0
 8007fdc:	f04c 0c01 	orr.w	ip, ip, #1
 8007fe0:	e7f1      	b.n	8007fc6 <follow_path+0xda>
	*path = &p[si];						/* Return pointer to the next segment */
 8007fe2:	444d      	add	r5, r9
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007fe4:	f1be 0f00 	cmp.w	lr, #0
 8007fe8:	d0b4      	beq.n	8007f54 <follow_path+0x68>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007fea:	2200      	movs	r2, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007fec:	7819      	ldrb	r1, [r3, #0]
 8007fee:	29e5      	cmp	r1, #229	; 0xe5
 8007ff0:	bf04      	itt	eq
 8007ff2:	2105      	moveq	r1, #5
 8007ff4:	7019      	strbeq	r1, [r3, #0]
	if (ni == 8) b <<= 2;
 8007ff6:	f1b8 0f08 	cmp.w	r8, #8
 8007ffa:	d05c      	beq.n	80080b6 <follow_path+0x1ca>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007ffc:	f00c 0103 	and.w	r1, ip, #3
 8008000:	2901      	cmp	r1, #1
 8008002:	bf08      	it	eq
 8008004:	f042 0210 	orreq.w	r2, r2, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8008008:	f00c 0c0c 	and.w	ip, ip, #12
 800800c:	f1bc 0f04 	cmp.w	ip, #4
 8008010:	bf08      	it	eq
 8008012:	f042 0208 	orreq.w	r2, r2, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8008016:	72da      	strb	r2, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008018:	2100      	movs	r1, #0
 800801a:	4620      	mov	r0, r4
 800801c:	f7ff fd44 	bl	8007aa8 <dir_sdi>
	if (res != FR_OK) return res;
 8008020:	b130      	cbz	r0, 8008030 <follow_path+0x144>
 8008022:	e04d      	b.n	80080c0 <follow_path+0x1d4>
		res = dir_next(dp, 0);		/* Next entry */
 8008024:	2100      	movs	r1, #0
 8008026:	4620      	mov	r0, r4
 8008028:	f7ff feb0 	bl	8007d8c <dir_next>
	} while (res == FR_OK);
 800802c:	2800      	cmp	r0, #0
 800802e:	d147      	bne.n	80080c0 <follow_path+0x1d4>
		res = move_window(dp->fs, dp->sect);
 8008030:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008034:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008038:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <follow_path+0x15a>
 8008040:	f7ff fb0e 	bl	8007660 <move_window.part.0>
		if (res != FR_OK) break;
 8008044:	bbe0      	cbnz	r0, 80080c0 <follow_path+0x1d4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008046:	f8d4 9214 	ldr.w	r9, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 800804a:	f899 1000 	ldrb.w	r1, [r9]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800804e:	b3d1      	cbz	r1, 80080c6 <follow_path+0x1da>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008050:	f899 c00b 	ldrb.w	ip, [r9, #11]
 8008054:	f01c 0008 	ands.w	r0, ip, #8
 8008058:	d1e4      	bne.n	8008024 <follow_path+0x138>
 800805a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800805e:	46c8      	mov	r8, r9
 8008060:	f103 0e0b 	add.w	lr, r3, #11
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008064:	461a      	mov	r2, r3
 8008066:	e001      	b.n	800806c <follow_path+0x180>
 8008068:	f818 1f01 	ldrb.w	r1, [r8, #1]!
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800806c:	f812 ab01 	ldrb.w	sl, [r2], #1
 8008070:	458a      	cmp	sl, r1
 8008072:	d1d7      	bne.n	8008024 <follow_path+0x138>
 8008074:	4572      	cmp	r2, lr
 8008076:	d1f7      	bne.n	8008068 <follow_path+0x17c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008078:	7ada      	ldrb	r2, [r3, #11]
 800807a:	0752      	lsls	r2, r2, #29
 800807c:	f53f af6b 	bmi.w	8007f56 <follow_path+0x6a>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008080:	f01c 0f10 	tst.w	ip, #16
 8008084:	d024      	beq.n	80080d0 <follow_path+0x1e4>
			dp->sclust = ld_clust(dp->fs, dir);
 8008086:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 800808a:	f899 001b 	ldrb.w	r0, [r9, #27]
	if (fs->fs_type == FS_FAT32)
 800808e:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008092:	f899 201a 	ldrb.w	r2, [r9, #26]
	if (fs->fs_type == FS_FAT32)
 8008096:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008098:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 800809c:	d107      	bne.n	80080ae <follow_path+0x1c2>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800809e:	f899 0015 	ldrb.w	r0, [r9, #21]
 80080a2:	f899 1014 	ldrb.w	r1, [r9, #20]
 80080a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80080aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 80080ae:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		for (;;) {
 80080b2:	782a      	ldrb	r2, [r5, #0]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80080b4:	e732      	b.n	8007f1c <follow_path+0x30>
	if (ni == 8) b <<= 2;
 80080b6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80080ba:	fa5f fc8c 	uxtb.w	ip, ip
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80080be:	e7a3      	b.n	8008008 <follow_path+0x11c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080c0:	2804      	cmp	r0, #4
 80080c2:	f47f af48 	bne.w	8007f56 <follow_path+0x6a>
			ns = dp->fn[NSFLAG];
 80080c6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80080ca:	7adb      	ldrb	r3, [r3, #11]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080cc:	0759      	lsls	r1, r3, #29
 80080ce:	d402      	bmi.n	80080d6 <follow_path+0x1ea>
 80080d0:	2005      	movs	r0, #5
}
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = dir_find(dp);				/* Find an object with the sagment name */
 80080d6:	2004      	movs	r0, #4
 80080d8:	e73d      	b.n	8007f56 <follow_path+0x6a>
 80080da:	bf00      	nop
 80080dc:	0803c100 	.word	0x0803c100
 80080e0:	0803c0f0 	.word	0x0803c0f0

080080e4 <remove_chain.part.0>:
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80080e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d231      	bcs.n	8008150 <remove_chain.part.0+0x6c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80080ec:	2901      	cmp	r1, #1
FRESULT remove_chain (
 80080ee:	b570      	push	{r4, r5, r6, lr}
 80080f0:	4605      	mov	r5, r0
 80080f2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80080f4:	d928      	bls.n	8008148 <remove_chain.part.0+0x64>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4628      	mov	r0, r5
 80080fa:	f7ff fc6b 	bl	80079d4 <get_fat.part.0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80080fe:	4606      	mov	r6, r0
			if (nxt == 0) break;				/* Empty cluster? */
 8008100:	4623      	mov	r3, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008102:	4621      	mov	r1, r4
 8008104:	2200      	movs	r2, #0
 8008106:	4628      	mov	r0, r5
			if (nxt == 0) break;				/* Empty cluster? */
 8008108:	4634      	mov	r4, r6
 800810a:	b1de      	cbz	r6, 8008144 <remove_chain.part.0+0x60>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800810c:	2e01      	cmp	r6, #1
 800810e:	d01b      	beq.n	8008148 <remove_chain.part.0+0x64>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008110:	1c66      	adds	r6, r4, #1
 8008112:	d01b      	beq.n	800814c <remove_chain.part.0+0x68>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008114:	f8d5 6214 	ldr.w	r6, [r5, #532]	; 0x214
 8008118:	429e      	cmp	r6, r3
 800811a:	d915      	bls.n	8008148 <remove_chain.part.0+0x64>
 800811c:	f7ff fd26 	bl	8007b6c <put_fat.part.0>
			if (res != FR_OK) break;
 8008120:	b988      	cbnz	r0, 8008146 <remove_chain.part.0+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008122:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	d008      	beq.n	800813c <remove_chain.part.0+0x58>
				fs->fsi_flag |= 1;
 800812a:	f895 2205 	ldrb.w	r2, [r5, #517]	; 0x205
				fs->free_clust++;
 800812e:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 8008130:	f042 0201 	orr.w	r2, r2, #1
				fs->free_clust++;
 8008134:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
				fs->fsi_flag |= 1;
 8008138:	f885 2205 	strb.w	r2, [r5, #517]	; 0x205
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800813c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8008140:	429c      	cmp	r4, r3
 8008142:	d3d8      	bcc.n	80080f6 <remove_chain.part.0+0x12>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008144:	2000      	movs	r0, #0
}
 8008146:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008148:	2002      	movs	r0, #2
}
 800814a:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800814c:	2001      	movs	r0, #1
}
 800814e:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008150:	2000      	movs	r0, #0
}
 8008152:	4770      	bx	lr

08008154 <dir_read.constprop.0>:
FRESULT dir_read (
 8008154:	b510      	push	{r4, lr}
 8008156:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8008158:	2004      	movs	r0, #4
 800815a:	e01e      	b.n	800819a <dir_read.constprop.0+0x46>
		res = move_window(dp->fs, dp->sect);
 800815c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008160:	f8d0 222c 	ldr.w	r2, [r0, #556]	; 0x22c
 8008164:	429a      	cmp	r2, r3
 8008166:	d002      	beq.n	800816e <dir_read.constprop.0+0x1a>
 8008168:	f7ff fa7a 	bl	8007660 <move_window.part.0>
		if (res != FR_OK) break;
 800816c:	b9f0      	cbnz	r0, 80081ac <dir_read.constprop.0+0x58>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800816e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8008172:	7813      	ldrb	r3, [r2, #0]
		res = dir_next(dp, 0);				/* Next entry */
 8008174:	2100      	movs	r1, #0
 8008176:	4620      	mov	r0, r4
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008178:	b1bb      	cbz	r3, 80081aa <dir_read.constprop.0+0x56>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800817a:	2be5      	cmp	r3, #229	; 0xe5
 800817c:	d00a      	beq.n	8008194 <dir_read.constprop.0+0x40>
 800817e:	2b2e      	cmp	r3, #46	; 0x2e
 8008180:	d008      	beq.n	8008194 <dir_read.constprop.0+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 8008182:	7ad3      	ldrb	r3, [r2, #11]
 8008184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8008188:	2b0f      	cmp	r3, #15
 800818a:	f023 0220 	bic.w	r2, r3, #32
 800818e:	d001      	beq.n	8008194 <dir_read.constprop.0+0x40>
 8008190:	2a08      	cmp	r2, #8
 8008192:	d108      	bne.n	80081a6 <dir_read.constprop.0+0x52>
		res = dir_next(dp, 0);				/* Next entry */
 8008194:	f7ff fdfa 	bl	8007d8c <dir_next>
		if (res != FR_OK) break;
 8008198:	b940      	cbnz	r0, 80081ac <dir_read.constprop.0+0x58>
	while (dp->sect) {
 800819a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800819e:	4619      	mov	r1, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1db      	bne.n	800815c <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;
 80081a4:	b910      	cbnz	r0, 80081ac <dir_read.constprop.0+0x58>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081a6:	2000      	movs	r0, #0
}
 80081a8:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081aa:	2004      	movs	r0, #4
	if (res != FR_OK) dp->sect = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 80081b2:	bd10      	pop	{r4, pc}

080081b4 <dir_register>:
{
 80081b4:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 80081b6:	2100      	movs	r1, #0
{
 80081b8:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 80081ba:	f7ff fc75 	bl	8007aa8 <dir_sdi>
	if (res == FR_OK) {
 80081be:	4605      	mov	r5, r0
 80081c0:	b138      	cbz	r0, 80081d2 <dir_register+0x1e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80081c2:	2d04      	cmp	r5, #4
 80081c4:	bf08      	it	eq
 80081c6:	2507      	moveq	r5, #7
}
 80081c8:	4628      	mov	r0, r5
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80081cc:	f7ff fdde 	bl	8007d8c <dir_next>
		} while (res == FR_OK);
 80081d0:	bbc8      	cbnz	r0, 8008246 <dir_register+0x92>
			res = move_window(dp->fs, dp->sect);
 80081d2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80081d6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 80081da:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80081de:	4299      	cmp	r1, r3
 80081e0:	d002      	beq.n	80081e8 <dir_register+0x34>
 80081e2:	f7ff fa3d 	bl	8007660 <move_window.part.0>
			if (res != FR_OK) break;
 80081e6:	bb70      	cbnz	r0, 8008246 <dir_register+0x92>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80081e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	2ae5      	cmp	r2, #229	; 0xe5
 80081f0:	d003      	beq.n	80081fa <dir_register+0x46>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80081f2:	2101      	movs	r1, #1
 80081f4:	4620      	mov	r0, r4
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1e8      	bne.n	80081cc <dir_register+0x18>
		res = move_window(dp->fs, dp->sect);
 80081fa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80081fe:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008202:	f8d0 222c 	ldr.w	r2, [r0, #556]	; 0x22c
 8008206:	4291      	cmp	r1, r2
 8008208:	d004      	beq.n	8008214 <dir_register+0x60>
 800820a:	f7ff fa29 	bl	8007660 <move_window.part.0>
		if (res == FR_OK) {
 800820e:	b9e0      	cbnz	r0, 800824a <dir_register+0x96>
 8008210:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
	while (cnt--)
 8008214:	f103 0120 	add.w	r1, r3, #32
		*d++ = (BYTE)val;
 8008218:	2200      	movs	r2, #0
 800821a:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
 800821e:	4299      	cmp	r1, r3
 8008220:	d1fb      	bne.n	800821a <dir_register+0x66>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008222:	e9d4 2385 	ldrd	r2, r3, [r4, #532]	; 0x214
 8008226:	f103 000b 	add.w	r0, r3, #11
 800822a:	3a01      	subs	r2, #1
		*d++ = *s++;
 800822c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008230:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 8008234:	4298      	cmp	r0, r3
 8008236:	d1f9      	bne.n	800822c <dir_register+0x78>
			dp->fs->wflag = 1;
 8008238:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8008242:	4628      	mov	r0, r5
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	4605      	mov	r5, r0
 8008248:	e7bb      	b.n	80081c2 <dir_register+0xe>
 800824a:	4605      	mov	r5, r0
 800824c:	4628      	mov	r0, r5
 800824e:	bd38      	pop	{r3, r4, r5, pc}

08008250 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	b085      	sub	sp, #20
 8008254:	4614      	mov	r4, r2
 8008256:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8008258:	a803      	add	r0, sp, #12
{
 800825a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800825c:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800825e:	f7ff f917 	bl	8007490 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008262:	1e03      	subs	r3, r0, #0
 8008264:	db23      	blt.n	80082ae <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008266:	4916      	ldr	r1, [pc, #88]	; (80082c0 <f_mount+0x70>)
 8008268:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]

	if (cfs) {
 800826c:	b16a      	cbz	r2, 800828a <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800826e:	4815      	ldr	r0, [pc, #84]	; (80082c4 <f_mount+0x74>)
 8008270:	6805      	ldr	r5, [r0, #0]
 8008272:	42aa      	cmp	r2, r5
 8008274:	bf04      	itt	eq
 8008276:	2500      	moveq	r5, #0
 8008278:	6005      	streq	r5, [r0, #0]
 800827a:	68c5      	ldr	r5, [r0, #12]
 800827c:	42aa      	cmp	r2, r5
 800827e:	bf04      	itt	eq
 8008280:	2500      	moveq	r5, #0
 8008282:	60c5      	streq	r5, [r0, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008284:	2000      	movs	r0, #0
 8008286:	f882 0200 	strb.w	r0, [r2, #512]	; 0x200
	}

	if (fs) {
 800828a:	9a01      	ldr	r2, [sp, #4]
 800828c:	b192      	cbz	r2, 80082b4 <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
 800828e:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008290:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8008292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8008296:	f882 0200 	strb.w	r0, [r2, #512]	; 0x200
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800829a:	d001      	beq.n	80082a0 <f_mount+0x50>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800829c:	b005      	add	sp, #20
 800829e:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80082a0:	4602      	mov	r2, r0
 80082a2:	4669      	mov	r1, sp
 80082a4:	a801      	add	r0, sp, #4
 80082a6:	f7ff fa25 	bl	80076f4 <find_volume>
}
 80082aa:	b005      	add	sp, #20
 80082ac:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80082ae:	200b      	movs	r0, #11
}
 80082b0:	b005      	add	sp, #20
 80082b2:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082b4:	4610      	mov	r0, r2
	FatFs[vol] = fs;					/* Register new fs object */
 80082b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082ba:	b005      	add	sp, #20
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	bf00      	nop
 80082c0:	20000330 	.word	0x20000330
 80082c4:	20000334 	.word	0x20000334

080082c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082cc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80082d0:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d039      	beq.n	800834a <f_open+0x82>
	fp->fs = 0;			/* Clear file object */
 80082d6:	2300      	movs	r3, #0
 80082d8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80082dc:	4616      	mov	r6, r2
 80082de:	4604      	mov	r4, r0
 80082e0:	f002 021e 	and.w	r2, r2, #30
 80082e4:	a901      	add	r1, sp, #4
 80082e6:	a886      	add	r0, sp, #536	; 0x218
 80082e8:	f7ff fa04 	bl	80076f4 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80082ec:	4605      	mov	r5, r0
 80082ee:	b120      	cbz	r0, 80082fa <f_open+0x32>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80082f0:	4628      	mov	r0, r5
 80082f2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80082f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_BUF(dj);
 80082fa:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80082fc:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 80082fe:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8008300:	a806      	add	r0, sp, #24
 8008302:	f7ff fdf3 	bl	8007eec <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008306:	f006 081f 	and.w	r8, r6, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 800830a:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800830c:	b9c0      	cbnz	r0, 8008340 <f_open+0x78>
		dir = dj.dir;
 800830e:	9f8b      	ldr	r7, [sp, #556]	; 0x22c
			if (!dir)	/* Default directory itself */
 8008310:	2f00      	cmp	r7, #0
 8008312:	d079      	beq.n	8008408 <f_open+0x140>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008314:	f018 0f1e 	tst.w	r8, #30
 8008318:	bf14      	ite	ne
 800831a:	2101      	movne	r1, #1
 800831c:	2100      	moveq	r1, #0
 800831e:	a806      	add	r0, sp, #24
 8008320:	f7ff f810 	bl	8007344 <chk_lock>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008324:	f016 0f1c 	tst.w	r6, #28
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008328:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800832a:	d014      	beq.n	8008356 <f_open+0x8e>
			if (res != FR_OK) {					/* No file, create new */
 800832c:	2800      	cmp	r0, #0
 800832e:	d158      	bne.n	80083e2 <f_open+0x11a>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	f013 0f11 	tst.w	r3, #17
 8008336:	d15d      	bne.n	80083f4 <f_open+0x12c>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008338:	0773      	lsls	r3, r6, #29
 800833a:	d561      	bpl.n	8008400 <f_open+0x138>
						res = FR_EXIST;
 800833c:	2508      	movs	r5, #8
 800833e:	e7d7      	b.n	80082f0 <f_open+0x28>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008340:	f016 0f1c 	tst.w	r6, #28
 8008344:	d14d      	bne.n	80083e2 <f_open+0x11a>
 8008346:	4605      	mov	r5, r0
 8008348:	e7d2      	b.n	80082f0 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 800834a:	2509      	movs	r5, #9
}
 800834c:	4628      	mov	r0, r5
 800834e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8008352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res == FR_OK) {					/* Follow succeeded */
 8008356:	2800      	cmp	r0, #0
 8008358:	d1f5      	bne.n	8008346 <f_open+0x7e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800835a:	7afb      	ldrb	r3, [r7, #11]
 800835c:	06d8      	lsls	r0, r3, #27
 800835e:	d44b      	bmi.n	80083f8 <f_open+0x130>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008360:	07b2      	lsls	r2, r6, #30
 8008362:	d501      	bpl.n	8008368 <f_open+0xa0>
 8008364:	07db      	lsls	r3, r3, #31
 8008366:	d445      	bmi.n	80083f4 <f_open+0x12c>
 8008368:	9886      	ldr	r0, [sp, #536]	; 0x218
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800836a:	f018 0f08 	tst.w	r8, #8
 800836e:	f000 80a1 	beq.w	80084b4 <f_open+0x1ec>
				mode |= FA__WRITTEN;
 8008372:	f048 0820 	orr.w	r8, r8, #32
 8008376:	2101      	movs	r1, #1
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008378:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800837c:	a806      	add	r0, sp, #24
			fp->dir_ptr = dir;
 800837e:	e9c4 3787 	strd	r3, r7, [r4, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008382:	f7ff f827 	bl	80073d4 <inc_lock>
 8008386:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800838a:	b3b8      	cbz	r0, 80083fc <f_open+0x134>
			fp->err = 0;						/* Clear error flag */
 800838c:	2300      	movs	r3, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800838e:	9a86      	ldr	r2, [sp, #536]	; 0x218
			fp->flag = mode;					/* File access mode */
 8008390:	f884 8206 	strb.w	r8, [r4, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8008394:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
	if (fs->fs_type == FS_FAT32)
 8008398:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 800839c:	7ef8      	ldrb	r0, [r7, #27]
 800839e:	7ebb      	ldrb	r3, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 80083a0:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80083a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 80083a6:	d105      	bne.n	80083b4 <f_open+0xec>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80083a8:	7d78      	ldrb	r0, [r7, #21]
 80083aa:	7d39      	ldrb	r1, [r7, #20]
 80083ac:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80083b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80083b4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80083b8:	69fb      	ldr	r3, [r7, #28]
			fp->id = fp->fs->id;
 80083ba:	f8b2 1206 	ldrh.w	r1, [r2, #518]	; 0x206
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80083be:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
}
 80083c2:	4628      	mov	r0, r5
			fp->fptr = 0;						/* File pointer */
 80083c4:	2300      	movs	r3, #0
			fp->fs = dj.fs;	 					/* Validate file object */
 80083c6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			fp->id = fp->fs->id;
 80083ca:	f8a4 1204 	strh.w	r1, [r4, #516]	; 0x204
			fp->fptr = 0;						/* File pointer */
 80083ce:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
			fp->dsect = 0;
 80083d2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 80083d6:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
}
 80083da:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80083de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d164      	bne.n	80084b0 <f_open+0x1e8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083e6:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <f_open+0x1f8>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	b17a      	cbz	r2, 800840c <f_open+0x144>
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	b16b      	cbz	r3, 800840c <f_open+0x144>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083f0:	2512      	movs	r5, #18
 80083f2:	e77d      	b.n	80082f0 <f_open+0x28>
					res = FR_DENIED;
 80083f4:	2507      	movs	r5, #7
 80083f6:	e77b      	b.n	80082f0 <f_open+0x28>
					res = FR_NO_FILE;
 80083f8:	2504      	movs	r5, #4
 80083fa:	e779      	b.n	80082f0 <f_open+0x28>
		res = FR_INT_ERR;
 80083fc:	2502      	movs	r5, #2
 80083fe:	e777      	b.n	80082f0 <f_open+0x28>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008400:	0736      	lsls	r6, r6, #28
 8008402:	d40b      	bmi.n	800841c <f_open+0x154>
 8008404:	9886      	ldr	r0, [sp, #536]	; 0x218
 8008406:	e7b7      	b.n	8008378 <f_open+0xb0>
				res = FR_INVALID_NAME;
 8008408:	2506      	movs	r5, #6
 800840a:	e771      	b.n	80082f0 <f_open+0x28>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800840c:	a806      	add	r0, sp, #24
 800840e:	f7ff fed1 	bl	80081b4 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008412:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8008416:	9f8b      	ldr	r7, [sp, #556]	; 0x22c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008418:	2800      	cmp	r0, #0
 800841a:	d194      	bne.n	8008346 <f_open+0x7e>
				dw = GET_FATTIME();				/* Created time */
 800841c:	f7fe ff42 	bl	80072a4 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008420:	2300      	movs	r3, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008422:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8008426:	0c01      	lsrs	r1, r0, #16
 8008428:	0e02      	lsrs	r2, r0, #24
 800842a:	73fe      	strb	r6, [r7, #15]
 800842c:	7439      	strb	r1, [r7, #16]
 800842e:	73b8      	strb	r0, [r7, #14]
 8008430:	747a      	strb	r2, [r7, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008432:	72fb      	strb	r3, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008434:	773b      	strb	r3, [r7, #28]
 8008436:	777b      	strb	r3, [r7, #29]
 8008438:	77bb      	strb	r3, [r7, #30]
 800843a:	77fb      	strb	r3, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800843c:	9b86      	ldr	r3, [sp, #536]	; 0x218
	cl = LD_WORD(dir + DIR_FstClusLO);
 800843e:	7ef9      	ldrb	r1, [r7, #27]
	if (fs->fs_type == FS_FAT32)
 8008440:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008444:	7ebe      	ldrb	r6, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8008446:	2b03      	cmp	r3, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008448:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 800844c:	d105      	bne.n	800845a <f_open+0x192>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800844e:	7d7a      	ldrb	r2, [r7, #21]
 8008450:	7d3b      	ldrb	r3, [r7, #20]
 8008452:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008456:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 800845a:	2300      	movs	r3, #0
 800845c:	76bb      	strb	r3, [r7, #26]
 800845e:	76fb      	strb	r3, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008460:	753b      	strb	r3, [r7, #20]
 8008462:	757b      	strb	r3, [r7, #21]
				dj.fs->wflag = 1;
 8008464:	9886      	ldr	r0, [sp, #536]	; 0x218
 8008466:	2301      	movs	r3, #1
 8008468:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800846c:	2e00      	cmp	r6, #0
 800846e:	f43f af7c 	beq.w	800836a <f_open+0xa2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008472:	429e      	cmp	r6, r3
 8008474:	d0c2      	beq.n	80083fc <f_open+0x134>
 8008476:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800847a:	429e      	cmp	r6, r3
 800847c:	d2be      	bcs.n	80083fc <f_open+0x134>
 800847e:	4631      	mov	r1, r6
					dw = dj.fs->winsect;
 8008480:	f8d0 922c 	ldr.w	r9, [r0, #556]	; 0x22c
 8008484:	f7ff fe2e 	bl	80080e4 <remove_chain.part.0>
					if (res == FR_OK) {
 8008488:	2800      	cmp	r0, #0
 800848a:	f47f af5c 	bne.w	8008346 <f_open+0x7e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800848e:	9886      	ldr	r0, [sp, #536]	; 0x218
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008490:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008494:	3e01      	subs	r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008496:	4599      	cmp	r9, r3
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008498:	f8c0 620c 	str.w	r6, [r0, #524]	; 0x20c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800849c:	f43f af65 	beq.w	800836a <f_open+0xa2>
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7ff f8dd 	bl	8007660 <move_window.part.0>
		if (res == FR_OK) {
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f af5e 	beq.w	8008368 <f_open+0xa0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084ac:	4605      	mov	r5, r0
 80084ae:	e71f      	b.n	80082f0 <f_open+0x28>
 80084b0:	461d      	mov	r5, r3
 80084b2:	e71d      	b.n	80082f0 <f_open+0x28>
 80084b4:	f018 0ffe 	tst.w	r8, #254	; 0xfe
 80084b8:	bf14      	ite	ne
 80084ba:	2101      	movne	r1, #1
 80084bc:	2100      	moveq	r1, #0
 80084be:	e75b      	b.n	8008378 <f_open+0xb0>
 80084c0:	20000334 	.word	0x20000334

080084c4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	461f      	mov	r7, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80084ca:	2300      	movs	r3, #0
{
 80084cc:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 80084ce:	603b      	str	r3, [r7, #0]
{
 80084d0:	4688      	mov	r8, r1
 80084d2:	4691      	mov	r9, r2
 80084d4:	4605      	mov	r5, r0

	res = validate(fp);							/* Check validity */
 80084d6:	f7fe ffff 	bl	80074d8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80084da:	4606      	mov	r6, r0
 80084dc:	2800      	cmp	r0, #0
 80084de:	d17b      	bne.n	80085d8 <f_read+0x114>
	if (fp->err)								/* Check error */
 80084e0:	f895 6207 	ldrb.w	r6, [r5, #519]	; 0x207
 80084e4:	2e00      	cmp	r6, #0
 80084e6:	d177      	bne.n	80085d8 <f_read+0x114>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80084e8:	f895 a206 	ldrb.w	sl, [r5, #518]	; 0x206
 80084ec:	f01a 0a01 	ands.w	sl, sl, #1
 80084f0:	f000 80c8 	beq.w	8008684 <f_read+0x1c0>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 80084f4:	e9d5 1382 	ldrd	r1, r3, [r5, #520]	; 0x208
 80084f8:	1a5b      	subs	r3, r3, r1
 80084fa:	4599      	cmp	r9, r3
 80084fc:	bf28      	it	cs
 80084fe:	4699      	movcs	r9, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	d068      	beq.n	80085d8 <f_read+0x114>
 8008506:	f505 7b00 	add.w	fp, r5, #512	; 0x200
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800850a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800850e:	2b00      	cmp	r3, #0
 8008510:	d147      	bne.n	80085a2 <f_read+0xde>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008512:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8008516:	f890 4202 	ldrb.w	r4, [r0, #514]	; 0x202
 800851a:	1e62      	subs	r2, r4, #1
 800851c:	ea02 2251 	and.w	r2, r2, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8008520:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008524:	ea4f 2351 	mov.w	r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8008528:	d05a      	beq.n	80085e0 <f_read+0x11c>
 800852a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800852e:	f8d0 1214 	ldr.w	r1, [r0, #532]	; 0x214
	clst -= 2;
 8008532:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008534:	3902      	subs	r1, #2
 8008536:	428b      	cmp	r3, r1
 8008538:	d264      	bcs.n	8008604 <f_read+0x140>
	return clst * fs->csize + fs->database;
 800853a:	f890 1202 	ldrb.w	r1, [r0, #514]	; 0x202
 800853e:	f8d0 4228 	ldr.w	r4, [r0, #552]	; 0x228
 8008542:	fb01 4403 	mla	r4, r1, r3, r4
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008546:	2c00      	cmp	r4, #0
 8008548:	d05c      	beq.n	8008604 <f_read+0x140>
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
 800854a:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
			sect += csect;
 800854e:	4414      	add	r4, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008550:	d25f      	bcs.n	8008612 <f_read+0x14e>
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008552:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8008556:	4294      	cmp	r4, r2
 8008558:	d01d      	beq.n	8008596 <f_read+0xd2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800855a:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 800855e:	065b      	lsls	r3, r3, #25
 8008560:	d510      	bpl.n	8008584 <f_read+0xc0>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008562:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008566:	2301      	movs	r3, #1
 8008568:	4629      	mov	r1, r5
 800856a:	f7fe fecf 	bl	800730c <disk_write>
 800856e:	2800      	cmp	r0, #0
 8008570:	f040 808a 	bne.w	8008688 <f_read+0x1c4>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
 8008574:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 8008578:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800857c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008580:	f885 3206 	strb.w	r3, [r5, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008584:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008588:	2301      	movs	r3, #1
 800858a:	4622      	mov	r2, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7fe feaf 	bl	80072f0 <disk_read>
 8008592:	2800      	cmp	r0, #0
 8008594:	d178      	bne.n	8008688 <f_read+0x1c4>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8008596:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800859a:	f8c5 4218 	str.w	r4, [r5, #536]	; 0x218
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80085a2:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 80085a6:	4548      	cmp	r0, r9
 80085a8:	bf28      	it	cs
 80085aa:	4648      	movcs	r0, r9
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80085ac:	442b      	add	r3, r5
	while (cnt--)
 80085ae:	181c      	adds	r4, r3, r0
 80085b0:	f108 32ff 	add.w	r2, r8, #4294967295
		*d++ = *s++;
 80085b4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80085b8:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d1f9      	bne.n	80085b4 <f_read+0xf0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085c0:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	4401      	add	r1, r0
 80085c8:	4403      	add	r3, r0
	for ( ;  btr;								/* Repeat until all data read */
 80085ca:	ebb9 0900 	subs.w	r9, r9, r0
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085ce:	f8c5 1208 	str.w	r1, [r5, #520]	; 0x208
 80085d2:	4480      	add	r8, r0
 80085d4:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80085d6:	d198      	bne.n	800850a <f_read+0x46>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80085d8:	4630      	mov	r0, r6
 80085da:	b003      	add	sp, #12
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->fptr == 0) {			/* On the top of the file? */
 80085e0:	2900      	cmp	r1, #0
 80085e2:	d13c      	bne.n	800865e <f_read+0x19a>
					clst = fp->sclust;			/* Follow from the origin */
 80085e4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d90b      	bls.n	8008604 <f_read+0x140>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80085ec:	1c59      	adds	r1, r3, #1
 80085ee:	d04b      	beq.n	8008688 <f_read+0x1c4>
				fp->clust = clst;				/* Update current cluster */
 80085f0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 80085f4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085f8:	f8d0 1214 	ldr.w	r1, [r0, #532]	; 0x214
	clst -= 2;
 80085fc:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085fe:	3902      	subs	r1, #2
 8008600:	428b      	cmp	r3, r1
 8008602:	d39a      	bcc.n	800853a <f_read+0x76>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008604:	2602      	movs	r6, #2
}
 8008606:	4630      	mov	r0, r6
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008608:	f885 6207 	strb.w	r6, [r5, #519]	; 0x207
}
 800860c:	b003      	add	sp, #12
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008612:	eb02 2c59 	add.w	ip, r2, r9, lsr #9
 8008616:	4561      	cmp	r1, ip
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8008618:	ea4f 2359 	mov.w	r3, r9, lsr #9
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800861c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
					cc = fp->fs->csize - csect;
 8008620:	bf38      	it	cc
 8008622:	1a8b      	subcc	r3, r1, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8008624:	4622      	mov	r2, r4
 8008626:	4641      	mov	r1, r8
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	f7fe fe61 	bl	80072f0 <disk_read>
 800862e:	bb58      	cbnz	r0, 8008688 <f_read+0x1c4>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008630:	f895 2206 	ldrb.w	r2, [r5, #518]	; 0x206
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	f012 0f40 	tst.w	r2, #64	; 0x40
 800863a:	d00e      	beq.n	800865a <f_read+0x196>
 800863c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8008640:	1b14      	subs	r4, r2, r4
 8008642:	42a3      	cmp	r3, r4
 8008644:	d909      	bls.n	800865a <f_read+0x196>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008646:	eb08 2444 	add.w	r4, r8, r4, lsl #9
 800864a:	1e62      	subs	r2, r4, #1
 800864c:	4629      	mov	r1, r5
		*d++ = *s++;
 800864e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008652:	f802 0f01 	strb.w	r0, [r2, #1]!
	while (cnt--)
 8008656:	4559      	cmp	r1, fp
 8008658:	d1f9      	bne.n	800864e <f_read+0x18a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800865a:	0258      	lsls	r0, r3, #9
				continue;
 800865c:	e7b0      	b.n	80085c0 <f_read+0xfc>
					if (fp->cltbl)
 800865e:	f8d5 c224 	ldr.w	ip, [r5, #548]	; 0x224
 8008662:	f1bc 0f00 	cmp.w	ip, #0
 8008666:	d114      	bne.n	8008692 <f_read+0x1ce>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008668:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800866c:	9201      	str	r2, [sp, #4]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800866e:	2901      	cmp	r1, #1
 8008670:	d9c8      	bls.n	8008604 <f_read+0x140>
 8008672:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008676:	4299      	cmp	r1, r3
 8008678:	d2c4      	bcs.n	8008604 <f_read+0x140>
 800867a:	f7ff f9ab 	bl	80079d4 <get_fat.part.0>
 800867e:	9a01      	ldr	r2, [sp, #4]
 8008680:	4603      	mov	r3, r0
	return val;
 8008682:	e7b1      	b.n	80085e8 <f_read+0x124>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008684:	2607      	movs	r6, #7
 8008686:	e7a7      	b.n	80085d8 <f_read+0x114>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008688:	2301      	movs	r3, #1
 800868a:	4656      	mov	r6, sl
 800868c:	f885 3207 	strb.w	r3, [r5, #519]	; 0x207
 8008690:	e7a2      	b.n	80085d8 <f_read+0x114>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008692:	f8dc 1004 	ldr.w	r1, [ip, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008696:	fbb3 f3f4 	udiv	r3, r3, r4
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800869a:	f10c 0004 	add.w	r0, ip, #4
		if (!ncl) return 0;		/* End of table? (error) */
 800869e:	b929      	cbnz	r1, 80086ac <f_read+0x1e8>
 80086a0:	e7b0      	b.n	8008604 <f_read+0x140>
		cl -= ncl; tbl++;		/* Next fragment */
 80086a2:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086a4:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d0ab      	beq.n	8008604 <f_read+0x140>
		if (cl < ncl) break;	/* In this fragment? */
 80086ac:	428b      	cmp	r3, r1
 80086ae:	d2f8      	bcs.n	80086a2 <f_read+0x1de>
	return cl + *tbl;	/* Return the cluster number */
 80086b0:	6841      	ldr	r1, [r0, #4]
 80086b2:	440b      	add	r3, r1
 80086b4:	e798      	b.n	80085e8 <f_read+0x124>
 80086b6:	bf00      	nop

080086b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80086bc:	f7fe ff0c 	bl	80074d8 <validate>
	if (res == FR_OK) {
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d14b      	bne.n	800875c <f_sync+0xa4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80086c4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80086c8:	f013 0020 	ands.w	r0, r3, #32
 80086cc:	d046      	beq.n	800875c <f_sync+0xa4>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80086ce:	065b      	lsls	r3, r3, #25
 80086d0:	d445      	bmi.n	800875e <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80086d2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80086d6:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80086da:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80086de:	4299      	cmp	r1, r3
 80086e0:	d002      	beq.n	80086e8 <f_sync+0x30>
 80086e2:	f7fe ffbd 	bl	8007660 <move_window.part.0>
			if (res == FR_OK) {
 80086e6:	bbc8      	cbnz	r0, 800875c <f_sync+0xa4>
				dir = fp->dir_ptr;
 80086e8:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80086ec:	7aeb      	ldrb	r3, [r5, #11]
 80086ee:	f043 0320 	orr.w	r3, r3, #32
 80086f2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80086f4:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80086f8:	772b      	strb	r3, [r5, #28]
 80086fa:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	776b      	strb	r3, [r5, #29]
 8008702:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8008706:	77ab      	strb	r3, [r5, #30]
 8008708:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800870c:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800870e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008712:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008714:	0c1a      	lsrs	r2, r3, #16
 8008716:	0a11      	lsrs	r1, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008718:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800871c:	76eb      	strb	r3, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800871e:	752a      	strb	r2, [r5, #20]
 8008720:	7569      	strb	r1, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8008722:	f7fe fdbf 	bl	80072a4 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008726:	2300      	movs	r3, #0
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008728:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800872c:	0e02      	lsrs	r2, r0, #24
 800872e:	0c01      	lsrs	r1, r0, #16
 8008730:	766a      	strb	r2, [r5, #25]
 8008732:	75a8      	strb	r0, [r5, #22]
 8008734:	75ee      	strb	r6, [r5, #23]
 8008736:	7629      	strb	r1, [r5, #24]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008738:	74ab      	strb	r3, [r5, #18]
 800873a:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800873c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8008740:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8008744:	f023 0320 	bic.w	r3, r3, #32
				fp->fs->wflag = 1;
 8008748:	2201      	movs	r2, #1
				fp->flag &= ~FA__WRITTEN;
 800874a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800874e:	f880 2204 	strb.w	r2, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8008752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8008756:	f7fe bf3b 	b.w	80075d0 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800875a:	2001      	movs	r0, #1
}
 800875c:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800875e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8008762:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8008766:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800876a:	4621      	mov	r1, r4
 800876c:	2301      	movs	r3, #1
 800876e:	f7fe fdcd 	bl	800730c <disk_write>
 8008772:	2800      	cmp	r0, #0
 8008774:	d1f1      	bne.n	800875a <f_sync+0xa2>
				fp->flag &= ~FA__DIRTY;
 8008776:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800877a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8008782:	e7a6      	b.n	80086d2 <f_sync+0x1a>

08008784 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008788:	f7ff ff96 	bl	80086b8 <f_sync>
	if (res == FR_OK)
 800878c:	b100      	cbz	r0, 8008790 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800878e:	bd70      	pop	{r4, r5, r6, pc}
		res = validate(fp);				/* Lock volume */
 8008790:	4620      	mov	r0, r4
 8008792:	f7fe fea1 	bl	80074d8 <validate>
		if (res == FR_OK) {
 8008796:	2800      	cmp	r0, #0
 8008798:	d1f9      	bne.n	800878e <f_close+0xa>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800879a:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d812      	bhi.n	80087ca <f_close+0x46>
		n = Files[i].ctr;
 80087a4:	4e0e      	ldr	r6, [pc, #56]	; (80087e0 <f_close+0x5c>)
 80087a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80087aa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80087ae:	005d      	lsls	r5, r3, #1
 80087b0:	8951      	ldrh	r1, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80087b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80087b6:	d010      	beq.n	80087da <f_close+0x56>
		if (n) n--;					/* Decrement read mode open count */
 80087b8:	b949      	cbnz	r1, 80087ce <f_close+0x4a>
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80087ba:	442b      	add	r3, r5
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	2200      	movs	r2, #0
 80087c0:	50f2      	str	r2, [r6, r3]
				fp->fs = 0;				/* Invalidate file object */
 80087c2:	2300      	movs	r3, #0
 80087c4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 80087ca:	2002      	movs	r0, #2
}
 80087cc:	bd70      	pop	{r4, r5, r6, pc}
		if (n) n--;					/* Decrement read mode open count */
 80087ce:	3901      	subs	r1, #1
 80087d0:	b289      	uxth	r1, r1
		Files[i].ctr = n;
 80087d2:	8151      	strh	r1, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d1f4      	bne.n	80087c2 <f_close+0x3e>
 80087d8:	e7ef      	b.n	80087ba <f_close+0x36>
		Files[i].ctr = n;
 80087da:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80087dc:	e7ed      	b.n	80087ba <f_close+0x36>
 80087de:	bf00      	nop
 80087e0:	20000334 	.word	0x20000334

080087e4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80087e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460e      	mov	r6, r1
 80087ea:	4604      	mov	r4, r0
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80087ec:	f7fe fe74 	bl	80074d8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80087f0:	4605      	mov	r5, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f040 808d 	bne.w	8008912 <f_lseek+0x12e>
	if (fp->err)						/* Check error */
 80087f8:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	f040 8088 	bne.w	8008912 <f_lseek+0x12e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008802:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8008806:	b32a      	cbz	r2, 8008854 <f_lseek+0x70>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008808:	1c71      	adds	r1, r6, #1
 800880a:	f000 8085 	beq.w	8008918 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800880e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8008812:	428e      	cmp	r6, r1
 8008814:	bf28      	it	cs
 8008816:	460e      	movcs	r6, r1
				ofs = fp->fsize;
			fp->fptr = ofs;				/* Set file pointer */
 8008818:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
			if (ofs) {
 800881c:	2e00      	cmp	r6, #0
 800881e:	d078      	beq.n	8008912 <f_lseek+0x12e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008820:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008824:	6853      	ldr	r3, [r2, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008826:	f897 1202 	ldrb.w	r1, [r7, #514]	; 0x202
				fp->clust = clmt_clust(fp, ofs - 1);
 800882a:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800882e:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008832:	3204      	adds	r2, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008834:	fbbc f0f1 	udiv	r0, ip, r1
		if (!ncl) return 0;		/* End of table? (error) */
 8008838:	b933      	cbnz	r3, 8008848 <f_lseek+0x64>
 800883a:	e0b0      	b.n	800899e <f_lseek+0x1ba>
		cl -= ncl; tbl++;		/* Next fragment */
 800883c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800883e:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 80ab 	beq.w	800899e <f_lseek+0x1ba>
		if (cl < ncl) break;	/* In this fragment? */
 8008848:	4298      	cmp	r0, r3
 800884a:	d2f7      	bcs.n	800883c <f_lseek+0x58>
	return cl + *tbl;	/* Return the cluster number */
 800884c:	6853      	ldr	r3, [r2, #4]
 800884e:	4403      	add	r3, r0
 8008850:	1e9a      	subs	r2, r3, #2
 8008852:	e0a6      	b.n	80089a2 <f_lseek+0x1be>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008854:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8008858:	42b3      	cmp	r3, r6
 800885a:	d205      	bcs.n	8008868 <f_lseek+0x84>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800885c:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8008860:	f012 0f02 	tst.w	r2, #2
 8008864:	bf08      	it	eq
 8008866:	461e      	moveq	r6, r3
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8008868:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800886a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800886e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8008872:	2e00      	cmp	r6, #0
 8008874:	d04d      	beq.n	8008912 <f_lseek+0x12e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008876:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800887a:	f890 8202 	ldrb.w	r8, [r0, #514]	; 0x202
 800887e:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 80c5 	bne.w	8008a12 <f_lseek+0x22e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008888:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800888c:	2f00      	cmp	r7, #0
 800888e:	f000 8127 	beq.w	8008ae0 <f_lseek+0x2fc>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
 8008892:	f8c4 7214 	str.w	r7, [r4, #532]	; 0x214
			}
			if (clst != 0) {
 8008896:	2f00      	cmp	r7, #0
 8008898:	f040 80d3 	bne.w	8008a42 <f_lseek+0x25e>
 800889c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80088a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	f000 8118 	beq.w	8008ada <f_lseek+0x2f6>
 80088aa:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80088ae:	42ba      	cmp	r2, r7
 80088b0:	f000 8113 	beq.w	8008ada <f_lseek+0x2f6>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80088b4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80088b8:	065b      	lsls	r3, r3, #25
 80088ba:	d510      	bpl.n	80088de <f_lseek+0xfa>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80088bc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80088c0:	4621      	mov	r1, r4
 80088c2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80088c6:	2301      	movs	r3, #1
 80088c8:	f7fe fd20 	bl	800730c <disk_write>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f040 80b4 	bne.w	8008a3a <f_lseek+0x256>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80088d2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80088d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088da:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80088de:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80088e2:	2301      	movs	r3, #1
 80088e4:	f892 0201 	ldrb.w	r0, [r2, #513]	; 0x201
 80088e8:	4621      	mov	r1, r4
 80088ea:	463a      	mov	r2, r7
 80088ec:	f7fe fd00 	bl	80072f0 <disk_read>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f040 80a2 	bne.w	8008a3a <f_lseek+0x256>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 80088f6:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	; 0x208
 80088fa:	f8c4 7218 	str.w	r7, [r4, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80088fe:	429a      	cmp	r2, r3
 8008900:	d207      	bcs.n	8008912 <f_lseek+0x12e>
			fp->fsize = fp->fptr;
			fp->flag |= FA__WRITTEN;
 8008902:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
			fp->fsize = fp->fptr;
 8008906:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800890a:	f042 0320 	orr.w	r3, r2, #32
 800890e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8008912:	4628      	mov	r0, r5
 8008914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008918:	4616      	mov	r6, r2
			cl = fp->sclust;			/* Top of the chain */
 800891a:	f8d4 8210 	ldr.w	r8, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800891e:	f856 ab04 	ldr.w	sl, [r6], #4
 8008922:	f04f 0902 	mov.w	r9, #2
			if (cl) {
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	d031      	beq.n	8008990 <f_lseek+0x1ac>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800892c:	4647      	mov	r7, r8
 800892e:	f04f 0b00 	mov.w	fp, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008932:	2f01      	cmp	r7, #1
 8008934:	d924      	bls.n	8008980 <f_lseek+0x19c>
						cl = get_fat(fp->fs, cl);
 8008936:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800893a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800893e:	429f      	cmp	r7, r3
 8008940:	4639      	mov	r1, r7
						pcl = cl; ncl++;
 8008942:	f10b 0b01 	add.w	fp, fp, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008946:	d21b      	bcs.n	8008980 <f_lseek+0x19c>
 8008948:	f7ff f844 	bl	80079d4 <get_fat.part.0>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800894c:	2801      	cmp	r0, #1
					} while (cl == pcl + 1);
 800894e:	f107 0701 	add.w	r7, r7, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008952:	d915      	bls.n	8008980 <f_lseek+0x19c>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d070      	beq.n	8008a3a <f_lseek+0x256>
					} while (cl == pcl + 1);
 8008958:	4287      	cmp	r7, r0
 800895a:	d0ea      	beq.n	8008932 <f_lseek+0x14e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800895c:	f109 0902 	add.w	r9, r9, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008960:	45ca      	cmp	sl, r9
 8008962:	d305      	bcc.n	8008970 <f_lseek+0x18c>
						*tbl++ = ncl; *tbl++ = tcl;
 8008964:	4633      	mov	r3, r6
 8008966:	f843 bb08 	str.w	fp, [r3], #8
 800896a:	f8c6 8004 	str.w	r8, [r6, #4]
 800896e:	461e      	mov	r6, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008970:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8008974:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008978:	4283      	cmp	r3, r0
 800897a:	d907      	bls.n	800898c <f_lseek+0x1a8>
 800897c:	4680      	mov	r8, r0
 800897e:	e7d5      	b.n	800892c <f_lseek+0x148>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008980:	2502      	movs	r5, #2
 8008982:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
}
 8008986:	4628      	mov	r0, r5
 8008988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
			*fp->cltbl = ulen;	/* Number of items used */
 8008990:	f8c2 9000 	str.w	r9, [r2]
			if (ulen <= tlen)
 8008994:	45d1      	cmp	r9, sl
 8008996:	d84e      	bhi.n	8008a36 <f_lseek+0x252>
				*tbl = 0;		/* Terminate table */
 8008998:	2300      	movs	r3, #0
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	e7b9      	b.n	8008912 <f_lseek+0x12e>
 800899e:	f06f 0201 	mvn.w	r2, #1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089a2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
				fp->clust = clmt_clust(fp, ofs - 1);
 80089a6:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089aa:	1e83      	subs	r3, r0, #2
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d9e7      	bls.n	8008980 <f_lseek+0x19c>
	return clst * fs->csize + fs->database;
 80089b0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80089b4:	fb02 3301 	mla	r3, r2, r1, r3
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0e1      	beq.n	8008980 <f_lseek+0x19c>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80089bc:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80089c0:	2e00      	cmp	r6, #0
 80089c2:	d0a6      	beq.n	8008912 <f_lseek+0x12e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80089c4:	1e4e      	subs	r6, r1, #1
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80089c6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80089ca:	ea06 060c 	and.w	r6, r6, ip
 80089ce:	441e      	add	r6, r3
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80089d0:	42b2      	cmp	r2, r6
 80089d2:	d09e      	beq.n	8008912 <f_lseek+0x12e>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80089d4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80089d8:	065d      	lsls	r5, r3, #25
 80089da:	d50e      	bpl.n	80089fa <f_lseek+0x216>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80089dc:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 80089e0:	2301      	movs	r3, #1
 80089e2:	4621      	mov	r1, r4
 80089e4:	f7fe fc92 	bl	800730c <disk_write>
 80089e8:	bb38      	cbnz	r0, 8008a3a <f_lseek+0x256>
						fp->flag &= ~FA__DIRTY;
 80089ea:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80089ee:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
 80089f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80089fa:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 80089fe:	2301      	movs	r3, #1
 8008a00:	4632      	mov	r2, r6
 8008a02:	4621      	mov	r1, r4
 8008a04:	f7fe fc74 	bl	80072f0 <disk_read>
 8008a08:	4605      	mov	r5, r0
 8008a0a:	b9b0      	cbnz	r0, 8008a3a <f_lseek+0x256>
					fp->dsect = dsc;
 8008a0c:	f8c4 6218 	str.w	r6, [r4, #536]	; 0x218
 8008a10:	e77f      	b.n	8008912 <f_lseek+0x12e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008a12:	3b01      	subs	r3, #1
 8008a14:	1e72      	subs	r2, r6, #1
 8008a16:	fbb3 f1f8 	udiv	r1, r3, r8
 8008a1a:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 8008a1e:	428a      	cmp	r2, r1
 8008a20:	f4ff af32 	bcc.w	8008888 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008a24:	f1c8 0200 	rsb	r2, r8, #0
 8008a28:	4013      	ands	r3, r2
				clst = fp->clust;
 8008a2a:	f8d4 7214 	ldr.w	r7, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008a2e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 8008a32:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
 8008a34:	e72f      	b.n	8008896 <f_lseek+0xb2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008a36:	2511      	movs	r5, #17
 8008a38:	e76b      	b.n	8008912 <f_lseek+0x12e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008a3a:	2501      	movs	r5, #1
 8008a3c:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
 8008a40:	e767      	b.n	8008912 <f_lseek+0x12e>
				while (ofs > bcs) {						/* Cluster following loop */
 8008a42:	4546      	cmp	r6, r8
 8008a44:	d95a      	bls.n	8008afc <f_lseek+0x318>
 8008a46:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008a4a:	e01c      	b.n	8008a86 <f_lseek+0x2a2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008a4c:	2f01      	cmp	r7, #1
 8008a4e:	d997      	bls.n	8008980 <f_lseek+0x19c>
 8008a50:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008a54:	429f      	cmp	r7, r3
 8008a56:	d293      	bcs.n	8008980 <f_lseek+0x19c>
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7fe ffbb 	bl	80079d4 <get_fat.part.0>
 8008a5e:	4607      	mov	r7, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008a60:	1c7a      	adds	r2, r7, #1
 8008a62:	d0ea      	beq.n	8008a3a <f_lseek+0x256>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008a64:	2f01      	cmp	r7, #1
 8008a66:	d98b      	bls.n	8008980 <f_lseek+0x19c>
 8008a68:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008a6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008a70:	42bb      	cmp	r3, r7
 8008a72:	d985      	bls.n	8008980 <f_lseek+0x19c>
					fp->fptr += bcs;
 8008a74:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8008a78:	f8c4 7214 	str.w	r7, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8008a7c:	4443      	add	r3, r8
				while (ofs > bcs) {						/* Cluster following loop */
 8008a7e:	45b0      	cmp	r8, r6
					fp->fptr += bcs;
 8008a80:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				while (ofs > bcs) {						/* Cluster following loop */
 8008a84:	d20e      	bcs.n	8008aa4 <f_lseek+0x2c0>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008a86:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8008a8a:	0799      	lsls	r1, r3, #30
					ofs -= bcs;
 8008a8c:	eba6 0608 	sub.w	r6, r6, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008a90:	d5dc      	bpl.n	8008a4c <f_lseek+0x268>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7ff f908 	bl	8007ca8 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008a98:	4607      	mov	r7, r0
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1e0      	bne.n	8008a60 <f_lseek+0x27c>
 8008a9e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8008aa2:	4646      	mov	r6, r8
				fp->fptr += ofs;
 8008aa4:	4433      	add	r3, r6
				if (ofs % SS(fp->fs)) {
 8008aa6:	f3c6 0208 	ubfx	r2, r6, #0, #9
				fp->fptr += ofs;
 8008aaa:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8008aae:	b31a      	cbz	r2, 8008af8 <f_lseek+0x314>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008ab0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ab4:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
	clst -= 2;
 8008ab8:	1eb8      	subs	r0, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008aba:	3a02      	subs	r2, #2
 8008abc:	4290      	cmp	r0, r2
 8008abe:	f4bf af5f 	bcs.w	8008980 <f_lseek+0x19c>
	return clst * fs->csize + fs->database;
 8008ac2:	f891 7202 	ldrb.w	r7, [r1, #514]	; 0x202
 8008ac6:	f8d1 2228 	ldr.w	r2, [r1, #552]	; 0x228
 8008aca:	fb00 2707 	mla	r7, r0, r7, r2
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	f43f af56 	beq.w	8008980 <f_lseek+0x19c>
					nsect += ofs / SS(fp->fs);
 8008ad4:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 8008ad8:	e6e2      	b.n	80088a0 <f_lseek+0xbc>
 8008ada:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8008ade:	e70e      	b.n	80088fe <f_lseek+0x11a>
					clst = create_chain(fp->fs, 0);
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7ff f8e1 	bl	8007ca8 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008ae6:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8008ae8:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008aea:	f43f af49 	beq.w	8008980 <f_lseek+0x19c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008aee:	1c78      	adds	r0, r7, #1
 8008af0:	d0a3      	beq.n	8008a3a <f_lseek+0x256>
					fp->sclust = clst;
 8008af2:	f8c4 7210 	str.w	r7, [r4, #528]	; 0x210
 8008af6:	e6cc      	b.n	8008892 <f_lseek+0xae>
		fp->fptr = nsect = 0;
 8008af8:	4617      	mov	r7, r2
 8008afa:	e6d1      	b.n	80088a0 <f_lseek+0xbc>
 8008afc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8008b00:	e7d0      	b.n	8008aa4 <f_lseek+0x2c0>
 8008b02:	bf00      	nop

08008b04 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008b04:	b530      	push	{r4, r5, lr}
 8008b06:	b087      	sub	sp, #28
 8008b08:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d03e      	beq.n	8008b8c <f_opendir+0x88>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2200      	movs	r2, #0
 8008b12:	a901      	add	r1, sp, #4
 8008b14:	a802      	add	r0, sp, #8
 8008b16:	f7fe fded 	bl	80076f4 <find_volume>
	if (res == FR_OK) {
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b128      	cbz	r0, 8008b2a <f_opendir+0x26>
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

	LEAVE_FF(fs, res);
}
 8008b24:	4620      	mov	r0, r4
 8008b26:	b007      	add	sp, #28
 8008b28:	bd30      	pop	{r4, r5, pc}
		dp->fs = fs;
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 8008b30:	ab03      	add	r3, sp, #12
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008b32:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(*dp);
 8008b34:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f7ff f9d7 	bl	8007eec <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8008b3e:	4604      	mov	r4, r0
 8008b40:	bb00      	cbnz	r0, 8008b84 <f_opendir+0x80>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008b42:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8008b46:	b363      	cbz	r3, 8008ba2 <f_opendir+0x9e>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8008b48:	7ada      	ldrb	r2, [r3, #11]
 8008b4a:	06d2      	lsls	r2, r2, #27
 8008b4c:	d51c      	bpl.n	8008b88 <f_opendir+0x84>
					dp->sclust = ld_clust(fs, dp->dir);
 8008b4e:	9902      	ldr	r1, [sp, #8]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008b50:	7edc      	ldrb	r4, [r3, #27]
	if (fs->fs_type == FS_FAT32)
 8008b52:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008b56:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8008b58:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008b5a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	if (fs->fs_type == FS_FAT32)
 8008b5e:	d019      	beq.n	8008b94 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 8008b60:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
				dp->id = fs->id;
 8008b64:	f8b1 3206 	ldrh.w	r3, [r1, #518]	; 0x206
 8008b68:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7fe ff9a 	bl	8007aa8 <dir_sdi>
				if (res == FR_OK) {
 8008b74:	4604      	mov	r4, r0
 8008b76:	b928      	cbnz	r0, 8008b84 <f_opendir+0x80>
					if (dp->sclust) {
 8008b78:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8008b7c:	b99b      	cbnz	r3, 8008ba6 <f_opendir+0xa2>
						dp->lockid = 0;	/* Root directory need not to be locked */
 8008b7e:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8008b82:	e7cf      	b.n	8008b24 <f_opendir+0x20>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008b84:	2c04      	cmp	r4, #4
 8008b86:	d1ca      	bne.n	8008b1e <f_opendir+0x1a>
 8008b88:	2405      	movs	r4, #5
 8008b8a:	e7c8      	b.n	8008b1e <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 8008b8c:	2409      	movs	r4, #9
}
 8008b8e:	4620      	mov	r0, r4
 8008b90:	b007      	add	sp, #28
 8008b92:	bd30      	pop	{r4, r5, pc}
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008b94:	7d58      	ldrb	r0, [r3, #21]
 8008b96:	7d1b      	ldrb	r3, [r3, #20]
 8008b98:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008b9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ba0:	e7de      	b.n	8008b60 <f_opendir+0x5c>
 8008ba2:	9902      	ldr	r1, [sp, #8]
 8008ba4:	e7de      	b.n	8008b64 <f_opendir+0x60>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f7fe fc13 	bl	80073d4 <inc_lock>
 8008bae:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d1b6      	bne.n	8008b24 <f_opendir+0x20>
							res = FR_TOO_MANY_OPEN_FILES;
 8008bb6:	2412      	movs	r4, #18
 8008bb8:	e7b1      	b.n	8008b1e <f_opendir+0x1a>
 8008bba:	bf00      	nop

08008bbc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4604      	mov	r4, r0
	FRESULT res;


	res = validate(dp);
 8008bc0:	f7fe fc8a 	bl	80074d8 <validate>
	if (res == FR_OK) {
 8008bc4:	b9b8      	cbnz	r0, 8008bf6 <f_closedir+0x3a>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8008bc6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008bca:	b18b      	cbz	r3, 8008bf0 <f_closedir+0x34>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d812      	bhi.n	8008bf8 <f_closedir+0x3c>
		n = Files[i].ctr;
 8008bd2:	4e0d      	ldr	r6, [pc, #52]	; (8008c08 <f_closedir+0x4c>)
 8008bd4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008bd8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008bdc:	005d      	lsls	r5, r3, #1
 8008bde:	8951      	ldrh	r1, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008be0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008be4:	d00a      	beq.n	8008bfc <f_closedir+0x40>
		if (n) n--;					/* Decrement read mode open count */
 8008be6:	b151      	cbz	r1, 8008bfe <f_closedir+0x42>
 8008be8:	3901      	subs	r1, #1
 8008bea:	b289      	uxth	r1, r1
		Files[i].ctr = n;
 8008bec:	8151      	strh	r1, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008bee:	b131      	cbz	r1, 8008bfe <f_closedir+0x42>
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008bf8:	2002      	movs	r0, #2
}
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8008bfc:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008bfe:	442b      	add	r3, r5
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	2200      	movs	r2, #0
 8008c04:	50f2      	str	r2, [r6, r3]
		if (res == FR_OK)
 8008c06:	e7f3      	b.n	8008bf0 <f_closedir+0x34>
 8008c08:	20000334 	.word	0x20000334

08008c0c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	460e      	mov	r6, r1
 8008c12:	4605      	mov	r5, r0
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8008c14:	f7fe fc60 	bl	80074d8 <validate>
	if (res == FR_OK) {
 8008c18:	4604      	mov	r4, r0
 8008c1a:	b9c8      	cbnz	r0, 8008c50 <f_readdir+0x44>
		if (!fno) {
 8008c1c:	b1fe      	cbz	r6, 8008c5e <f_readdir+0x52>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
 8008c1e:	ab01      	add	r3, sp, #4
 8008c20:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8008c24:	4628      	mov	r0, r5
 8008c26:	f7ff fa95 	bl	8008154 <dir_read.constprop.0>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8008c2a:	2804      	cmp	r0, #4
 8008c2c:	d01f      	beq.n	8008c6e <f_readdir+0x62>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8008c2e:	b990      	cbnz	r0, 8008c56 <f_readdir+0x4a>
 8008c30:	f8d5 0210 	ldr.w	r0, [r5, #528]	; 0x210
				get_fileinfo(dp, fno);		/* Get the object information */
 8008c34:	4632      	mov	r2, r6
 8008c36:	f505 7105 	add.w	r1, r5, #532	; 0x214
 8008c3a:	f7fe fc67 	bl	800750c <get_fileinfo.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4628      	mov	r0, r5
 8008c42:	f7ff f8a3 	bl	8007d8c <dir_next>
				if (res == FR_NO_FILE) {
 8008c46:	2804      	cmp	r0, #4
 8008c48:	d105      	bne.n	8008c56 <f_readdir+0x4a>
					dp->sect = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 8008c50:	4620      	mov	r0, r4
 8008c52:	b004      	add	sp, #16
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	4604      	mov	r4, r0
 8008c58:	4620      	mov	r0, r4
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008c5e:	4601      	mov	r1, r0
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7fe ff21 	bl	8007aa8 <dir_sdi>
 8008c66:	4604      	mov	r4, r0
}
 8008c68:	4620      	mov	r0, r4
 8008c6a:	b004      	add	sp, #16
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
				dp->sect = 0;
 8008c6e:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
 8008c72:	4620      	mov	r0, r4
 8008c74:	e7de      	b.n	8008c34 <f_readdir+0x28>
 8008c76:	bf00      	nop

08008c78 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8008c78:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <FATFS_LinkDriver+0x40>)
 8008c7a:	7a5a      	ldrb	r2, [r3, #9]
 8008c7c:	2a01      	cmp	r2, #1
 8008c7e:	d901      	bls.n	8008c84 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8008c80:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8008c82:	4770      	bx	lr
{
 8008c84:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 8008c86:	7a5f      	ldrb	r7, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8008c88:	7a5e      	ldrb	r6, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8008c8a:	7a5d      	ldrb	r5, [r3, #9]
    DiskNum = disk.nbr++;
 8008c8c:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8008c8e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.is_initialized[disk.nbr] = 0;
 8008c92:	b2ff      	uxtb	r7, r7
    disk.drv[disk.nbr] = drv;  
 8008c94:	6070      	str	r0, [r6, #4]
    disk.is_initialized[disk.nbr] = 0;
 8008c96:	2200      	movs	r2, #0
    disk.lun[disk.nbr] = lun;  
 8008c98:	441d      	add	r5, r3
    DiskNum = disk.nbr++;
 8008c9a:	1c60      	adds	r0, r4, #1
    disk.is_initialized[disk.nbr] = 0;
 8008c9c:	55da      	strb	r2, [r3, r7]
    DiskNum = disk.nbr++;
 8008c9e:	b2c0      	uxtb	r0, r0
 8008ca0:	7258      	strb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8008ca2:	722a      	strb	r2, [r5, #8]
    path[0] = DiskNum + '0';
 8008ca4:	3430      	adds	r4, #48	; 0x30
    path[1] = ':';
 8008ca6:	253a      	movs	r5, #58	; 0x3a
    path[2] = '/';
 8008ca8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8008caa:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 8008cac:	4610      	mov	r0, r2
    path[1] = ':';
 8008cae:	704d      	strb	r5, [r1, #1]
    path[3] = 0;
 8008cb0:	70ca      	strb	r2, [r1, #3]
}
 8008cb2:	bcf0      	pop	{r4, r5, r6, r7}
    path[2] = '/';
 8008cb4:	708b      	strb	r3, [r1, #2]
}
 8008cb6:	4770      	bx	lr
 8008cb8:	20000350 	.word	0x20000350

08008cbc <__errno>:
 8008cbc:	4b01      	ldr	r3, [pc, #4]	; (8008cc4 <__errno+0x8>)
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000098 	.word	0x20000098

08008cc8 <__libc_init_array>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	4d0d      	ldr	r5, [pc, #52]	; (8008d00 <__libc_init_array+0x38>)
 8008ccc:	4c0d      	ldr	r4, [pc, #52]	; (8008d04 <__libc_init_array+0x3c>)
 8008cce:	1b64      	subs	r4, r4, r5
 8008cd0:	10a4      	asrs	r4, r4, #2
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	42a6      	cmp	r6, r4
 8008cd6:	d109      	bne.n	8008cec <__libc_init_array+0x24>
 8008cd8:	4d0b      	ldr	r5, [pc, #44]	; (8008d08 <__libc_init_array+0x40>)
 8008cda:	4c0c      	ldr	r4, [pc, #48]	; (8008d0c <__libc_init_array+0x44>)
 8008cdc:	f001 fac0 	bl	800a260 <_init>
 8008ce0:	1b64      	subs	r4, r4, r5
 8008ce2:	10a4      	asrs	r4, r4, #2
 8008ce4:	2600      	movs	r6, #0
 8008ce6:	42a6      	cmp	r6, r4
 8008ce8:	d105      	bne.n	8008cf6 <__libc_init_array+0x2e>
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf0:	4798      	blx	r3
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__libc_init_array+0xc>
 8008cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfa:	4798      	blx	r3
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	e7f2      	b.n	8008ce6 <__libc_init_array+0x1e>
 8008d00:	0803c218 	.word	0x0803c218
 8008d04:	0803c218 	.word	0x0803c218
 8008d08:	0803c218 	.word	0x0803c218
 8008d0c:	0803c21c 	.word	0x0803c21c

08008d10 <malloc>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	; (8008d1c <malloc+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f000 b85b 	b.w	8008dd0 <_malloc_r>
 8008d1a:	bf00      	nop
 8008d1c:	20000098 	.word	0x20000098

08008d20 <memset>:
 8008d20:	4402      	add	r2, r0
 8008d22:	4603      	mov	r3, r0
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memset+0xa>
 8008d28:	4770      	bx	lr
 8008d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2e:	e7f9      	b.n	8008d24 <memset+0x4>

08008d30 <_free_r>:
 8008d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d32:	2900      	cmp	r1, #0
 8008d34:	d048      	beq.n	8008dc8 <_free_r+0x98>
 8008d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3a:	9001      	str	r0, [sp, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d42:	bfb8      	it	lt
 8008d44:	18e4      	addlt	r4, r4, r3
 8008d46:	f000 fc4b 	bl	80095e0 <__malloc_lock>
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <_free_r+0x9c>)
 8008d4c:	9801      	ldr	r0, [sp, #4]
 8008d4e:	6813      	ldr	r3, [r2, #0]
 8008d50:	4615      	mov	r5, r2
 8008d52:	b933      	cbnz	r3, 8008d62 <_free_r+0x32>
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6014      	str	r4, [r2, #0]
 8008d58:	b003      	add	sp, #12
 8008d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d5e:	f000 bc45 	b.w	80095ec <__malloc_unlock>
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	d90b      	bls.n	8008d7e <_free_r+0x4e>
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	1862      	adds	r2, r4, r1
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bf04      	itt	eq
 8008d6e:	681a      	ldreq	r2, [r3, #0]
 8008d70:	685b      	ldreq	r3, [r3, #4]
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	bf04      	itt	eq
 8008d76:	1852      	addeq	r2, r2, r1
 8008d78:	6022      	streq	r2, [r4, #0]
 8008d7a:	602c      	str	r4, [r5, #0]
 8008d7c:	e7ec      	b.n	8008d58 <_free_r+0x28>
 8008d7e:	461a      	mov	r2, r3
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	b10b      	cbz	r3, 8008d88 <_free_r+0x58>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d9fa      	bls.n	8008d7e <_free_r+0x4e>
 8008d88:	6811      	ldr	r1, [r2, #0]
 8008d8a:	1855      	adds	r5, r2, r1
 8008d8c:	42a5      	cmp	r5, r4
 8008d8e:	d10b      	bne.n	8008da8 <_free_r+0x78>
 8008d90:	6824      	ldr	r4, [r4, #0]
 8008d92:	4421      	add	r1, r4
 8008d94:	1854      	adds	r4, r2, r1
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	6011      	str	r1, [r2, #0]
 8008d9a:	d1dd      	bne.n	8008d58 <_free_r+0x28>
 8008d9c:	681c      	ldr	r4, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	6053      	str	r3, [r2, #4]
 8008da2:	4421      	add	r1, r4
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	e7d7      	b.n	8008d58 <_free_r+0x28>
 8008da8:	d902      	bls.n	8008db0 <_free_r+0x80>
 8008daa:	230c      	movs	r3, #12
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	e7d3      	b.n	8008d58 <_free_r+0x28>
 8008db0:	6825      	ldr	r5, [r4, #0]
 8008db2:	1961      	adds	r1, r4, r5
 8008db4:	428b      	cmp	r3, r1
 8008db6:	bf04      	itt	eq
 8008db8:	6819      	ldreq	r1, [r3, #0]
 8008dba:	685b      	ldreq	r3, [r3, #4]
 8008dbc:	6063      	str	r3, [r4, #4]
 8008dbe:	bf04      	itt	eq
 8008dc0:	1949      	addeq	r1, r1, r5
 8008dc2:	6021      	streq	r1, [r4, #0]
 8008dc4:	6054      	str	r4, [r2, #4]
 8008dc6:	e7c7      	b.n	8008d58 <_free_r+0x28>
 8008dc8:	b003      	add	sp, #12
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	2000035c 	.word	0x2000035c

08008dd0 <_malloc_r>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	1ccd      	adds	r5, r1, #3
 8008dd4:	f025 0503 	bic.w	r5, r5, #3
 8008dd8:	3508      	adds	r5, #8
 8008dda:	2d0c      	cmp	r5, #12
 8008ddc:	bf38      	it	cc
 8008dde:	250c      	movcc	r5, #12
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	4606      	mov	r6, r0
 8008de4:	db01      	blt.n	8008dea <_malloc_r+0x1a>
 8008de6:	42a9      	cmp	r1, r5
 8008de8:	d903      	bls.n	8008df2 <_malloc_r+0x22>
 8008dea:	230c      	movs	r3, #12
 8008dec:	6033      	str	r3, [r6, #0]
 8008dee:	2000      	movs	r0, #0
 8008df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df2:	f000 fbf5 	bl	80095e0 <__malloc_lock>
 8008df6:	4921      	ldr	r1, [pc, #132]	; (8008e7c <_malloc_r+0xac>)
 8008df8:	680a      	ldr	r2, [r1, #0]
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	b99c      	cbnz	r4, 8008e26 <_malloc_r+0x56>
 8008dfe:	4f20      	ldr	r7, [pc, #128]	; (8008e80 <_malloc_r+0xb0>)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	b923      	cbnz	r3, 8008e0e <_malloc_r+0x3e>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4630      	mov	r0, r6
 8008e08:	f000 f8ca 	bl	8008fa0 <_sbrk_r>
 8008e0c:	6038      	str	r0, [r7, #0]
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	f000 f8c5 	bl	8008fa0 <_sbrk_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d123      	bne.n	8008e62 <_malloc_r+0x92>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	6033      	str	r3, [r6, #0]
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f000 fbe4 	bl	80095ec <__malloc_unlock>
 8008e24:	e7e3      	b.n	8008dee <_malloc_r+0x1e>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	1b5b      	subs	r3, r3, r5
 8008e2a:	d417      	bmi.n	8008e5c <_malloc_r+0x8c>
 8008e2c:	2b0b      	cmp	r3, #11
 8008e2e:	d903      	bls.n	8008e38 <_malloc_r+0x68>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	441c      	add	r4, r3
 8008e34:	6025      	str	r5, [r4, #0]
 8008e36:	e004      	b.n	8008e42 <_malloc_r+0x72>
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	42a2      	cmp	r2, r4
 8008e3c:	bf0c      	ite	eq
 8008e3e:	600b      	streq	r3, [r1, #0]
 8008e40:	6053      	strne	r3, [r2, #4]
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 fbd2 	bl	80095ec <__malloc_unlock>
 8008e48:	f104 000b 	add.w	r0, r4, #11
 8008e4c:	1d23      	adds	r3, r4, #4
 8008e4e:	f020 0007 	bic.w	r0, r0, #7
 8008e52:	1ac2      	subs	r2, r0, r3
 8008e54:	d0cc      	beq.n	8008df0 <_malloc_r+0x20>
 8008e56:	1a1b      	subs	r3, r3, r0
 8008e58:	50a3      	str	r3, [r4, r2]
 8008e5a:	e7c9      	b.n	8008df0 <_malloc_r+0x20>
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	6864      	ldr	r4, [r4, #4]
 8008e60:	e7cc      	b.n	8008dfc <_malloc_r+0x2c>
 8008e62:	1cc4      	adds	r4, r0, #3
 8008e64:	f024 0403 	bic.w	r4, r4, #3
 8008e68:	42a0      	cmp	r0, r4
 8008e6a:	d0e3      	beq.n	8008e34 <_malloc_r+0x64>
 8008e6c:	1a21      	subs	r1, r4, r0
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f000 f896 	bl	8008fa0 <_sbrk_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d1dd      	bne.n	8008e34 <_malloc_r+0x64>
 8008e78:	e7cf      	b.n	8008e1a <_malloc_r+0x4a>
 8008e7a:	bf00      	nop
 8008e7c:	2000035c 	.word	0x2000035c
 8008e80:	20000360 	.word	0x20000360

08008e84 <iprintf>:
 8008e84:	b40f      	push	{r0, r1, r2, r3}
 8008e86:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <iprintf+0x2c>)
 8008e88:	b513      	push	{r0, r1, r4, lr}
 8008e8a:	681c      	ldr	r4, [r3, #0]
 8008e8c:	b124      	cbz	r4, 8008e98 <iprintf+0x14>
 8008e8e:	69a3      	ldr	r3, [r4, #24]
 8008e90:	b913      	cbnz	r3, 8008e98 <iprintf+0x14>
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 faa0 	bl	80093d8 <__sinit>
 8008e98:	ab05      	add	r3, sp, #20
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	68a1      	ldr	r1, [r4, #8]
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fd2f 	bl	8009904 <_vfiprintf_r>
 8008ea6:	b002      	add	sp, #8
 8008ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eac:	b004      	add	sp, #16
 8008eae:	4770      	bx	lr
 8008eb0:	20000098 	.word	0x20000098

08008eb4 <_puts_r>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	460e      	mov	r6, r1
 8008eb8:	4605      	mov	r5, r0
 8008eba:	b118      	cbz	r0, 8008ec4 <_puts_r+0x10>
 8008ebc:	6983      	ldr	r3, [r0, #24]
 8008ebe:	b90b      	cbnz	r3, 8008ec4 <_puts_r+0x10>
 8008ec0:	f000 fa8a 	bl	80093d8 <__sinit>
 8008ec4:	69ab      	ldr	r3, [r5, #24]
 8008ec6:	68ac      	ldr	r4, [r5, #8]
 8008ec8:	b913      	cbnz	r3, 8008ed0 <_puts_r+0x1c>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 fa84 	bl	80093d8 <__sinit>
 8008ed0:	4b2c      	ldr	r3, [pc, #176]	; (8008f84 <_puts_r+0xd0>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d120      	bne.n	8008f18 <_puts_r+0x64>
 8008ed6:	686c      	ldr	r4, [r5, #4]
 8008ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eda:	07db      	lsls	r3, r3, #31
 8008edc:	d405      	bmi.n	8008eea <_puts_r+0x36>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	0598      	lsls	r0, r3, #22
 8008ee2:	d402      	bmi.n	8008eea <_puts_r+0x36>
 8008ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee6:	f000 fb15 	bl	8009514 <__retarget_lock_acquire_recursive>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	0719      	lsls	r1, r3, #28
 8008eee:	d51d      	bpl.n	8008f2c <_puts_r+0x78>
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	b1db      	cbz	r3, 8008f2c <_puts_r+0x78>
 8008ef4:	3e01      	subs	r6, #1
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008efc:	3b01      	subs	r3, #1
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	bb39      	cbnz	r1, 8008f52 <_puts_r+0x9e>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da38      	bge.n	8008f78 <_puts_r+0xc4>
 8008f06:	4622      	mov	r2, r4
 8008f08:	210a      	movs	r1, #10
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 f88a 	bl	8009024 <__swbuf_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d011      	beq.n	8008f38 <_puts_r+0x84>
 8008f14:	250a      	movs	r5, #10
 8008f16:	e011      	b.n	8008f3c <_puts_r+0x88>
 8008f18:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <_puts_r+0xd4>)
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	d101      	bne.n	8008f22 <_puts_r+0x6e>
 8008f1e:	68ac      	ldr	r4, [r5, #8]
 8008f20:	e7da      	b.n	8008ed8 <_puts_r+0x24>
 8008f22:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <_puts_r+0xd8>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	bf08      	it	eq
 8008f28:	68ec      	ldreq	r4, [r5, #12]
 8008f2a:	e7d5      	b.n	8008ed8 <_puts_r+0x24>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 f8ca 	bl	80090c8 <__swsetup_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d0dd      	beq.n	8008ef4 <_puts_r+0x40>
 8008f38:	f04f 35ff 	mov.w	r5, #4294967295
 8008f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3e:	07da      	lsls	r2, r3, #31
 8008f40:	d405      	bmi.n	8008f4e <_puts_r+0x9a>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	059b      	lsls	r3, r3, #22
 8008f46:	d402      	bmi.n	8008f4e <_puts_r+0x9a>
 8008f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4a:	f000 fae4 	bl	8009516 <__retarget_lock_release_recursive>
 8008f4e:	4628      	mov	r0, r5
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da04      	bge.n	8008f60 <_puts_r+0xac>
 8008f56:	69a2      	ldr	r2, [r4, #24]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	dc06      	bgt.n	8008f6a <_puts_r+0xb6>
 8008f5c:	290a      	cmp	r1, #10
 8008f5e:	d004      	beq.n	8008f6a <_puts_r+0xb6>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	7019      	strb	r1, [r3, #0]
 8008f68:	e7c5      	b.n	8008ef6 <_puts_r+0x42>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f000 f859 	bl	8009024 <__swbuf_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	d1bf      	bne.n	8008ef6 <_puts_r+0x42>
 8008f76:	e7df      	b.n	8008f38 <_puts_r+0x84>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	250a      	movs	r5, #10
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	6022      	str	r2, [r4, #0]
 8008f80:	701d      	strb	r5, [r3, #0]
 8008f82:	e7db      	b.n	8008f3c <_puts_r+0x88>
 8008f84:	0803c1a4 	.word	0x0803c1a4
 8008f88:	0803c1c4 	.word	0x0803c1c4
 8008f8c:	0803c184 	.word	0x0803c184

08008f90 <puts>:
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <puts+0xc>)
 8008f92:	4601      	mov	r1, r0
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f7ff bf8d 	b.w	8008eb4 <_puts_r>
 8008f9a:	bf00      	nop
 8008f9c:	20000098 	.word	0x20000098

08008fa0 <_sbrk_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d06      	ldr	r5, [pc, #24]	; (8008fbc <_sbrk_r+0x1c>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7f8 fc28 	bl	8001800 <_sbrk>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_sbrk_r+0x1a>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_sbrk_r+0x1a>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	2000c8f0 	.word	0x2000c8f0

08008fc0 <siprintf>:
 8008fc0:	b40e      	push	{r1, r2, r3}
 8008fc2:	b500      	push	{lr}
 8008fc4:	b09c      	sub	sp, #112	; 0x70
 8008fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8008fc8:	9002      	str	r0, [sp, #8]
 8008fca:	9006      	str	r0, [sp, #24]
 8008fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fd0:	4809      	ldr	r0, [pc, #36]	; (8008ff8 <siprintf+0x38>)
 8008fd2:	9107      	str	r1, [sp, #28]
 8008fd4:	9104      	str	r1, [sp, #16]
 8008fd6:	4909      	ldr	r1, [pc, #36]	; (8008ffc <siprintf+0x3c>)
 8008fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	6800      	ldr	r0, [r0, #0]
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	a902      	add	r1, sp, #8
 8008fe4:	f000 fb64 	bl	80096b0 <_svfiprintf_r>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	b01c      	add	sp, #112	; 0x70
 8008ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff4:	b003      	add	sp, #12
 8008ff6:	4770      	bx	lr
 8008ff8:	20000098 	.word	0x20000098
 8008ffc:	ffff0208 	.word	0xffff0208

08009000 <stpcpy>:
 8009000:	4603      	mov	r3, r0
 8009002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009006:	4618      	mov	r0, r3
 8009008:	f803 2b01 	strb.w	r2, [r3], #1
 800900c:	2a00      	cmp	r2, #0
 800900e:	d1f8      	bne.n	8009002 <stpcpy+0x2>
 8009010:	4770      	bx	lr

08009012 <strcpy>:
 8009012:	4603      	mov	r3, r0
 8009014:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009018:	f803 2b01 	strb.w	r2, [r3], #1
 800901c:	2a00      	cmp	r2, #0
 800901e:	d1f9      	bne.n	8009014 <strcpy+0x2>
 8009020:	4770      	bx	lr
	...

08009024 <__swbuf_r>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	460e      	mov	r6, r1
 8009028:	4614      	mov	r4, r2
 800902a:	4605      	mov	r5, r0
 800902c:	b118      	cbz	r0, 8009036 <__swbuf_r+0x12>
 800902e:	6983      	ldr	r3, [r0, #24]
 8009030:	b90b      	cbnz	r3, 8009036 <__swbuf_r+0x12>
 8009032:	f000 f9d1 	bl	80093d8 <__sinit>
 8009036:	4b21      	ldr	r3, [pc, #132]	; (80090bc <__swbuf_r+0x98>)
 8009038:	429c      	cmp	r4, r3
 800903a:	d12b      	bne.n	8009094 <__swbuf_r+0x70>
 800903c:	686c      	ldr	r4, [r5, #4]
 800903e:	69a3      	ldr	r3, [r4, #24]
 8009040:	60a3      	str	r3, [r4, #8]
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	071a      	lsls	r2, r3, #28
 8009046:	d52f      	bpl.n	80090a8 <__swbuf_r+0x84>
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b36b      	cbz	r3, 80090a8 <__swbuf_r+0x84>
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1ac0      	subs	r0, r0, r3
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	b2f6      	uxtb	r6, r6
 8009056:	4283      	cmp	r3, r0
 8009058:	4637      	mov	r7, r6
 800905a:	dc04      	bgt.n	8009066 <__swbuf_r+0x42>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 f926 	bl	80092b0 <_fflush_r>
 8009064:	bb30      	cbnz	r0, 80090b4 <__swbuf_r+0x90>
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	701e      	strb	r6, [r3, #0]
 8009074:	6963      	ldr	r3, [r4, #20]
 8009076:	3001      	adds	r0, #1
 8009078:	4283      	cmp	r3, r0
 800907a:	d004      	beq.n	8009086 <__swbuf_r+0x62>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d506      	bpl.n	8009090 <__swbuf_r+0x6c>
 8009082:	2e0a      	cmp	r6, #10
 8009084:	d104      	bne.n	8009090 <__swbuf_r+0x6c>
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f000 f911 	bl	80092b0 <_fflush_r>
 800908e:	b988      	cbnz	r0, 80090b4 <__swbuf_r+0x90>
 8009090:	4638      	mov	r0, r7
 8009092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <__swbuf_r+0x9c>)
 8009096:	429c      	cmp	r4, r3
 8009098:	d101      	bne.n	800909e <__swbuf_r+0x7a>
 800909a:	68ac      	ldr	r4, [r5, #8]
 800909c:	e7cf      	b.n	800903e <__swbuf_r+0x1a>
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <__swbuf_r+0xa0>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	bf08      	it	eq
 80090a4:	68ec      	ldreq	r4, [r5, #12]
 80090a6:	e7ca      	b.n	800903e <__swbuf_r+0x1a>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f80c 	bl	80090c8 <__swsetup_r>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d0cb      	beq.n	800904c <__swbuf_r+0x28>
 80090b4:	f04f 37ff 	mov.w	r7, #4294967295
 80090b8:	e7ea      	b.n	8009090 <__swbuf_r+0x6c>
 80090ba:	bf00      	nop
 80090bc:	0803c1a4 	.word	0x0803c1a4
 80090c0:	0803c1c4 	.word	0x0803c1c4
 80090c4:	0803c184 	.word	0x0803c184

080090c8 <__swsetup_r>:
 80090c8:	4b32      	ldr	r3, [pc, #200]	; (8009194 <__swsetup_r+0xcc>)
 80090ca:	b570      	push	{r4, r5, r6, lr}
 80090cc:	681d      	ldr	r5, [r3, #0]
 80090ce:	4606      	mov	r6, r0
 80090d0:	460c      	mov	r4, r1
 80090d2:	b125      	cbz	r5, 80090de <__swsetup_r+0x16>
 80090d4:	69ab      	ldr	r3, [r5, #24]
 80090d6:	b913      	cbnz	r3, 80090de <__swsetup_r+0x16>
 80090d8:	4628      	mov	r0, r5
 80090da:	f000 f97d 	bl	80093d8 <__sinit>
 80090de:	4b2e      	ldr	r3, [pc, #184]	; (8009198 <__swsetup_r+0xd0>)
 80090e0:	429c      	cmp	r4, r3
 80090e2:	d10f      	bne.n	8009104 <__swsetup_r+0x3c>
 80090e4:	686c      	ldr	r4, [r5, #4]
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ec:	0719      	lsls	r1, r3, #28
 80090ee:	d42c      	bmi.n	800914a <__swsetup_r+0x82>
 80090f0:	06dd      	lsls	r5, r3, #27
 80090f2:	d411      	bmi.n	8009118 <__swsetup_r+0x50>
 80090f4:	2309      	movs	r3, #9
 80090f6:	6033      	str	r3, [r6, #0]
 80090f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009102:	e03e      	b.n	8009182 <__swsetup_r+0xba>
 8009104:	4b25      	ldr	r3, [pc, #148]	; (800919c <__swsetup_r+0xd4>)
 8009106:	429c      	cmp	r4, r3
 8009108:	d101      	bne.n	800910e <__swsetup_r+0x46>
 800910a:	68ac      	ldr	r4, [r5, #8]
 800910c:	e7eb      	b.n	80090e6 <__swsetup_r+0x1e>
 800910e:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <__swsetup_r+0xd8>)
 8009110:	429c      	cmp	r4, r3
 8009112:	bf08      	it	eq
 8009114:	68ec      	ldreq	r4, [r5, #12]
 8009116:	e7e6      	b.n	80090e6 <__swsetup_r+0x1e>
 8009118:	0758      	lsls	r0, r3, #29
 800911a:	d512      	bpl.n	8009142 <__swsetup_r+0x7a>
 800911c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800911e:	b141      	cbz	r1, 8009132 <__swsetup_r+0x6a>
 8009120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009124:	4299      	cmp	r1, r3
 8009126:	d002      	beq.n	800912e <__swsetup_r+0x66>
 8009128:	4630      	mov	r0, r6
 800912a:	f7ff fe01 	bl	8008d30 <_free_r>
 800912e:	2300      	movs	r3, #0
 8009130:	6363      	str	r3, [r4, #52]	; 0x34
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	2300      	movs	r3, #0
 800913c:	6063      	str	r3, [r4, #4]
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f043 0308 	orr.w	r3, r3, #8
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	b94b      	cbnz	r3, 8009162 <__swsetup_r+0x9a>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009158:	d003      	beq.n	8009162 <__swsetup_r+0x9a>
 800915a:	4621      	mov	r1, r4
 800915c:	4630      	mov	r0, r6
 800915e:	f000 f9ff 	bl	8009560 <__smakebuf_r>
 8009162:	89a0      	ldrh	r0, [r4, #12]
 8009164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009168:	f010 0301 	ands.w	r3, r0, #1
 800916c:	d00a      	beq.n	8009184 <__swsetup_r+0xbc>
 800916e:	2300      	movs	r3, #0
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	6963      	ldr	r3, [r4, #20]
 8009174:	425b      	negs	r3, r3
 8009176:	61a3      	str	r3, [r4, #24]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b943      	cbnz	r3, 800918e <__swsetup_r+0xc6>
 800917c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009180:	d1ba      	bne.n	80090f8 <__swsetup_r+0x30>
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	0781      	lsls	r1, r0, #30
 8009186:	bf58      	it	pl
 8009188:	6963      	ldrpl	r3, [r4, #20]
 800918a:	60a3      	str	r3, [r4, #8]
 800918c:	e7f4      	b.n	8009178 <__swsetup_r+0xb0>
 800918e:	2000      	movs	r0, #0
 8009190:	e7f7      	b.n	8009182 <__swsetup_r+0xba>
 8009192:	bf00      	nop
 8009194:	20000098 	.word	0x20000098
 8009198:	0803c1a4 	.word	0x0803c1a4
 800919c:	0803c1c4 	.word	0x0803c1c4
 80091a0:	0803c184 	.word	0x0803c184

080091a4 <__sflush_r>:
 80091a4:	898a      	ldrh	r2, [r1, #12]
 80091a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091aa:	4605      	mov	r5, r0
 80091ac:	0710      	lsls	r0, r2, #28
 80091ae:	460c      	mov	r4, r1
 80091b0:	d458      	bmi.n	8009264 <__sflush_r+0xc0>
 80091b2:	684b      	ldr	r3, [r1, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dc05      	bgt.n	80091c4 <__sflush_r+0x20>
 80091b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dc02      	bgt.n	80091c4 <__sflush_r+0x20>
 80091be:	2000      	movs	r0, #0
 80091c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d0f9      	beq.n	80091be <__sflush_r+0x1a>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091d0:	682f      	ldr	r7, [r5, #0]
 80091d2:	602b      	str	r3, [r5, #0]
 80091d4:	d032      	beq.n	800923c <__sflush_r+0x98>
 80091d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	075a      	lsls	r2, r3, #29
 80091dc:	d505      	bpl.n	80091ea <__sflush_r+0x46>
 80091de:	6863      	ldr	r3, [r4, #4]
 80091e0:	1ac0      	subs	r0, r0, r3
 80091e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091e4:	b10b      	cbz	r3, 80091ea <__sflush_r+0x46>
 80091e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091e8:	1ac0      	subs	r0, r0, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	4602      	mov	r2, r0
 80091ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091f0:	6a21      	ldr	r1, [r4, #32]
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b0      	blx	r6
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	d106      	bne.n	800920a <__sflush_r+0x66>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	291d      	cmp	r1, #29
 8009200:	d82c      	bhi.n	800925c <__sflush_r+0xb8>
 8009202:	4a2a      	ldr	r2, [pc, #168]	; (80092ac <__sflush_r+0x108>)
 8009204:	40ca      	lsrs	r2, r1
 8009206:	07d6      	lsls	r6, r2, #31
 8009208:	d528      	bpl.n	800925c <__sflush_r+0xb8>
 800920a:	2200      	movs	r2, #0
 800920c:	6062      	str	r2, [r4, #4]
 800920e:	04d9      	lsls	r1, r3, #19
 8009210:	6922      	ldr	r2, [r4, #16]
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	d504      	bpl.n	8009220 <__sflush_r+0x7c>
 8009216:	1c42      	adds	r2, r0, #1
 8009218:	d101      	bne.n	800921e <__sflush_r+0x7a>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b903      	cbnz	r3, 8009220 <__sflush_r+0x7c>
 800921e:	6560      	str	r0, [r4, #84]	; 0x54
 8009220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009222:	602f      	str	r7, [r5, #0]
 8009224:	2900      	cmp	r1, #0
 8009226:	d0ca      	beq.n	80091be <__sflush_r+0x1a>
 8009228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800922c:	4299      	cmp	r1, r3
 800922e:	d002      	beq.n	8009236 <__sflush_r+0x92>
 8009230:	4628      	mov	r0, r5
 8009232:	f7ff fd7d 	bl	8008d30 <_free_r>
 8009236:	2000      	movs	r0, #0
 8009238:	6360      	str	r0, [r4, #52]	; 0x34
 800923a:	e7c1      	b.n	80091c0 <__sflush_r+0x1c>
 800923c:	6a21      	ldr	r1, [r4, #32]
 800923e:	2301      	movs	r3, #1
 8009240:	4628      	mov	r0, r5
 8009242:	47b0      	blx	r6
 8009244:	1c41      	adds	r1, r0, #1
 8009246:	d1c7      	bne.n	80091d8 <__sflush_r+0x34>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0c4      	beq.n	80091d8 <__sflush_r+0x34>
 800924e:	2b1d      	cmp	r3, #29
 8009250:	d001      	beq.n	8009256 <__sflush_r+0xb2>
 8009252:	2b16      	cmp	r3, #22
 8009254:	d101      	bne.n	800925a <__sflush_r+0xb6>
 8009256:	602f      	str	r7, [r5, #0]
 8009258:	e7b1      	b.n	80091be <__sflush_r+0x1a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009260:	81a3      	strh	r3, [r4, #12]
 8009262:	e7ad      	b.n	80091c0 <__sflush_r+0x1c>
 8009264:	690f      	ldr	r7, [r1, #16]
 8009266:	2f00      	cmp	r7, #0
 8009268:	d0a9      	beq.n	80091be <__sflush_r+0x1a>
 800926a:	0793      	lsls	r3, r2, #30
 800926c:	680e      	ldr	r6, [r1, #0]
 800926e:	bf08      	it	eq
 8009270:	694b      	ldreq	r3, [r1, #20]
 8009272:	600f      	str	r7, [r1, #0]
 8009274:	bf18      	it	ne
 8009276:	2300      	movne	r3, #0
 8009278:	eba6 0807 	sub.w	r8, r6, r7
 800927c:	608b      	str	r3, [r1, #8]
 800927e:	f1b8 0f00 	cmp.w	r8, #0
 8009282:	dd9c      	ble.n	80091be <__sflush_r+0x1a>
 8009284:	6a21      	ldr	r1, [r4, #32]
 8009286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009288:	4643      	mov	r3, r8
 800928a:	463a      	mov	r2, r7
 800928c:	4628      	mov	r0, r5
 800928e:	47b0      	blx	r6
 8009290:	2800      	cmp	r0, #0
 8009292:	dc06      	bgt.n	80092a2 <__sflush_r+0xfe>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	e78e      	b.n	80091c0 <__sflush_r+0x1c>
 80092a2:	4407      	add	r7, r0
 80092a4:	eba8 0800 	sub.w	r8, r8, r0
 80092a8:	e7e9      	b.n	800927e <__sflush_r+0xda>
 80092aa:	bf00      	nop
 80092ac:	20400001 	.word	0x20400001

080092b0 <_fflush_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b913      	cbnz	r3, 80092c0 <_fflush_r+0x10>
 80092ba:	2500      	movs	r5, #0
 80092bc:	4628      	mov	r0, r5
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	b118      	cbz	r0, 80092ca <_fflush_r+0x1a>
 80092c2:	6983      	ldr	r3, [r0, #24]
 80092c4:	b90b      	cbnz	r3, 80092ca <_fflush_r+0x1a>
 80092c6:	f000 f887 	bl	80093d8 <__sinit>
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <_fflush_r+0x6c>)
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d11b      	bne.n	8009308 <_fflush_r+0x58>
 80092d0:	686c      	ldr	r4, [r5, #4]
 80092d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0ef      	beq.n	80092ba <_fflush_r+0xa>
 80092da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092dc:	07d0      	lsls	r0, r2, #31
 80092de:	d404      	bmi.n	80092ea <_fflush_r+0x3a>
 80092e0:	0599      	lsls	r1, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_fflush_r+0x3a>
 80092e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e6:	f000 f915 	bl	8009514 <__retarget_lock_acquire_recursive>
 80092ea:	4628      	mov	r0, r5
 80092ec:	4621      	mov	r1, r4
 80092ee:	f7ff ff59 	bl	80091a4 <__sflush_r>
 80092f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092f4:	07da      	lsls	r2, r3, #31
 80092f6:	4605      	mov	r5, r0
 80092f8:	d4e0      	bmi.n	80092bc <_fflush_r+0xc>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	059b      	lsls	r3, r3, #22
 80092fe:	d4dd      	bmi.n	80092bc <_fflush_r+0xc>
 8009300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009302:	f000 f908 	bl	8009516 <__retarget_lock_release_recursive>
 8009306:	e7d9      	b.n	80092bc <_fflush_r+0xc>
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <_fflush_r+0x70>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d101      	bne.n	8009312 <_fflush_r+0x62>
 800930e:	68ac      	ldr	r4, [r5, #8]
 8009310:	e7df      	b.n	80092d2 <_fflush_r+0x22>
 8009312:	4b04      	ldr	r3, [pc, #16]	; (8009324 <_fflush_r+0x74>)
 8009314:	429c      	cmp	r4, r3
 8009316:	bf08      	it	eq
 8009318:	68ec      	ldreq	r4, [r5, #12]
 800931a:	e7da      	b.n	80092d2 <_fflush_r+0x22>
 800931c:	0803c1a4 	.word	0x0803c1a4
 8009320:	0803c1c4 	.word	0x0803c1c4
 8009324:	0803c184 	.word	0x0803c184

08009328 <std>:
 8009328:	2300      	movs	r3, #0
 800932a:	b510      	push	{r4, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	e9c0 3300 	strd	r3, r3, [r0]
 8009332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009336:	6083      	str	r3, [r0, #8]
 8009338:	8181      	strh	r1, [r0, #12]
 800933a:	6643      	str	r3, [r0, #100]	; 0x64
 800933c:	81c2      	strh	r2, [r0, #14]
 800933e:	6183      	str	r3, [r0, #24]
 8009340:	4619      	mov	r1, r3
 8009342:	2208      	movs	r2, #8
 8009344:	305c      	adds	r0, #92	; 0x5c
 8009346:	f7ff fceb 	bl	8008d20 <memset>
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <std+0x38>)
 800934c:	6263      	str	r3, [r4, #36]	; 0x24
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <std+0x3c>)
 8009350:	62a3      	str	r3, [r4, #40]	; 0x28
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <std+0x40>)
 8009354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009356:	4b05      	ldr	r3, [pc, #20]	; (800936c <std+0x44>)
 8009358:	6224      	str	r4, [r4, #32]
 800935a:	6323      	str	r3, [r4, #48]	; 0x30
 800935c:	bd10      	pop	{r4, pc}
 800935e:	bf00      	nop
 8009360:	08009e8d 	.word	0x08009e8d
 8009364:	08009eaf 	.word	0x08009eaf
 8009368:	08009ee7 	.word	0x08009ee7
 800936c:	08009f0b 	.word	0x08009f0b

08009370 <_cleanup_r>:
 8009370:	4901      	ldr	r1, [pc, #4]	; (8009378 <_cleanup_r+0x8>)
 8009372:	f000 b8af 	b.w	80094d4 <_fwalk_reent>
 8009376:	bf00      	nop
 8009378:	080092b1 	.word	0x080092b1

0800937c <__sfmoreglue>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	1e4a      	subs	r2, r1, #1
 8009380:	2568      	movs	r5, #104	; 0x68
 8009382:	4355      	muls	r5, r2
 8009384:	460e      	mov	r6, r1
 8009386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800938a:	f7ff fd21 	bl	8008dd0 <_malloc_r>
 800938e:	4604      	mov	r4, r0
 8009390:	b140      	cbz	r0, 80093a4 <__sfmoreglue+0x28>
 8009392:	2100      	movs	r1, #0
 8009394:	e9c0 1600 	strd	r1, r6, [r0]
 8009398:	300c      	adds	r0, #12
 800939a:	60a0      	str	r0, [r4, #8]
 800939c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093a0:	f7ff fcbe 	bl	8008d20 <memset>
 80093a4:	4620      	mov	r0, r4
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <__sfp_lock_acquire>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__sfp_lock_acquire+0x8>)
 80093aa:	f000 b8b3 	b.w	8009514 <__retarget_lock_acquire_recursive>
 80093ae:	bf00      	nop
 80093b0:	2000c8ec 	.word	0x2000c8ec

080093b4 <__sfp_lock_release>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__sfp_lock_release+0x8>)
 80093b6:	f000 b8ae 	b.w	8009516 <__retarget_lock_release_recursive>
 80093ba:	bf00      	nop
 80093bc:	2000c8ec 	.word	0x2000c8ec

080093c0 <__sinit_lock_acquire>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sinit_lock_acquire+0x8>)
 80093c2:	f000 b8a7 	b.w	8009514 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	2000c8e7 	.word	0x2000c8e7

080093cc <__sinit_lock_release>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sinit_lock_release+0x8>)
 80093ce:	f000 b8a2 	b.w	8009516 <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	2000c8e7 	.word	0x2000c8e7

080093d8 <__sinit>:
 80093d8:	b510      	push	{r4, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	f7ff fff0 	bl	80093c0 <__sinit_lock_acquire>
 80093e0:	69a3      	ldr	r3, [r4, #24]
 80093e2:	b11b      	cbz	r3, 80093ec <__sinit+0x14>
 80093e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e8:	f7ff bff0 	b.w	80093cc <__sinit_lock_release>
 80093ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093f0:	6523      	str	r3, [r4, #80]	; 0x50
 80093f2:	4b13      	ldr	r3, [pc, #76]	; (8009440 <__sinit+0x68>)
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <__sinit+0x6c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	bf04      	itt	eq
 80093fe:	2301      	moveq	r3, #1
 8009400:	61a3      	streq	r3, [r4, #24]
 8009402:	4620      	mov	r0, r4
 8009404:	f000 f820 	bl	8009448 <__sfp>
 8009408:	6060      	str	r0, [r4, #4]
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f81c 	bl	8009448 <__sfp>
 8009410:	60a0      	str	r0, [r4, #8]
 8009412:	4620      	mov	r0, r4
 8009414:	f000 f818 	bl	8009448 <__sfp>
 8009418:	2200      	movs	r2, #0
 800941a:	60e0      	str	r0, [r4, #12]
 800941c:	2104      	movs	r1, #4
 800941e:	6860      	ldr	r0, [r4, #4]
 8009420:	f7ff ff82 	bl	8009328 <std>
 8009424:	68a0      	ldr	r0, [r4, #8]
 8009426:	2201      	movs	r2, #1
 8009428:	2109      	movs	r1, #9
 800942a:	f7ff ff7d 	bl	8009328 <std>
 800942e:	68e0      	ldr	r0, [r4, #12]
 8009430:	2202      	movs	r2, #2
 8009432:	2112      	movs	r1, #18
 8009434:	f7ff ff78 	bl	8009328 <std>
 8009438:	2301      	movs	r3, #1
 800943a:	61a3      	str	r3, [r4, #24]
 800943c:	e7d2      	b.n	80093e4 <__sinit+0xc>
 800943e:	bf00      	nop
 8009440:	0803c180 	.word	0x0803c180
 8009444:	08009371 	.word	0x08009371

08009448 <__sfp>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	4607      	mov	r7, r0
 800944c:	f7ff ffac 	bl	80093a8 <__sfp_lock_acquire>
 8009450:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <__sfp+0x84>)
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	69b3      	ldr	r3, [r6, #24]
 8009456:	b913      	cbnz	r3, 800945e <__sfp+0x16>
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ffbd 	bl	80093d8 <__sinit>
 800945e:	3648      	adds	r6, #72	; 0x48
 8009460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009464:	3b01      	subs	r3, #1
 8009466:	d503      	bpl.n	8009470 <__sfp+0x28>
 8009468:	6833      	ldr	r3, [r6, #0]
 800946a:	b30b      	cbz	r3, 80094b0 <__sfp+0x68>
 800946c:	6836      	ldr	r6, [r6, #0]
 800946e:	e7f7      	b.n	8009460 <__sfp+0x18>
 8009470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009474:	b9d5      	cbnz	r5, 80094ac <__sfp+0x64>
 8009476:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <__sfp+0x88>)
 8009478:	60e3      	str	r3, [r4, #12]
 800947a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800947e:	6665      	str	r5, [r4, #100]	; 0x64
 8009480:	f000 f847 	bl	8009512 <__retarget_lock_init_recursive>
 8009484:	f7ff ff96 	bl	80093b4 <__sfp_lock_release>
 8009488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800948c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009490:	6025      	str	r5, [r4, #0]
 8009492:	61a5      	str	r5, [r4, #24]
 8009494:	2208      	movs	r2, #8
 8009496:	4629      	mov	r1, r5
 8009498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800949c:	f7ff fc40 	bl	8008d20 <memset>
 80094a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094a8:	4620      	mov	r0, r4
 80094aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ac:	3468      	adds	r4, #104	; 0x68
 80094ae:	e7d9      	b.n	8009464 <__sfp+0x1c>
 80094b0:	2104      	movs	r1, #4
 80094b2:	4638      	mov	r0, r7
 80094b4:	f7ff ff62 	bl	800937c <__sfmoreglue>
 80094b8:	4604      	mov	r4, r0
 80094ba:	6030      	str	r0, [r6, #0]
 80094bc:	2800      	cmp	r0, #0
 80094be:	d1d5      	bne.n	800946c <__sfp+0x24>
 80094c0:	f7ff ff78 	bl	80093b4 <__sfp_lock_release>
 80094c4:	230c      	movs	r3, #12
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	e7ee      	b.n	80094a8 <__sfp+0x60>
 80094ca:	bf00      	nop
 80094cc:	0803c180 	.word	0x0803c180
 80094d0:	ffff0001 	.word	0xffff0001

080094d4 <_fwalk_reent>:
 80094d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d8:	4606      	mov	r6, r0
 80094da:	4688      	mov	r8, r1
 80094dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094e0:	2700      	movs	r7, #0
 80094e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094e6:	f1b9 0901 	subs.w	r9, r9, #1
 80094ea:	d505      	bpl.n	80094f8 <_fwalk_reent+0x24>
 80094ec:	6824      	ldr	r4, [r4, #0]
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d1f7      	bne.n	80094e2 <_fwalk_reent+0xe>
 80094f2:	4638      	mov	r0, r7
 80094f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f8:	89ab      	ldrh	r3, [r5, #12]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d907      	bls.n	800950e <_fwalk_reent+0x3a>
 80094fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009502:	3301      	adds	r3, #1
 8009504:	d003      	beq.n	800950e <_fwalk_reent+0x3a>
 8009506:	4629      	mov	r1, r5
 8009508:	4630      	mov	r0, r6
 800950a:	47c0      	blx	r8
 800950c:	4307      	orrs	r7, r0
 800950e:	3568      	adds	r5, #104	; 0x68
 8009510:	e7e9      	b.n	80094e6 <_fwalk_reent+0x12>

08009512 <__retarget_lock_init_recursive>:
 8009512:	4770      	bx	lr

08009514 <__retarget_lock_acquire_recursive>:
 8009514:	4770      	bx	lr

08009516 <__retarget_lock_release_recursive>:
 8009516:	4770      	bx	lr

08009518 <__swhatbuf_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	460e      	mov	r6, r1
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	2900      	cmp	r1, #0
 8009522:	b096      	sub	sp, #88	; 0x58
 8009524:	4614      	mov	r4, r2
 8009526:	461d      	mov	r5, r3
 8009528:	da07      	bge.n	800953a <__swhatbuf_r+0x22>
 800952a:	2300      	movs	r3, #0
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	89b3      	ldrh	r3, [r6, #12]
 8009530:	061a      	lsls	r2, r3, #24
 8009532:	d410      	bmi.n	8009556 <__swhatbuf_r+0x3e>
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	e00e      	b.n	8009558 <__swhatbuf_r+0x40>
 800953a:	466a      	mov	r2, sp
 800953c:	f000 fd0c 	bl	8009f58 <_fstat_r>
 8009540:	2800      	cmp	r0, #0
 8009542:	dbf2      	blt.n	800952a <__swhatbuf_r+0x12>
 8009544:	9a01      	ldr	r2, [sp, #4]
 8009546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800954a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800954e:	425a      	negs	r2, r3
 8009550:	415a      	adcs	r2, r3
 8009552:	602a      	str	r2, [r5, #0]
 8009554:	e7ee      	b.n	8009534 <__swhatbuf_r+0x1c>
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	2000      	movs	r0, #0
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	b016      	add	sp, #88	; 0x58
 800955e:	bd70      	pop	{r4, r5, r6, pc}

08009560 <__smakebuf_r>:
 8009560:	898b      	ldrh	r3, [r1, #12]
 8009562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009564:	079d      	lsls	r5, r3, #30
 8009566:	4606      	mov	r6, r0
 8009568:	460c      	mov	r4, r1
 800956a:	d507      	bpl.n	800957c <__smakebuf_r+0x1c>
 800956c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	2301      	movs	r3, #1
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	b002      	add	sp, #8
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	ab01      	add	r3, sp, #4
 800957e:	466a      	mov	r2, sp
 8009580:	f7ff ffca 	bl	8009518 <__swhatbuf_r>
 8009584:	9900      	ldr	r1, [sp, #0]
 8009586:	4605      	mov	r5, r0
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff fc21 	bl	8008dd0 <_malloc_r>
 800958e:	b948      	cbnz	r0, 80095a4 <__smakebuf_r+0x44>
 8009590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009594:	059a      	lsls	r2, r3, #22
 8009596:	d4ef      	bmi.n	8009578 <__smakebuf_r+0x18>
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	f043 0302 	orr.w	r3, r3, #2
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	e7e3      	b.n	800956c <__smakebuf_r+0xc>
 80095a4:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <__smakebuf_r+0x7c>)
 80095a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	6020      	str	r0, [r4, #0]
 80095ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	9b00      	ldr	r3, [sp, #0]
 80095b4:	6163      	str	r3, [r4, #20]
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	6120      	str	r0, [r4, #16]
 80095ba:	b15b      	cbz	r3, 80095d4 <__smakebuf_r+0x74>
 80095bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 fcdb 	bl	8009f7c <_isatty_r>
 80095c6:	b128      	cbz	r0, 80095d4 <__smakebuf_r+0x74>
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f023 0303 	bic.w	r3, r3, #3
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	89a0      	ldrh	r0, [r4, #12]
 80095d6:	4305      	orrs	r5, r0
 80095d8:	81a5      	strh	r5, [r4, #12]
 80095da:	e7cd      	b.n	8009578 <__smakebuf_r+0x18>
 80095dc:	08009371 	.word	0x08009371

080095e0 <__malloc_lock>:
 80095e0:	4801      	ldr	r0, [pc, #4]	; (80095e8 <__malloc_lock+0x8>)
 80095e2:	f7ff bf97 	b.w	8009514 <__retarget_lock_acquire_recursive>
 80095e6:	bf00      	nop
 80095e8:	2000c8e8 	.word	0x2000c8e8

080095ec <__malloc_unlock>:
 80095ec:	4801      	ldr	r0, [pc, #4]	; (80095f4 <__malloc_unlock+0x8>)
 80095ee:	f7ff bf92 	b.w	8009516 <__retarget_lock_release_recursive>
 80095f2:	bf00      	nop
 80095f4:	2000c8e8 	.word	0x2000c8e8

080095f8 <__ssputs_r>:
 80095f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095fc:	688e      	ldr	r6, [r1, #8]
 80095fe:	429e      	cmp	r6, r3
 8009600:	4682      	mov	sl, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4690      	mov	r8, r2
 8009606:	461f      	mov	r7, r3
 8009608:	d838      	bhi.n	800967c <__ssputs_r+0x84>
 800960a:	898a      	ldrh	r2, [r1, #12]
 800960c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009610:	d032      	beq.n	8009678 <__ssputs_r+0x80>
 8009612:	6825      	ldr	r5, [r4, #0]
 8009614:	6909      	ldr	r1, [r1, #16]
 8009616:	eba5 0901 	sub.w	r9, r5, r1
 800961a:	6965      	ldr	r5, [r4, #20]
 800961c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009624:	3301      	adds	r3, #1
 8009626:	444b      	add	r3, r9
 8009628:	106d      	asrs	r5, r5, #1
 800962a:	429d      	cmp	r5, r3
 800962c:	bf38      	it	cc
 800962e:	461d      	movcc	r5, r3
 8009630:	0553      	lsls	r3, r2, #21
 8009632:	d531      	bpl.n	8009698 <__ssputs_r+0xa0>
 8009634:	4629      	mov	r1, r5
 8009636:	f7ff fbcb 	bl	8008dd0 <_malloc_r>
 800963a:	4606      	mov	r6, r0
 800963c:	b950      	cbnz	r0, 8009654 <__ssputs_r+0x5c>
 800963e:	230c      	movs	r3, #12
 8009640:	f8ca 3000 	str.w	r3, [sl]
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	6921      	ldr	r1, [r4, #16]
 8009656:	464a      	mov	r2, r9
 8009658:	f000 fcb2 	bl	8009fc0 <memcpy>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	6126      	str	r6, [r4, #16]
 800966a:	6165      	str	r5, [r4, #20]
 800966c:	444e      	add	r6, r9
 800966e:	eba5 0509 	sub.w	r5, r5, r9
 8009672:	6026      	str	r6, [r4, #0]
 8009674:	60a5      	str	r5, [r4, #8]
 8009676:	463e      	mov	r6, r7
 8009678:	42be      	cmp	r6, r7
 800967a:	d900      	bls.n	800967e <__ssputs_r+0x86>
 800967c:	463e      	mov	r6, r7
 800967e:	4632      	mov	r2, r6
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	4641      	mov	r1, r8
 8009684:	f000 fcaa 	bl	8009fdc <memmove>
 8009688:	68a3      	ldr	r3, [r4, #8]
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	1b9b      	subs	r3, r3, r6
 800968e:	4432      	add	r2, r6
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	6022      	str	r2, [r4, #0]
 8009694:	2000      	movs	r0, #0
 8009696:	e7db      	b.n	8009650 <__ssputs_r+0x58>
 8009698:	462a      	mov	r2, r5
 800969a:	f000 fcb9 	bl	800a010 <_realloc_r>
 800969e:	4606      	mov	r6, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1e1      	bne.n	8009668 <__ssputs_r+0x70>
 80096a4:	6921      	ldr	r1, [r4, #16]
 80096a6:	4650      	mov	r0, sl
 80096a8:	f7ff fb42 	bl	8008d30 <_free_r>
 80096ac:	e7c7      	b.n	800963e <__ssputs_r+0x46>
	...

080096b0 <_svfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4698      	mov	r8, r3
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	061b      	lsls	r3, r3, #24
 80096ba:	b09d      	sub	sp, #116	; 0x74
 80096bc:	4607      	mov	r7, r0
 80096be:	460d      	mov	r5, r1
 80096c0:	4614      	mov	r4, r2
 80096c2:	d50e      	bpl.n	80096e2 <_svfiprintf_r+0x32>
 80096c4:	690b      	ldr	r3, [r1, #16]
 80096c6:	b963      	cbnz	r3, 80096e2 <_svfiprintf_r+0x32>
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	f7ff fb81 	bl	8008dd0 <_malloc_r>
 80096ce:	6028      	str	r0, [r5, #0]
 80096d0:	6128      	str	r0, [r5, #16]
 80096d2:	b920      	cbnz	r0, 80096de <_svfiprintf_r+0x2e>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e0d1      	b.n	8009882 <_svfiprintf_r+0x1d2>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	; 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	2330      	movs	r3, #48	; 0x30
 80096f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800989c <_svfiprintf_r+0x1ec>
 80096f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096fa:	f04f 0901 	mov.w	r9, #1
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x5c>
 8009708:	2a25      	cmp	r2, #37	; 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x50>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7a>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6d 	bl	80095f8 <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80aa 	beq.w	8009878 <_svfiprintf_r+0x1c8>
 8009724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	; 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80a2 	beq.w	8009878 <_svfiprintf_r+0x1c8>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800974a:	931a      	str	r3, [sp, #104]	; 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	4851      	ldr	r0, [pc, #324]	; (800989c <_svfiprintf_r+0x1ec>)
 8009756:	f7f6 fd4b 	bl	80001f0 <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xe6>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	; 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	; 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xf6>
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4654      	mov	r4, sl
 800977e:	2000      	movs	r0, #0
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94e      	bls.n	800982e <_svfiprintf_r+0x17e>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x110>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x110>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	46a2      	mov	sl, r4
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0x9c>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	; 0x2e
 80097c4:	d10c      	bne.n	80097e0 <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ca:	d135      	bne.n	8009838 <_svfiprintf_r+0x188>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfb8      	it	lt
 80097d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80097dc:	3402      	adds	r4, #2
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098ac <_svfiprintf_r+0x1fc>
 80097e4:	7821      	ldrb	r1, [r4, #0]
 80097e6:	2203      	movs	r2, #3
 80097e8:	4650      	mov	r0, sl
 80097ea:	f7f6 fd01 	bl	80001f0 <memchr>
 80097ee:	b140      	cbz	r0, 8009802 <_svfiprintf_r+0x152>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	eba0 000a 	sub.w	r0, r0, sl
 80097f6:	fa03 f000 	lsl.w	r0, r3, r0
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	4303      	orrs	r3, r0
 80097fe:	3401      	adds	r4, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009806:	4826      	ldr	r0, [pc, #152]	; (80098a0 <_svfiprintf_r+0x1f0>)
 8009808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800980c:	2206      	movs	r2, #6
 800980e:	f7f6 fcef 	bl	80001f0 <memchr>
 8009812:	2800      	cmp	r0, #0
 8009814:	d038      	beq.n	8009888 <_svfiprintf_r+0x1d8>
 8009816:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <_svfiprintf_r+0x1f4>)
 8009818:	bb1b      	cbnz	r3, 8009862 <_svfiprintf_r+0x1b2>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	3307      	adds	r3, #7
 800981e:	f023 0307 	bic.w	r3, r3, #7
 8009822:	3308      	adds	r3, #8
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009828:	4433      	add	r3, r6
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	e767      	b.n	80096fe <_svfiprintf_r+0x4e>
 800982e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009832:	460c      	mov	r4, r1
 8009834:	2001      	movs	r0, #1
 8009836:	e7a5      	b.n	8009784 <_svfiprintf_r+0xd4>
 8009838:	2300      	movs	r3, #0
 800983a:	3401      	adds	r4, #1
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	f04f 0c0a 	mov.w	ip, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984a:	3a30      	subs	r2, #48	; 0x30
 800984c:	2a09      	cmp	r2, #9
 800984e:	d903      	bls.n	8009858 <_svfiprintf_r+0x1a8>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0c5      	beq.n	80097e0 <_svfiprintf_r+0x130>
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	e7c3      	b.n	80097e0 <_svfiprintf_r+0x130>
 8009858:	fb0c 2101 	mla	r1, ip, r1, r2
 800985c:	4604      	mov	r4, r0
 800985e:	2301      	movs	r3, #1
 8009860:	e7f0      	b.n	8009844 <_svfiprintf_r+0x194>
 8009862:	ab03      	add	r3, sp, #12
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	462a      	mov	r2, r5
 8009868:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <_svfiprintf_r+0x1f8>)
 800986a:	a904      	add	r1, sp, #16
 800986c:	4638      	mov	r0, r7
 800986e:	f3af 8000 	nop.w
 8009872:	1c42      	adds	r2, r0, #1
 8009874:	4606      	mov	r6, r0
 8009876:	d1d6      	bne.n	8009826 <_svfiprintf_r+0x176>
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	065b      	lsls	r3, r3, #25
 800987c:	f53f af2c 	bmi.w	80096d8 <_svfiprintf_r+0x28>
 8009880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009882:	b01d      	add	sp, #116	; 0x74
 8009884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009888:	ab03      	add	r3, sp, #12
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	462a      	mov	r2, r5
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <_svfiprintf_r+0x1f8>)
 8009890:	a904      	add	r1, sp, #16
 8009892:	4638      	mov	r0, r7
 8009894:	f000 f9d4 	bl	8009c40 <_printf_i>
 8009898:	e7eb      	b.n	8009872 <_svfiprintf_r+0x1c2>
 800989a:	bf00      	nop
 800989c:	0803c1e4 	.word	0x0803c1e4
 80098a0:	0803c1ee 	.word	0x0803c1ee
 80098a4:	00000000 	.word	0x00000000
 80098a8:	080095f9 	.word	0x080095f9
 80098ac:	0803c1ea 	.word	0x0803c1ea

080098b0 <__sfputc_r>:
 80098b0:	6893      	ldr	r3, [r2, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	b410      	push	{r4}
 80098b8:	6093      	str	r3, [r2, #8]
 80098ba:	da08      	bge.n	80098ce <__sfputc_r+0x1e>
 80098bc:	6994      	ldr	r4, [r2, #24]
 80098be:	42a3      	cmp	r3, r4
 80098c0:	db01      	blt.n	80098c6 <__sfputc_r+0x16>
 80098c2:	290a      	cmp	r1, #10
 80098c4:	d103      	bne.n	80098ce <__sfputc_r+0x1e>
 80098c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ca:	f7ff bbab 	b.w	8009024 <__swbuf_r>
 80098ce:	6813      	ldr	r3, [r2, #0]
 80098d0:	1c58      	adds	r0, r3, #1
 80098d2:	6010      	str	r0, [r2, #0]
 80098d4:	7019      	strb	r1, [r3, #0]
 80098d6:	4608      	mov	r0, r1
 80098d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098dc:	4770      	bx	lr

080098de <__sfputs_r>:
 80098de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e0:	4606      	mov	r6, r0
 80098e2:	460f      	mov	r7, r1
 80098e4:	4614      	mov	r4, r2
 80098e6:	18d5      	adds	r5, r2, r3
 80098e8:	42ac      	cmp	r4, r5
 80098ea:	d101      	bne.n	80098f0 <__sfputs_r+0x12>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e007      	b.n	8009900 <__sfputs_r+0x22>
 80098f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f4:	463a      	mov	r2, r7
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ffda 	bl	80098b0 <__sfputc_r>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d1f3      	bne.n	80098e8 <__sfputs_r+0xa>
 8009900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009904 <_vfiprintf_r>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	460d      	mov	r5, r1
 800990a:	b09d      	sub	sp, #116	; 0x74
 800990c:	4614      	mov	r4, r2
 800990e:	4698      	mov	r8, r3
 8009910:	4606      	mov	r6, r0
 8009912:	b118      	cbz	r0, 800991c <_vfiprintf_r+0x18>
 8009914:	6983      	ldr	r3, [r0, #24]
 8009916:	b90b      	cbnz	r3, 800991c <_vfiprintf_r+0x18>
 8009918:	f7ff fd5e 	bl	80093d8 <__sinit>
 800991c:	4b89      	ldr	r3, [pc, #548]	; (8009b44 <_vfiprintf_r+0x240>)
 800991e:	429d      	cmp	r5, r3
 8009920:	d11b      	bne.n	800995a <_vfiprintf_r+0x56>
 8009922:	6875      	ldr	r5, [r6, #4]
 8009924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009926:	07d9      	lsls	r1, r3, #31
 8009928:	d405      	bmi.n	8009936 <_vfiprintf_r+0x32>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	059a      	lsls	r2, r3, #22
 800992e:	d402      	bmi.n	8009936 <_vfiprintf_r+0x32>
 8009930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009932:	f7ff fdef 	bl	8009514 <__retarget_lock_acquire_recursive>
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	071b      	lsls	r3, r3, #28
 800993a:	d501      	bpl.n	8009940 <_vfiprintf_r+0x3c>
 800993c:	692b      	ldr	r3, [r5, #16]
 800993e:	b9eb      	cbnz	r3, 800997c <_vfiprintf_r+0x78>
 8009940:	4629      	mov	r1, r5
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff fbc0 	bl	80090c8 <__swsetup_r>
 8009948:	b1c0      	cbz	r0, 800997c <_vfiprintf_r+0x78>
 800994a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800994c:	07dc      	lsls	r4, r3, #31
 800994e:	d50e      	bpl.n	800996e <_vfiprintf_r+0x6a>
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	b01d      	add	sp, #116	; 0x74
 8009956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995a:	4b7b      	ldr	r3, [pc, #492]	; (8009b48 <_vfiprintf_r+0x244>)
 800995c:	429d      	cmp	r5, r3
 800995e:	d101      	bne.n	8009964 <_vfiprintf_r+0x60>
 8009960:	68b5      	ldr	r5, [r6, #8]
 8009962:	e7df      	b.n	8009924 <_vfiprintf_r+0x20>
 8009964:	4b79      	ldr	r3, [pc, #484]	; (8009b4c <_vfiprintf_r+0x248>)
 8009966:	429d      	cmp	r5, r3
 8009968:	bf08      	it	eq
 800996a:	68f5      	ldreq	r5, [r6, #12]
 800996c:	e7da      	b.n	8009924 <_vfiprintf_r+0x20>
 800996e:	89ab      	ldrh	r3, [r5, #12]
 8009970:	0598      	lsls	r0, r3, #22
 8009972:	d4ed      	bmi.n	8009950 <_vfiprintf_r+0x4c>
 8009974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009976:	f7ff fdce 	bl	8009516 <__retarget_lock_release_recursive>
 800997a:	e7e9      	b.n	8009950 <_vfiprintf_r+0x4c>
 800997c:	2300      	movs	r3, #0
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	2320      	movs	r3, #32
 8009982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009986:	f8cd 800c 	str.w	r8, [sp, #12]
 800998a:	2330      	movs	r3, #48	; 0x30
 800998c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b50 <_vfiprintf_r+0x24c>
 8009990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009994:	f04f 0901 	mov.w	r9, #1
 8009998:	4623      	mov	r3, r4
 800999a:	469a      	mov	sl, r3
 800999c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a0:	b10a      	cbz	r2, 80099a6 <_vfiprintf_r+0xa2>
 80099a2:	2a25      	cmp	r2, #37	; 0x25
 80099a4:	d1f9      	bne.n	800999a <_vfiprintf_r+0x96>
 80099a6:	ebba 0b04 	subs.w	fp, sl, r4
 80099aa:	d00b      	beq.n	80099c4 <_vfiprintf_r+0xc0>
 80099ac:	465b      	mov	r3, fp
 80099ae:	4622      	mov	r2, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7ff ff93 	bl	80098de <__sfputs_r>
 80099b8:	3001      	adds	r0, #1
 80099ba:	f000 80aa 	beq.w	8009b12 <_vfiprintf_r+0x20e>
 80099be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c0:	445a      	add	r2, fp
 80099c2:	9209      	str	r2, [sp, #36]	; 0x24
 80099c4:	f89a 3000 	ldrb.w	r3, [sl]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80a2 	beq.w	8009b12 <_vfiprintf_r+0x20e>
 80099ce:	2300      	movs	r3, #0
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d8:	f10a 0a01 	add.w	sl, sl, #1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e4:	931a      	str	r3, [sp, #104]	; 0x68
 80099e6:	4654      	mov	r4, sl
 80099e8:	2205      	movs	r2, #5
 80099ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ee:	4858      	ldr	r0, [pc, #352]	; (8009b50 <_vfiprintf_r+0x24c>)
 80099f0:	f7f6 fbfe 	bl	80001f0 <memchr>
 80099f4:	9a04      	ldr	r2, [sp, #16]
 80099f6:	b9d8      	cbnz	r0, 8009a30 <_vfiprintf_r+0x12c>
 80099f8:	06d1      	lsls	r1, r2, #27
 80099fa:	bf44      	itt	mi
 80099fc:	2320      	movmi	r3, #32
 80099fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a02:	0713      	lsls	r3, r2, #28
 8009a04:	bf44      	itt	mi
 8009a06:	232b      	movmi	r3, #43	; 0x2b
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a10:	2b2a      	cmp	r3, #42	; 0x2a
 8009a12:	d015      	beq.n	8009a40 <_vfiprintf_r+0x13c>
 8009a14:	9a07      	ldr	r2, [sp, #28]
 8009a16:	4654      	mov	r4, sl
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f04f 0c0a 	mov.w	ip, #10
 8009a1e:	4621      	mov	r1, r4
 8009a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a24:	3b30      	subs	r3, #48	; 0x30
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d94e      	bls.n	8009ac8 <_vfiprintf_r+0x1c4>
 8009a2a:	b1b0      	cbz	r0, 8009a5a <_vfiprintf_r+0x156>
 8009a2c:	9207      	str	r2, [sp, #28]
 8009a2e:	e014      	b.n	8009a5a <_vfiprintf_r+0x156>
 8009a30:	eba0 0308 	sub.w	r3, r0, r8
 8009a34:	fa09 f303 	lsl.w	r3, r9, r3
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	46a2      	mov	sl, r4
 8009a3e:	e7d2      	b.n	80099e6 <_vfiprintf_r+0xe2>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	1d19      	adds	r1, r3, #4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	9103      	str	r1, [sp, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bfbb      	ittet	lt
 8009a4c:	425b      	neglt	r3, r3
 8009a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a52:	9307      	strge	r3, [sp, #28]
 8009a54:	9307      	strlt	r3, [sp, #28]
 8009a56:	bfb8      	it	lt
 8009a58:	9204      	strlt	r2, [sp, #16]
 8009a5a:	7823      	ldrb	r3, [r4, #0]
 8009a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5e:	d10c      	bne.n	8009a7a <_vfiprintf_r+0x176>
 8009a60:	7863      	ldrb	r3, [r4, #1]
 8009a62:	2b2a      	cmp	r3, #42	; 0x2a
 8009a64:	d135      	bne.n	8009ad2 <_vfiprintf_r+0x1ce>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9203      	str	r2, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfb8      	it	lt
 8009a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a76:	3402      	adds	r4, #2
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b60 <_vfiprintf_r+0x25c>
 8009a7e:	7821      	ldrb	r1, [r4, #0]
 8009a80:	2203      	movs	r2, #3
 8009a82:	4650      	mov	r0, sl
 8009a84:	f7f6 fbb4 	bl	80001f0 <memchr>
 8009a88:	b140      	cbz	r0, 8009a9c <_vfiprintf_r+0x198>
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	eba0 000a 	sub.w	r0, r0, sl
 8009a90:	fa03 f000 	lsl.w	r0, r3, r0
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4303      	orrs	r3, r0
 8009a98:	3401      	adds	r4, #1
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa0:	482c      	ldr	r0, [pc, #176]	; (8009b54 <_vfiprintf_r+0x250>)
 8009aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	f7f6 fba2 	bl	80001f0 <memchr>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d03f      	beq.n	8009b30 <_vfiprintf_r+0x22c>
 8009ab0:	4b29      	ldr	r3, [pc, #164]	; (8009b58 <_vfiprintf_r+0x254>)
 8009ab2:	bb1b      	cbnz	r3, 8009afc <_vfiprintf_r+0x1f8>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	3307      	adds	r3, #7
 8009ab8:	f023 0307 	bic.w	r3, r3, #7
 8009abc:	3308      	adds	r3, #8
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac2:	443b      	add	r3, r7
 8009ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac6:	e767      	b.n	8009998 <_vfiprintf_r+0x94>
 8009ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009acc:	460c      	mov	r4, r1
 8009ace:	2001      	movs	r0, #1
 8009ad0:	e7a5      	b.n	8009a1e <_vfiprintf_r+0x11a>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	3401      	adds	r4, #1
 8009ad6:	9305      	str	r3, [sp, #20]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae4:	3a30      	subs	r2, #48	; 0x30
 8009ae6:	2a09      	cmp	r2, #9
 8009ae8:	d903      	bls.n	8009af2 <_vfiprintf_r+0x1ee>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0c5      	beq.n	8009a7a <_vfiprintf_r+0x176>
 8009aee:	9105      	str	r1, [sp, #20]
 8009af0:	e7c3      	b.n	8009a7a <_vfiprintf_r+0x176>
 8009af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af6:	4604      	mov	r4, r0
 8009af8:	2301      	movs	r3, #1
 8009afa:	e7f0      	b.n	8009ade <_vfiprintf_r+0x1da>
 8009afc:	ab03      	add	r3, sp, #12
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	462a      	mov	r2, r5
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <_vfiprintf_r+0x258>)
 8009b04:	a904      	add	r1, sp, #16
 8009b06:	4630      	mov	r0, r6
 8009b08:	f3af 8000 	nop.w
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	1c78      	adds	r0, r7, #1
 8009b10:	d1d6      	bne.n	8009ac0 <_vfiprintf_r+0x1bc>
 8009b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	d405      	bmi.n	8009b24 <_vfiprintf_r+0x220>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	059a      	lsls	r2, r3, #22
 8009b1c:	d402      	bmi.n	8009b24 <_vfiprintf_r+0x220>
 8009b1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b20:	f7ff fcf9 	bl	8009516 <__retarget_lock_release_recursive>
 8009b24:	89ab      	ldrh	r3, [r5, #12]
 8009b26:	065b      	lsls	r3, r3, #25
 8009b28:	f53f af12 	bmi.w	8009950 <_vfiprintf_r+0x4c>
 8009b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b2e:	e711      	b.n	8009954 <_vfiprintf_r+0x50>
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <_vfiprintf_r+0x258>)
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f000 f880 	bl	8009c40 <_printf_i>
 8009b40:	e7e4      	b.n	8009b0c <_vfiprintf_r+0x208>
 8009b42:	bf00      	nop
 8009b44:	0803c1a4 	.word	0x0803c1a4
 8009b48:	0803c1c4 	.word	0x0803c1c4
 8009b4c:	0803c184 	.word	0x0803c184
 8009b50:	0803c1e4 	.word	0x0803c1e4
 8009b54:	0803c1ee 	.word	0x0803c1ee
 8009b58:	00000000 	.word	0x00000000
 8009b5c:	080098df 	.word	0x080098df
 8009b60:	0803c1ea 	.word	0x0803c1ea

08009b64 <_printf_common>:
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	4616      	mov	r6, r2
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	688a      	ldr	r2, [r1, #8]
 8009b6e:	690b      	ldr	r3, [r1, #16]
 8009b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b74:	4293      	cmp	r3, r2
 8009b76:	bfb8      	it	lt
 8009b78:	4613      	movlt	r3, r2
 8009b7a:	6033      	str	r3, [r6, #0]
 8009b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b80:	4607      	mov	r7, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	b10a      	cbz	r2, 8009b8a <_printf_common+0x26>
 8009b86:	3301      	adds	r3, #1
 8009b88:	6033      	str	r3, [r6, #0]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	0699      	lsls	r1, r3, #26
 8009b8e:	bf42      	ittt	mi
 8009b90:	6833      	ldrmi	r3, [r6, #0]
 8009b92:	3302      	addmi	r3, #2
 8009b94:	6033      	strmi	r3, [r6, #0]
 8009b96:	6825      	ldr	r5, [r4, #0]
 8009b98:	f015 0506 	ands.w	r5, r5, #6
 8009b9c:	d106      	bne.n	8009bac <_printf_common+0x48>
 8009b9e:	f104 0a19 	add.w	sl, r4, #25
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	6832      	ldr	r2, [r6, #0]
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	42ab      	cmp	r3, r5
 8009baa:	dc26      	bgt.n	8009bfa <_printf_common+0x96>
 8009bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb0:	1e13      	subs	r3, r2, #0
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	bf18      	it	ne
 8009bb6:	2301      	movne	r3, #1
 8009bb8:	0692      	lsls	r2, r2, #26
 8009bba:	d42b      	bmi.n	8009c14 <_printf_common+0xb0>
 8009bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	47c0      	blx	r8
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d01e      	beq.n	8009c08 <_printf_common+0xa4>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	68e5      	ldr	r5, [r4, #12]
 8009bce:	6832      	ldr	r2, [r6, #0]
 8009bd0:	f003 0306 	and.w	r3, r3, #6
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	bf08      	it	eq
 8009bd8:	1aad      	subeq	r5, r5, r2
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	bf0c      	ite	eq
 8009be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009be4:	2500      	movne	r5, #0
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bfc4      	itt	gt
 8009bea:	1a9b      	subgt	r3, r3, r2
 8009bec:	18ed      	addgt	r5, r5, r3
 8009bee:	2600      	movs	r6, #0
 8009bf0:	341a      	adds	r4, #26
 8009bf2:	42b5      	cmp	r5, r6
 8009bf4:	d11a      	bne.n	8009c2c <_printf_common+0xc8>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e008      	b.n	8009c0c <_printf_common+0xa8>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	4649      	mov	r1, r9
 8009c00:	4638      	mov	r0, r7
 8009c02:	47c0      	blx	r8
 8009c04:	3001      	adds	r0, #1
 8009c06:	d103      	bne.n	8009c10 <_printf_common+0xac>
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	3501      	adds	r5, #1
 8009c12:	e7c6      	b.n	8009ba2 <_printf_common+0x3e>
 8009c14:	18e1      	adds	r1, r4, r3
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	2030      	movs	r0, #48	; 0x30
 8009c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c1e:	4422      	add	r2, r4
 8009c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c28:	3302      	adds	r3, #2
 8009c2a:	e7c7      	b.n	8009bbc <_printf_common+0x58>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4649      	mov	r1, r9
 8009c32:	4638      	mov	r0, r7
 8009c34:	47c0      	blx	r8
 8009c36:	3001      	adds	r0, #1
 8009c38:	d0e6      	beq.n	8009c08 <_printf_common+0xa4>
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	e7d9      	b.n	8009bf2 <_printf_common+0x8e>
	...

08009c40 <_printf_i>:
 8009c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	4691      	mov	r9, r2
 8009c48:	7e27      	ldrb	r7, [r4, #24]
 8009c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c4c:	2f78      	cmp	r7, #120	; 0x78
 8009c4e:	4680      	mov	r8, r0
 8009c50:	469a      	mov	sl, r3
 8009c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c56:	d807      	bhi.n	8009c68 <_printf_i+0x28>
 8009c58:	2f62      	cmp	r7, #98	; 0x62
 8009c5a:	d80a      	bhi.n	8009c72 <_printf_i+0x32>
 8009c5c:	2f00      	cmp	r7, #0
 8009c5e:	f000 80d8 	beq.w	8009e12 <_printf_i+0x1d2>
 8009c62:	2f58      	cmp	r7, #88	; 0x58
 8009c64:	f000 80a3 	beq.w	8009dae <_printf_i+0x16e>
 8009c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c70:	e03a      	b.n	8009ce8 <_printf_i+0xa8>
 8009c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c76:	2b15      	cmp	r3, #21
 8009c78:	d8f6      	bhi.n	8009c68 <_printf_i+0x28>
 8009c7a:	a001      	add	r0, pc, #4	; (adr r0, 8009c80 <_printf_i+0x40>)
 8009c7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c80:	08009cd9 	.word	0x08009cd9
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009c69 	.word	0x08009c69
 8009c8c:	08009c69 	.word	0x08009c69
 8009c90:	08009c69 	.word	0x08009c69
 8009c94:	08009c69 	.word	0x08009c69
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009c69 	.word	0x08009c69
 8009ca0:	08009c69 	.word	0x08009c69
 8009ca4:	08009c69 	.word	0x08009c69
 8009ca8:	08009c69 	.word	0x08009c69
 8009cac:	08009df9 	.word	0x08009df9
 8009cb0:	08009d1d 	.word	0x08009d1d
 8009cb4:	08009ddb 	.word	0x08009ddb
 8009cb8:	08009c69 	.word	0x08009c69
 8009cbc:	08009c69 	.word	0x08009c69
 8009cc0:	08009e1b 	.word	0x08009e1b
 8009cc4:	08009c69 	.word	0x08009c69
 8009cc8:	08009d1d 	.word	0x08009d1d
 8009ccc:	08009c69 	.word	0x08009c69
 8009cd0:	08009c69 	.word	0x08009c69
 8009cd4:	08009de3 	.word	0x08009de3
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	1d1a      	adds	r2, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	600a      	str	r2, [r1, #0]
 8009ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0a3      	b.n	8009e34 <_printf_i+0x1f4>
 8009cec:	6825      	ldr	r5, [r4, #0]
 8009cee:	6808      	ldr	r0, [r1, #0]
 8009cf0:	062e      	lsls	r6, r5, #24
 8009cf2:	f100 0304 	add.w	r3, r0, #4
 8009cf6:	d50a      	bpl.n	8009d0e <_printf_i+0xce>
 8009cf8:	6805      	ldr	r5, [r0, #0]
 8009cfa:	600b      	str	r3, [r1, #0]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	da03      	bge.n	8009d08 <_printf_i+0xc8>
 8009d00:	232d      	movs	r3, #45	; 0x2d
 8009d02:	426d      	negs	r5, r5
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	485e      	ldr	r0, [pc, #376]	; (8009e84 <_printf_i+0x244>)
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	e019      	b.n	8009d42 <_printf_i+0x102>
 8009d0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d12:	6805      	ldr	r5, [r0, #0]
 8009d14:	600b      	str	r3, [r1, #0]
 8009d16:	bf18      	it	ne
 8009d18:	b22d      	sxthne	r5, r5
 8009d1a:	e7ef      	b.n	8009cfc <_printf_i+0xbc>
 8009d1c:	680b      	ldr	r3, [r1, #0]
 8009d1e:	6825      	ldr	r5, [r4, #0]
 8009d20:	1d18      	adds	r0, r3, #4
 8009d22:	6008      	str	r0, [r1, #0]
 8009d24:	0628      	lsls	r0, r5, #24
 8009d26:	d501      	bpl.n	8009d2c <_printf_i+0xec>
 8009d28:	681d      	ldr	r5, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <_printf_i+0xf2>
 8009d2c:	0669      	lsls	r1, r5, #25
 8009d2e:	d5fb      	bpl.n	8009d28 <_printf_i+0xe8>
 8009d30:	881d      	ldrh	r5, [r3, #0]
 8009d32:	4854      	ldr	r0, [pc, #336]	; (8009e84 <_printf_i+0x244>)
 8009d34:	2f6f      	cmp	r7, #111	; 0x6f
 8009d36:	bf0c      	ite	eq
 8009d38:	2308      	moveq	r3, #8
 8009d3a:	230a      	movne	r3, #10
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d42:	6866      	ldr	r6, [r4, #4]
 8009d44:	60a6      	str	r6, [r4, #8]
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	bfa2      	ittt	ge
 8009d4a:	6821      	ldrge	r1, [r4, #0]
 8009d4c:	f021 0104 	bicge.w	r1, r1, #4
 8009d50:	6021      	strge	r1, [r4, #0]
 8009d52:	b90d      	cbnz	r5, 8009d58 <_printf_i+0x118>
 8009d54:	2e00      	cmp	r6, #0
 8009d56:	d04d      	beq.n	8009df4 <_printf_i+0x1b4>
 8009d58:	4616      	mov	r6, r2
 8009d5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009d62:	5dc7      	ldrb	r7, [r0, r7]
 8009d64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d68:	462f      	mov	r7, r5
 8009d6a:	42bb      	cmp	r3, r7
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	d9f4      	bls.n	8009d5a <_printf_i+0x11a>
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d10b      	bne.n	8009d8c <_printf_i+0x14c>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07df      	lsls	r7, r3, #31
 8009d78:	d508      	bpl.n	8009d8c <_printf_i+0x14c>
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6861      	ldr	r1, [r4, #4]
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	bfde      	ittt	le
 8009d82:	2330      	movle	r3, #48	; 0x30
 8009d84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d8c:	1b92      	subs	r2, r2, r6
 8009d8e:	6122      	str	r2, [r4, #16]
 8009d90:	f8cd a000 	str.w	sl, [sp]
 8009d94:	464b      	mov	r3, r9
 8009d96:	aa03      	add	r2, sp, #12
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fee2 	bl	8009b64 <_printf_common>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d14c      	bne.n	8009e3e <_printf_i+0x1fe>
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	b004      	add	sp, #16
 8009daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dae:	4835      	ldr	r0, [pc, #212]	; (8009e84 <_printf_i+0x244>)
 8009db0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	680e      	ldr	r6, [r1, #0]
 8009db8:	061f      	lsls	r7, r3, #24
 8009dba:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dbe:	600e      	str	r6, [r1, #0]
 8009dc0:	d514      	bpl.n	8009dec <_printf_i+0x1ac>
 8009dc2:	07d9      	lsls	r1, r3, #31
 8009dc4:	bf44      	itt	mi
 8009dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dca:	6023      	strmi	r3, [r4, #0]
 8009dcc:	b91d      	cbnz	r5, 8009dd6 <_printf_i+0x196>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	2310      	movs	r3, #16
 8009dd8:	e7b0      	b.n	8009d3c <_printf_i+0xfc>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f043 0320 	orr.w	r3, r3, #32
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	2378      	movs	r3, #120	; 0x78
 8009de4:	4828      	ldr	r0, [pc, #160]	; (8009e88 <_printf_i+0x248>)
 8009de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dea:	e7e3      	b.n	8009db4 <_printf_i+0x174>
 8009dec:	065e      	lsls	r6, r3, #25
 8009dee:	bf48      	it	mi
 8009df0:	b2ad      	uxthmi	r5, r5
 8009df2:	e7e6      	b.n	8009dc2 <_printf_i+0x182>
 8009df4:	4616      	mov	r6, r2
 8009df6:	e7bb      	b.n	8009d70 <_printf_i+0x130>
 8009df8:	680b      	ldr	r3, [r1, #0]
 8009dfa:	6826      	ldr	r6, [r4, #0]
 8009dfc:	6960      	ldr	r0, [r4, #20]
 8009dfe:	1d1d      	adds	r5, r3, #4
 8009e00:	600d      	str	r5, [r1, #0]
 8009e02:	0635      	lsls	r5, r6, #24
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	d501      	bpl.n	8009e0c <_printf_i+0x1cc>
 8009e08:	6018      	str	r0, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <_printf_i+0x1d2>
 8009e0c:	0671      	lsls	r1, r6, #25
 8009e0e:	d5fb      	bpl.n	8009e08 <_printf_i+0x1c8>
 8009e10:	8018      	strh	r0, [r3, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	4616      	mov	r6, r2
 8009e18:	e7ba      	b.n	8009d90 <_printf_i+0x150>
 8009e1a:	680b      	ldr	r3, [r1, #0]
 8009e1c:	1d1a      	adds	r2, r3, #4
 8009e1e:	600a      	str	r2, [r1, #0]
 8009e20:	681e      	ldr	r6, [r3, #0]
 8009e22:	6862      	ldr	r2, [r4, #4]
 8009e24:	2100      	movs	r1, #0
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7f6 f9e2 	bl	80001f0 <memchr>
 8009e2c:	b108      	cbz	r0, 8009e32 <_printf_i+0x1f2>
 8009e2e:	1b80      	subs	r0, r0, r6
 8009e30:	6060      	str	r0, [r4, #4]
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	2300      	movs	r3, #0
 8009e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e3c:	e7a8      	b.n	8009d90 <_printf_i+0x150>
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	4632      	mov	r2, r6
 8009e42:	4649      	mov	r1, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	47d0      	blx	sl
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d0ab      	beq.n	8009da4 <_printf_i+0x164>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	079b      	lsls	r3, r3, #30
 8009e50:	d413      	bmi.n	8009e7a <_printf_i+0x23a>
 8009e52:	68e0      	ldr	r0, [r4, #12]
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	4298      	cmp	r0, r3
 8009e58:	bfb8      	it	lt
 8009e5a:	4618      	movlt	r0, r3
 8009e5c:	e7a4      	b.n	8009da8 <_printf_i+0x168>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4632      	mov	r2, r6
 8009e62:	4649      	mov	r1, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	47d0      	blx	sl
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d09b      	beq.n	8009da4 <_printf_i+0x164>
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	68e3      	ldr	r3, [r4, #12]
 8009e70:	9903      	ldr	r1, [sp, #12]
 8009e72:	1a5b      	subs	r3, r3, r1
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	dcf2      	bgt.n	8009e5e <_printf_i+0x21e>
 8009e78:	e7eb      	b.n	8009e52 <_printf_i+0x212>
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	f104 0619 	add.w	r6, r4, #25
 8009e80:	e7f5      	b.n	8009e6e <_printf_i+0x22e>
 8009e82:	bf00      	nop
 8009e84:	0803c1f5 	.word	0x0803c1f5
 8009e88:	0803c206 	.word	0x0803c206

08009e8c <__sread>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	f000 f8e2 	bl	800a05c <_read_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	bfab      	itete	ge
 8009e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ea0:	181b      	addge	r3, r3, r0
 8009ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ea6:	bfac      	ite	ge
 8009ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eaa:	81a3      	strhlt	r3, [r4, #12]
 8009eac:	bd10      	pop	{r4, pc}

08009eae <__swrite>:
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	05db      	lsls	r3, r3, #23
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1e>
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f000 f868 	bl	8009f9c <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	4628      	mov	r0, r5
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f000 b817 	b.w	8009f14 <_write_r>

08009ee6 <__sseek>:
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eee:	f000 f855 	bl	8009f9c <_lseek_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	bf15      	itete	ne
 8009ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f02:	81a3      	strheq	r3, [r4, #12]
 8009f04:	bf18      	it	ne
 8009f06:	81a3      	strhne	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__sclose>:
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 b813 	b.w	8009f38 <_close_r>
	...

08009f14 <_write_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	; (8009f34 <_write_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f7 fc50 	bl	80017c8 <_write>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_write_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_write_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	2000c8f0 	.word	0x2000c8f0

08009f38 <_close_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d06      	ldr	r5, [pc, #24]	; (8009f54 <_close_r+0x1c>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f7 fc4e 	bl	80017e4 <_close>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_close_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_close_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	2000c8f0 	.word	0x2000c8f0

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f7 fc41 	bl	80017ec <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	2000c8f0 	.word	0x2000c8f0

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 fc36 	bl	80017f8 <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	2000c8f0 	.word	0x2000c8f0

08009f9c <_lseek_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_lseek_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f7 fc26 	bl	80017fc <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_lseek_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_lseek_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	2000c8f0 	.word	0x2000c8f0

08009fc0 <memcpy>:
 8009fc0:	440a      	add	r2, r1
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fc8:	d100      	bne.n	8009fcc <memcpy+0xc>
 8009fca:	4770      	bx	lr
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd6:	4291      	cmp	r1, r2
 8009fd8:	d1f9      	bne.n	8009fce <memcpy+0xe>
 8009fda:	bd10      	pop	{r4, pc}

08009fdc <memmove>:
 8009fdc:	4288      	cmp	r0, r1
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	eb01 0402 	add.w	r4, r1, r2
 8009fe4:	d902      	bls.n	8009fec <memmove+0x10>
 8009fe6:	4284      	cmp	r4, r0
 8009fe8:	4623      	mov	r3, r4
 8009fea:	d807      	bhi.n	8009ffc <memmove+0x20>
 8009fec:	1e43      	subs	r3, r0, #1
 8009fee:	42a1      	cmp	r1, r4
 8009ff0:	d008      	beq.n	800a004 <memmove+0x28>
 8009ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ffa:	e7f8      	b.n	8009fee <memmove+0x12>
 8009ffc:	4402      	add	r2, r0
 8009ffe:	4601      	mov	r1, r0
 800a000:	428a      	cmp	r2, r1
 800a002:	d100      	bne.n	800a006 <memmove+0x2a>
 800a004:	bd10      	pop	{r4, pc}
 800a006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a00e:	e7f7      	b.n	800a000 <memmove+0x24>

0800a010 <_realloc_r>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	4607      	mov	r7, r0
 800a014:	4614      	mov	r4, r2
 800a016:	460e      	mov	r6, r1
 800a018:	b921      	cbnz	r1, 800a024 <_realloc_r+0x14>
 800a01a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a01e:	4611      	mov	r1, r2
 800a020:	f7fe bed6 	b.w	8008dd0 <_malloc_r>
 800a024:	b922      	cbnz	r2, 800a030 <_realloc_r+0x20>
 800a026:	f7fe fe83 	bl	8008d30 <_free_r>
 800a02a:	4625      	mov	r5, r4
 800a02c:	4628      	mov	r0, r5
 800a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a030:	f000 f826 	bl	800a080 <_malloc_usable_size_r>
 800a034:	42a0      	cmp	r0, r4
 800a036:	d20f      	bcs.n	800a058 <_realloc_r+0x48>
 800a038:	4621      	mov	r1, r4
 800a03a:	4638      	mov	r0, r7
 800a03c:	f7fe fec8 	bl	8008dd0 <_malloc_r>
 800a040:	4605      	mov	r5, r0
 800a042:	2800      	cmp	r0, #0
 800a044:	d0f2      	beq.n	800a02c <_realloc_r+0x1c>
 800a046:	4631      	mov	r1, r6
 800a048:	4622      	mov	r2, r4
 800a04a:	f7ff ffb9 	bl	8009fc0 <memcpy>
 800a04e:	4631      	mov	r1, r6
 800a050:	4638      	mov	r0, r7
 800a052:	f7fe fe6d 	bl	8008d30 <_free_r>
 800a056:	e7e9      	b.n	800a02c <_realloc_r+0x1c>
 800a058:	4635      	mov	r5, r6
 800a05a:	e7e7      	b.n	800a02c <_realloc_r+0x1c>

0800a05c <_read_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_read_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f7 fb9e 	bl	80017ac <_read>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_read_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_read_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	2000c8f0 	.word	0x2000c8f0

0800a080 <_malloc_usable_size_r>:
 800a080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a084:	1f18      	subs	r0, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfbc      	itt	lt
 800a08a:	580b      	ldrlt	r3, [r1, r0]
 800a08c:	18c0      	addlt	r0, r0, r3
 800a08e:	4770      	bx	lr

0800a090 <sqrt>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	ed2d 8b02 	vpush	{d8}
 800a096:	ec55 4b10 	vmov	r4, r5, d0
 800a09a:	f000 f82d 	bl	800a0f8 <__ieee754_sqrt>
 800a09e:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <sqrt+0x64>)
 800a0a0:	eeb0 8a40 	vmov.f32	s16, s0
 800a0a4:	eef0 8a60 	vmov.f32	s17, s1
 800a0a8:	f993 3000 	ldrsb.w	r3, [r3]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	d019      	beq.n	800a0e4 <sqrt+0x54>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	f7f6 fd40 	bl	8000b3c <__aeabi_dcmpun>
 800a0bc:	b990      	cbnz	r0, 800a0e4 <sqrt+0x54>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 fd11 	bl	8000aec <__aeabi_dcmplt>
 800a0ca:	b158      	cbz	r0, 800a0e4 <sqrt+0x54>
 800a0cc:	f7fe fdf6 	bl	8008cbc <__errno>
 800a0d0:	2321      	movs	r3, #33	; 0x21
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f7f6 fbbe 	bl	800085c <__aeabi_ddiv>
 800a0e0:	ec41 0b18 	vmov	d8, r0, r1
 800a0e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e8:	eef0 0a68 	vmov.f32	s1, s17
 800a0ec:	ecbd 8b02 	vpop	{d8}
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200000fc 	.word	0x200000fc

0800a0f8 <__ieee754_sqrt>:
 800a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fc:	ec55 4b10 	vmov	r4, r5, d0
 800a100:	4e56      	ldr	r6, [pc, #344]	; (800a25c <__ieee754_sqrt+0x164>)
 800a102:	43ae      	bics	r6, r5
 800a104:	ee10 0a10 	vmov	r0, s0
 800a108:	ee10 3a10 	vmov	r3, s0
 800a10c:	4629      	mov	r1, r5
 800a10e:	462a      	mov	r2, r5
 800a110:	d110      	bne.n	800a134 <__ieee754_sqrt+0x3c>
 800a112:	ee10 2a10 	vmov	r2, s0
 800a116:	462b      	mov	r3, r5
 800a118:	f7f6 fa76 	bl	8000608 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4620      	mov	r0, r4
 800a122:	4629      	mov	r1, r5
 800a124:	f7f6 f8ba 	bl	800029c <__adddf3>
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	ec45 4b10 	vmov	d0, r4, r5
 800a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a134:	2d00      	cmp	r5, #0
 800a136:	dc10      	bgt.n	800a15a <__ieee754_sqrt+0x62>
 800a138:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a13c:	4330      	orrs	r0, r6
 800a13e:	d0f5      	beq.n	800a12c <__ieee754_sqrt+0x34>
 800a140:	b15d      	cbz	r5, 800a15a <__ieee754_sqrt+0x62>
 800a142:	ee10 2a10 	vmov	r2, s0
 800a146:	462b      	mov	r3, r5
 800a148:	ee10 0a10 	vmov	r0, s0
 800a14c:	f7f6 f8a4 	bl	8000298 <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	f7f6 fb82 	bl	800085c <__aeabi_ddiv>
 800a158:	e7e6      	b.n	800a128 <__ieee754_sqrt+0x30>
 800a15a:	1509      	asrs	r1, r1, #20
 800a15c:	d076      	beq.n	800a24c <__ieee754_sqrt+0x154>
 800a15e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a162:	07ce      	lsls	r6, r1, #31
 800a164:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a168:	bf5e      	ittt	pl
 800a16a:	0fda      	lsrpl	r2, r3, #31
 800a16c:	005b      	lslpl	r3, r3, #1
 800a16e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a172:	0fda      	lsrs	r2, r3, #31
 800a174:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a178:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a17c:	2000      	movs	r0, #0
 800a17e:	106d      	asrs	r5, r5, #1
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	f04f 0e16 	mov.w	lr, #22
 800a186:	4684      	mov	ip, r0
 800a188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a18c:	eb0c 0401 	add.w	r4, ip, r1
 800a190:	4294      	cmp	r4, r2
 800a192:	bfde      	ittt	le
 800a194:	1b12      	suble	r2, r2, r4
 800a196:	eb04 0c01 	addle.w	ip, r4, r1
 800a19a:	1840      	addle	r0, r0, r1
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	f1be 0e01 	subs.w	lr, lr, #1
 800a1a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a1a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a1aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1ae:	d1ed      	bne.n	800a18c <__ieee754_sqrt+0x94>
 800a1b0:	4671      	mov	r1, lr
 800a1b2:	2720      	movs	r7, #32
 800a1b4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a1b8:	4562      	cmp	r2, ip
 800a1ba:	eb04 060e 	add.w	r6, r4, lr
 800a1be:	dc02      	bgt.n	800a1c6 <__ieee754_sqrt+0xce>
 800a1c0:	d113      	bne.n	800a1ea <__ieee754_sqrt+0xf2>
 800a1c2:	429e      	cmp	r6, r3
 800a1c4:	d811      	bhi.n	800a1ea <__ieee754_sqrt+0xf2>
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	eb06 0e04 	add.w	lr, r6, r4
 800a1cc:	da43      	bge.n	800a256 <__ieee754_sqrt+0x15e>
 800a1ce:	f1be 0f00 	cmp.w	lr, #0
 800a1d2:	db40      	blt.n	800a256 <__ieee754_sqrt+0x15e>
 800a1d4:	f10c 0801 	add.w	r8, ip, #1
 800a1d8:	eba2 020c 	sub.w	r2, r2, ip
 800a1dc:	429e      	cmp	r6, r3
 800a1de:	bf88      	it	hi
 800a1e0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a1e4:	1b9b      	subs	r3, r3, r6
 800a1e6:	4421      	add	r1, r4
 800a1e8:	46c4      	mov	ip, r8
 800a1ea:	0052      	lsls	r2, r2, #1
 800a1ec:	3f01      	subs	r7, #1
 800a1ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a1f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a1f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1fa:	d1dd      	bne.n	800a1b8 <__ieee754_sqrt+0xc0>
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	d006      	beq.n	800a20e <__ieee754_sqrt+0x116>
 800a200:	1c4c      	adds	r4, r1, #1
 800a202:	bf13      	iteet	ne
 800a204:	3101      	addne	r1, #1
 800a206:	3001      	addeq	r0, #1
 800a208:	4639      	moveq	r1, r7
 800a20a:	f021 0101 	bicne.w	r1, r1, #1
 800a20e:	1043      	asrs	r3, r0, #1
 800a210:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a214:	0849      	lsrs	r1, r1, #1
 800a216:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a21a:	07c2      	lsls	r2, r0, #31
 800a21c:	bf48      	it	mi
 800a21e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a222:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a226:	460c      	mov	r4, r1
 800a228:	463d      	mov	r5, r7
 800a22a:	e77f      	b.n	800a12c <__ieee754_sqrt+0x34>
 800a22c:	0ada      	lsrs	r2, r3, #11
 800a22e:	3815      	subs	r0, #21
 800a230:	055b      	lsls	r3, r3, #21
 800a232:	2a00      	cmp	r2, #0
 800a234:	d0fa      	beq.n	800a22c <__ieee754_sqrt+0x134>
 800a236:	02d7      	lsls	r7, r2, #11
 800a238:	d50a      	bpl.n	800a250 <__ieee754_sqrt+0x158>
 800a23a:	f1c1 0420 	rsb	r4, r1, #32
 800a23e:	fa23 f404 	lsr.w	r4, r3, r4
 800a242:	1e4d      	subs	r5, r1, #1
 800a244:	408b      	lsls	r3, r1
 800a246:	4322      	orrs	r2, r4
 800a248:	1b41      	subs	r1, r0, r5
 800a24a:	e788      	b.n	800a15e <__ieee754_sqrt+0x66>
 800a24c:	4608      	mov	r0, r1
 800a24e:	e7f0      	b.n	800a232 <__ieee754_sqrt+0x13a>
 800a250:	0052      	lsls	r2, r2, #1
 800a252:	3101      	adds	r1, #1
 800a254:	e7ef      	b.n	800a236 <__ieee754_sqrt+0x13e>
 800a256:	46e0      	mov	r8, ip
 800a258:	e7be      	b.n	800a1d8 <__ieee754_sqrt+0xe0>
 800a25a:	bf00      	nop
 800a25c:	7ff00000 	.word	0x7ff00000

0800a260 <_init>:
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a262:	bf00      	nop
 800a264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a266:	bc08      	pop	{r3}
 800a268:	469e      	mov	lr, r3
 800a26a:	4770      	bx	lr

0800a26c <_fini>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	bf00      	nop
 800a270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a272:	bc08      	pop	{r3}
 800a274:	469e      	mov	lr, r3
 800a276:	4770      	bx	lr
